#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int i, j, k;
    cin >> i >> j >> k;
    cout << i+j+k;
    return 0;
}



#include <iostream>
#include <cstdio>
using namespace std;

int main() {
    // Complete the code.
    int a;
    long b;
    char c;
    float d;
    double e;
    scanf("%d %ld %c %f %lf", &a, &b, &c, &d, &e);
    printf("%d\n%ld\n%c\n%f\n%lf", a,b, c, d, e);
    return 0;
}






#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



int main()
{
    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    // Write your code here
    if (n == 1) {
        cout << "one";
    } else if (n == 2) {
        cout << "two";
    } else if (n == 3) {
        cout << "three";
    } else if (n == 4) {
        cout << "four";
    } else if (n == 5) {
        cout << "five";
    } else if (n == 6) {
        cout << "six";
    } else if (n == 7) {
        cout << "seven";
    } else if (n == 8) {
        cout << "eight";
    } else if (n == 9) {
        cout << "nine";
    } else {
        cout << "Greater than 9";
    }

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}





#include <iostream>
#include <cstdio>
using namespace std;

int main() {
    // Complete the code.
    int a, b;
    
    cin >> a;
    cin >> b;
    for (int i = a ; i <= b; i++) {
        if (i == 1) {
            cout << "one\n";
        } else if (i == 2) {
            cout << "two\n";
        } else if (i == 3) {
            cout << "three\n";
        } else if (i == 4) {
            cout << "four\n";
        } else if (i == 5) {
            cout << "five\n";
        } else if (i == 6) {
            cout << "six\n";
        } else if (i == 7) {
            cout << "seven\n";
        } else if (i == 8) {
            cout << "eight\n";
        } else if (i == 9) {
            cout << "nine\n";
        } else {
            if (i % 2 == 0) {
                cout << "even\n";
            } else {
                cout << "odd\n";
            }
        }
    }
    return 0;
}


#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

/*
Add `int max_of_four(int a, int b, int c, int d)` here.
*/
int max_of_four(int a, int b, int c, int d) {
    vector<int> vec;
    
    vec.push_back(a);
    vec.push_back(b);
    vec.push_back(c);
    vec.push_back(d);
    
    sort( vec.begin(), vec.end() );
    return vec[3];
}

int main() {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int ans = max_of_four(a, b, c, d);
    printf("%d", ans);
    
    return 0;
}





#include <stdio.h>
#include <cmath>
using namespace std;

void update(int *a,int *b) {
    // Complete this function
    int c = *a + *b;
    int d = abs(*a - *b);
    *a = c;
    *b = d;
}

int main() {
    int a, b;
    int *pa = &a, *pb = &b;
    
    scanf("%d %d", &a, &b);
    update(pa, pb);
    printf("%d\n%d", a, b);

    return 0;
}



#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int len;
    int j;
    scanf("%d", &len);
    //cin >> len;
    int arr[len];
    for (int i = 0; i < len; i++)  {
        scanf("%d", &j);
        //cin >> j;
        arr[i] = j;
    }
    for (int i = len-1 ; i >= 0; i--) {
        cout << arr[i] << " ";
    }
    return 0;
}




#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n, q;
    cin >> n >> q;
    int **seq = new int *[n];

    for (int i = 0; i < n; i++) {
        int a;
        cin >> a;
        int *b = new int[a];
        for (int j = 0; j< a; j++) {
            int e;
            cin >> e;
            b[j] = e;
        }
        * (seq + i ) = b;

    }

    for (int i = 0; i < q; i++) {
        int r,s;
        cin >> r >> s;
        cout << seq[r][s] << endl;
    }
    return 0;
}





#include <sstream>
#include <vector>
#include <iostream>
using namespace std;

vector<int> parseInts(string str) {
	// Complete this function
    vector<int> vect;
    stringstream ss(str);

    while (ss.good()) {
       string substr;
       getline(ss, substr, ',');
       vect.push_back(stoi(substr));
    }


    return vect;
}

int main() {
    string str;
    cin >> str;
    vector<int> integers = parseInts(str);
    for(int i = 0; i < integers.size(); i++) {
        cout << integers[i] << "\n";
    }

    return 0;
}



#include <iostream>
#include <string>
using namespace std;

int main() {
	// Complete the program
    string a, b;
    char c;
    cin >> a;
    cin >> b;

    cout << a.size() << " " << b.size() << endl;
    cout << a + b << endl;

    c = a[0];
    a[0] = b[0];
    b[0] = c;

    cout << a << " " << b << endl;

    return 0;
}



#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

/*
    add code for struct here.
*/
struct Student {
  int age;
  string first_name;
  string last_name;
  int standard;
};

int main() {
    Student st;

    cin >> st.age >> st.first_name >> st.last_name >> st.standard;
    cout << st.age << " " << st.first_name << " " << st.last_name << " " << st.standard;

    return 0;
}






#include <iostream>
#include <sstream>
#include <string>
using namespace std;

/*
Enter code for class Student here.
Read statement for specification.
*/
class Student {
    private:
        int age;
        string first_name;
        string last_name;
        int standard;
    public:
        void set_age(int a) {
            age = a;
        }
        int get_age() {
            return age;
        }
        void set_first_name(string a) {
            first_name = a;
        }
        string get_first_name() {
            return first_name;
        }
        void set_last_name(string a) {
            last_name = a;
        }
        string get_last_name() {
            return last_name;
        }
        void set_standard(int a) {
            standard = a;
        }
        int get_standard() {
            return standard;
        }    
        
        string to_string() {
            return std::to_string(age) + "," + first_name + "," + last_name + "," + std::to_string(standard);
            // stringstream ss;
            // char c = ',';
            // ss << age << c << first_name << c << last_name << c << standard;
            // return ss.str();
        }
};

int main() {
    int age, standard;
    string first_name, last_name;
    
    cin >> age >> first_name >> last_name >> standard;
    
    Student st;
    st.set_age(age);
    st.set_standard(standard);
    st.set_first_name(first_name);
    st.set_last_name(last_name);
    
    cout << st.get_age() << "\n";
    cout << st.get_last_name() << ", " << st.get_first_name() << "\n";
    cout << st.get_standard() << "\n";
    cout << "\n";
    cout << st.to_string();
    
    return 0;
}



#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;

// Write your Student class here
class Student {
    private:
        int scores[5];
        int sum;
    public:
        Student() : sum(0) {}

        void input() {
            for(int i=0; i<5; i++) {
              cin >> scores[i];
              sum+=scores[i];
            }
        }

        int calculateTotalScore() {
            return sum;
        }
};



int main() {
    int n; // number of students
    cin >> n;
    Student *s = new Student[n]; // an array of n students

    for(int i = 0; i < n; i++){
        s[i].input();
    }

    // calculate kristen's score
    int kristen_score = s[0].calculateTotalScore();

    // determine how many students scored higher than kristen
    int count = 0;
    for(int i = 1; i < n; i++){
        int total = s[i].calculateTotalScore();
        if(total > kristen_score){
            count++;
        }
    }

    // print result
    cout << count;

    return 0;
}






#include<bits/stdc++.h>

using namespace std;
//Implement the class Box
//l,b,h are integers representing the dimensions of the box
class Box {
    private:
        int l;
        int b;
        int h;
    public:
        Box() {
            l = 0;
            b = 0;
            h = 0;
        }

        Box(int l1, int b1, int h1) : l {l1}, b {b1}, h{h1} { }

        Box(Box &box) : l {box.l}, b {box.b}, h{box.h} { }

        int getLength() {
            return l;
        }

        int getBreadth() {
            return b;
        }

        int getHeight() {
            return h;
        }

        long long CalculateVolume() {
            return (long long)l * b * h;
        }

        bool operator<(Box& x) {
            if (l < x.l) return true;
            if (b < x.b && l == x.l) return true;
            if (h < x.h && l == x.l && b == x.b) return true;
            return false;
        }

        friend ostream& operator<< (ostream& os, const Box& x){
            os << x.l << " " << x.b << " " << x.h;
            return os;
    }

};
// The class should have the following functions :

// Constructors:
// Box();
// Box(int,int,int);
// Box(Box);


// int getLength(); // Return box's length
// int getBreadth (); // Return box's breadth
// int getHeight ();  //Return box's height
// long long CalculateVolume(); // Return the volume of the box

//Overload operator < as specified
//bool operator<(Box& b)

//Overload operator << as specified
//ostream& operator<<(ostream& out, Box& B)


void check2()
{
	int n;
	cin>>n;
	Box temp;
	for(int i=0;i<n;i++)
	{
		int type;
		cin>>type;
		if(type ==1)
		{
			cout<<temp<<endl;
		}
		if(type == 2)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			temp=NewBox;
			cout<<temp<<endl;
		}
		if(type==3)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			if(NewBox<temp)
			{
				cout<<"Lesser\n";
			}
			else
			{
				cout<<"Greater\n";
			}
		}
		if(type==4)
		{
			cout<<temp.CalculateVolume()<<endl;
		}
		if(type==5)
		{
			Box NewBox(temp);
			cout<<NewBox<<endl;
		}

	}
}

int main()
{
	check2();
}





#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int count;
    scanf("%d", &count);

    vector<int> vec;
    int j;
    for (int i = 0; i < count; i++) {
        scanf("%d", &j);
        vec.push_back(j);
    }
    sort(vec.begin(), vec.end());
    for (auto x : vec)
        cout << x << " ";
    return 0;
}


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n, a, i, j, pos, start, end;
    cin >> n;
    vector<int>v;
    for(int i=0;i<n;i++) {
        cin>>a;
        v.push_back(a);
    }
    cin >> pos >> start >> end;
    v.erase(v.begin()+(pos-1));
    v.erase(v.begin()+start-1,v.begin()+end-1);
    int size = v.size();
    cout << size << endl;
    for(auto &e1:v) {
        cout<<e1<<" ";
    }
    return 0;
}





#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int input;
    cin >> input;

    vector<int> arr(input);

    for (int i = 0; i < input; i++) {
        cin >> arr[i];
    }

    int query;
    cin >> query;
    while (query--) {
        int val;
        cin >> val;
         std::vector<int>::iterator it_lb = lower_bound(arr.begin(), arr.end(), val);
         std::vector<int>::iterator it_ub = upper_bound(arr.begin(), arr.end(), val);
        if (it_lb == it_ub) {
            cout << "No" << ' ' << it_ub - arr.begin()+1 << endl;
        } else {
            cout << "Yes" << ' ' << it_lb - arr.begin()+1 << endl;
        }

    }
    return 0;
}

