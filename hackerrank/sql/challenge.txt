select * from city where COUNTRYCODE = 'USA' AND POPULATION > 100000;

select name from city where COUNTRYCODE = 'USA' AND POPULATION > 120000;

select * from city;

select * from city where ID = 1661;

select * from city where COUNTRYCODE = 'JPN';

select name from city where COUNTRYCODE = 'JPN';

SELECT CITY, STATE from STATION;

SELECT distinct(CITY) from STATION WHERE right(ID,1) % 2 = 0;

select count(1) - count(distinct(city)) from station;

(
    SELECT CITY, LENGTH(CITY) AS `length`
    FROM STATION
    WHERE 1
    ORDER BY `length` ASC, CITY ASC
    LIMIT 1
) UNION (
    SELECT CITY, LENGTH(CITY) AS `length`
    FROM STATION
    WHERE 1
    ORDER BY `length` DESC, CITY ASC
    LIMIT 1
)

select city from station where city REGEXP '^[aeiou]';

select distinct(city) from station where city REGEXP '[aeiou]$';

select distinct(city) from station where city REGEXP '^[aeiou]' and city REGEXP '[aeiou]$';

select distinct(city) from station where city not REGEXP '^[aeiou]';

select distinct(city) from station where city not REGEXP '[aeiou]$';

select distinct(city) from station where city not REGEXP '[aeiou]$' or city not REGEXP '^[aeiou]';

select distinct(city) from station where city not REGEXP '[aeiou]$' and city not REGEXP '^[aeiou]';

select name from students where marks > 75 order by right(name,3), id asc

select name from employee order by name asc;

select name from employee where salary > 2000 and months < 10 order by employee_id asc;

select sum(city.population) from country join city on country.code = city.countryCode where continent = 'Asia';

select city.name from country join city on country.code = city.countryCode where continent = 'Africa';

select country.continent, floor(avg(city.population)) from country join city on country.code = city.countryCode group by country.continent;

select 
  case when g.grade < 8 then 
          "NULL" 
       else s.Name 
  end, g.grade, s.Marks
from Students as s join Grades as g on g.Min_Mark <= s.Marks and s.Marks <= g.Max_Mark 
order by g.grade desc,s.name asc;

select h.hacker_id, h.name
from submissions s
inner join challenges c
on s.challenge_id = c.challenge_id
inner join difficulty d
on c.difficulty_level = d.difficulty_level 
inner join hackers h
on s.hacker_id = h.hacker_id
where s.score = d.score and c.difficulty_level = d.difficulty_level
group by h.hacker_id, h.name
having count(s.hacker_id) > 1
order by count(s.hacker_id) desc, s.hacker_id asc

SELECT CASE WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
            WHEN A = B AND B = C THEN 'Equilateral'
            WHEN A = B OR A = C OR B = C THEN 'Isosceles'
            ELSE 'Scalene'
        END
FROM TRIANGLES


SELECT CONCAT(Name, CONCAT(
    '(', CONCAT(LEFT(Occupation,1),')')))  
FROM OCCUPATIONS
ORDER BY Name ASC;

SELECT CONCAT('There are a total of', CONCAT(' ', CONCAT(COUNT(Occupation), CONCAT(' ', CONCAT(LOWER(Occupation),'s.')))))
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY COUNT(OCCUPATION), OCCUPATION ASC;


SELECT N, IF(P IS NULL,'Root',IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,'Inner','Leaf')) FROM BST AS B ORDER BY N;


select c.company_code, c.founder, 
    count(distinct l.lead_manager_code), count(distinct s.senior_manager_code), 
    count(distinct m.manager_code),count(distinct e.employee_code) 
from Company c, Lead_Manager l, Senior_Manager s, Manager m, Employee e 
where c.company_code = l.company_code 
    and l.lead_manager_code=s.lead_manager_code 
    and s.senior_manager_code=m.senior_manager_code 
    and m.manager_code=e.manager_code 
group by c.company_code order by c.company_code;


select  
        C.company_code ,
        C.founder,
        count(distinct lead_manager_Code),
        count(distinct senior_manager_Code),
        count(distinct Manager_Code),
        count(distinct Employee_Code)
    from Company C
        join Employee E on E.company_Code = C.company_Code
    group by C.company_code , C.founder
    order by C.company_code asc


select count(1) from city where population > 100000;


select count(population) from city  where district = 'California';



select avg(population) from city  where district = 'California';



select floor(avg(population)) from city;



select sum(population) from city where countrycode = 'JPN';



select max(population) - min(population) from city;



SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;



select (salary * months) as earnings, count(*) from employee group by 1 order by earnings desc limit 1;


select round(sum(lat_n), 2), round(sum(long_w), 2) from station;


select round(sum(lat_n), 4) from station where lat_n between 38.7880 and 137.2345;



select round(max(lat_n), 4) from station where lat_n < 137.2345;



Select ROUND(LONG_W,4) from STATION WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N<137.2345);


Select ROUND(lat_n,4) from STATION WHERE LAT_N = (SELECT MIN(LAT_N) FROM STATION WHERE LAT_N>38.7780);


select round(min(long_w),4)  from station  where lat_n> 38.7780  group by lat_n asc  limit 1;


select round(max(lat_n)- min(lat_n) + max(long_w)-min(long_w),4) from station;


SELECT ROUND(POW(POW(ABS(MAX(LAT_N) - MIN(LAT_N)), 2) + POW(ABS(MAX(lONG_W)-MIN(LONG_W)),2),1/2),4) FROM STATION;


SELECT ROUND(AVG(dd.LAT_N), 4) as median_val
FROM (
SELECT d.LAT_N, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum
  FROM STATION d, (SELECT @rownum:=0) r
  WHERE d.LAT_N is NOT NULL
  ORDER BY d.LAT_N
) as dd
WHERE dd.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) );


select submission_date , ( SELECT COUNT(distinct hacker_id)  
FROM Submissions s2  
WHERE 
   s2.submission_date = s1.submission_date AND 
   (SELECT COUNT(distinct s3.submission_date) FROM Submissions s3 
   WHERE s3.hacker_id = s2.hacker_id AND 
         s3.submission_date < s1.submission_date) = dateDIFF(s1.submission_date , '2016-03-01')) ,
         (select hacker_id  from submissions s2 where s2.submission_date = s1.submission_date 
         group by hacker_id order by count(submission_id) desc , hacker_id limit 1) as shit,
         (select name from hackers where hacker_id = shit)
         from (select distinct submission_date from submissions) s1
          group by submission_date


SELECT REPEAT('* ', @NUMBER := @NUMBER - 1) FROM information_schema.tables, (SELECT @NUMBER:=21) t LIMIT 20


SELECT REPEAT('* ', @NUMBER := @NUMBER + 1) FROM information_schema.tables, (SELECT @NUMBER:=0) t LIMIT 20


SELECT temp2.I, temp2.A, temp2.WNN, temp2.P FROM (SELECT MIN(W1.COINS_NEEDED) AS WN, WP1.AGE as AG, W1.POWER AS PW FROM WANDS W1 INNER JOIN WANDS_PROPERTY WP1 ON W1.CODE=WP1.CODE 
 GROUP BY W1.POWER, WP1.AGE ORDER BY W1.POWER DESC, WP1.AGE DESC) temp1
INNER JOIN
(SELECT W.ID AS I, MIN(W.COINS_NEEDED) AS WNN, WP.AGE as A, W.POWER AS P  FROM WANDS W INNER JOIN WANDS_PROPERTY WP ON W.CODE=WP.CODE 
WHERE WP.IS_EVIL=0
GROUP BY W.POWER, WP.AGE, W.ID ORDER BY W.POWER DESC, WP.AGE DESC) temp2
ON temp1.WN=temp2.WNN AND temp1.PW=temp2.P AND temp1.AG=temp2.A;


SELECT h.hacker_id, 
       h.name, 
       COUNT(c.challenge_id) AS c_count
FROM Hackers h
JOIN Challenges c ON c.hacker_id = h.hacker_id
GROUP BY h.hacker_id, h.name
HAVING c_count = 
    (SELECT COUNT(c2.challenge_id) AS c_max
     FROM challenges as c2 
     GROUP BY c2.hacker_id 
     ORDER BY c_max DESC limit 1)
OR c_count IN 
    (SELECT DISTINCT c_compare AS c_unique
     FROM (SELECT h2.hacker_id, 
                  h2.name, 
                  COUNT(challenge_id) AS c_compare
           FROM Hackers h2
           JOIN Challenges c ON c.hacker_id = h2.hacker_id
           GROUP BY h2.hacker_id, h2.name) counts
     GROUP BY c_compare
     HAVING COUNT(c_compare) = 1)
ORDER BY c_count DESC, h.hacker_id;



select h.hacker_id, name, sum(score) as total_score
from
hackers as h inner join
/* find max_score*/
(select hacker_id,  max(score) as score from submissions group by challenge_id, hacker_id) max_score

on h.hacker_id=max_score.hacker_id
group by h.hacker_id, name

/* don't accept hackers with total_score=0 */
having total_score > 0

/* finally order as required */
order by total_score desc, h.hacker_id
;





SET sql_mode = '';
SELECT Start_Date, End_Date
FROM 
    (SELECT Start_Date FROM Projects WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)) a,
    (SELECT End_Date FROM Projects WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)) b 
WHERE Start_Date < End_Date
GROUP BY Start_Date 
ORDER BY DATEDIFF(End_Date, Start_Date), Start_Date



Select S.Name
From ( Students S join Friends F Using(ID)
       join Packages P1 on S.ID=P1.ID
       join Packages P2 on F.Friend_ID=P2.ID)
Where P2.Salary > P1.Salary
Order By P2.Salary;



select * from city where population > 100000 and CountryCode = 'USA';


SELECT A.x, A.y
FROM FUNCTIONS A JOIN FUNCTIONS B ON
    A.x = B.y AND A.y = B.x
GROUP BY A.x, A.y
HAVING COUNT(A.x) > 1 OR A.x < A.y
ORDER BY A.x



SELECT A.contest_id, A.hacker_id, A.Name, 
        SUM(total_submissions) As total_submissions, 
        SUM(total_accepted_submissions) AS total_accepted_submissions,
        SUM(total_views) AS total_views,
        SUM(total_unique_views) AS total_unique_views
FROM Contests AS A
LEFT JOIN Colleges AS B
    ON A.contest_id = B.contest_id 
LEFT JOIN Challenges AS C
    ON B.college_id = C.college_id 
LEFT JOIN (SELECT challenge_id, SUM(total_views) AS total_views, 
                  SUM(total_unique_views) AS total_unique_views
           FROM View_Stats
           GROUP BY challenge_id) AS D 
    ON C.challenge_id = D.challenge_id 
LEFT JOIN (SELECT challenge_id, SUM(total_submissions) AS total_submissions, 
                  SUM(total_accepted_submissions) AS total_accepted_submissions
           FROM Submission_Stats
           GROUP BY challenge_id) AS E
    ON C.challenge_id = E.challenge_id 
GROUP BY A.contest_id, A.hacker_id, A.Name
HAVING (total_submissions + total_accepted_submissions + total_views + total_unique_views) > 0 
ORDER BY A.contest_id
;
