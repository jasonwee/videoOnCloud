select * from city where COUNTRYCODE = 'USA' AND POPULATION > 100000;

select name from city where COUNTRYCODE = 'USA' AND POPULATION > 120000;

select * from city;

select * from city where ID = 1661;

select * from city where COUNTRYCODE = 'JPN';

select name from city where COUNTRYCODE = 'JPN';

SELECT CITY, STATE from STATION;

SELECT distinct(CITY) from STATION WHERE right(ID,1) % 2 = 0;

select count(1) - count(distinct(city)) from station;

(
    SELECT CITY, LENGTH(CITY) AS `length`
    FROM STATION
    WHERE 1
    ORDER BY `length` ASC, CITY ASC
    LIMIT 1
) UNION (
    SELECT CITY, LENGTH(CITY) AS `length`
    FROM STATION
    WHERE 1
    ORDER BY `length` DESC, CITY ASC
    LIMIT 1
)

select city from station where city REGEXP '^[aeiou]';

select distinct(city) from station where city REGEXP '[aeiou]$';

select distinct(city) from station where city REGEXP '^[aeiou]' and city REGEXP '[aeiou]$';

select distinct(city) from station where city not REGEXP '^[aeiou]';

select distinct(city) from station where city not REGEXP '[aeiou]$';

select distinct(city) from station where city not REGEXP '[aeiou]$' or city not REGEXP '^[aeiou]';

select distinct(city) from station where city not REGEXP '[aeiou]$' and city not REGEXP '^[aeiou]';

select name from students where marks > 75 order by right(name,3), id asc

select name from employee order by name asc;

select name from employee where salary > 2000 and months < 10 order by employee_id asc;

select sum(city.population) from country join city on country.code = city.countryCode where continent = 'Asia';

select city.name from country join city on country.code = city.countryCode where continent = 'Africa';

select country.continent, floor(avg(city.population)) from country join city on country.code = city.countryCode group by country.continent;

select 
  case when g.grade < 8 then 
          "NULL" 
       else s.Name 
  end, g.grade, s.Marks
from Students as s join Grades as g on g.Min_Mark <= s.Marks and s.Marks <= g.Max_Mark 
order by g.grade desc,s.name asc;

select h.hacker_id, h.name
from submissions s
inner join challenges c
on s.challenge_id = c.challenge_id
inner join difficulty d
on c.difficulty_level = d.difficulty_level 
inner join hackers h
on s.hacker_id = h.hacker_id
where s.score = d.score and c.difficulty_level = d.difficulty_level
group by h.hacker_id, h.name
having count(s.hacker_id) > 1
order by count(s.hacker_id) desc, s.hacker_id asc

SELECT CASE WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
            WHEN A = B AND B = C THEN 'Equilateral'
            WHEN A = B OR A = C OR B = C THEN 'Isosceles'
            ELSE 'Scalene'
        END
FROM TRIANGLES


SELECT CONCAT(Name, CONCAT(
    '(', CONCAT(LEFT(Occupation,1),')')))  
FROM OCCUPATIONS
ORDER BY Name ASC;

SELECT CONCAT('There are a total of', CONCAT(' ', CONCAT(COUNT(Occupation), CONCAT(' ', CONCAT(LOWER(Occupation),'s.')))))
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY COUNT(OCCUPATION), OCCUPATION ASC;


SELECT N, IF(P IS NULL,'Root',IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,'Inner','Leaf')) FROM BST AS B ORDER BY N;


select c.company_code, c.founder, 
    count(distinct l.lead_manager_code), count(distinct s.senior_manager_code), 
    count(distinct m.manager_code),count(distinct e.employee_code) 
from Company c, Lead_Manager l, Senior_Manager s, Manager m, Employee e 
where c.company_code = l.company_code 
    and l.lead_manager_code=s.lead_manager_code 
    and s.senior_manager_code=m.senior_manager_code 
    and m.manager_code=e.manager_code 
group by c.company_code order by c.company_code;


select  
        C.company_code ,
        C.founder,
        count(distinct lead_manager_Code),
        count(distinct senior_manager_Code),
        count(distinct Manager_Code),
        count(distinct Employee_Code)
    from Company C
        join Employee E on E.company_Code = C.company_Code
    group by C.company_code , C.founder
    order by C.company_code asc
