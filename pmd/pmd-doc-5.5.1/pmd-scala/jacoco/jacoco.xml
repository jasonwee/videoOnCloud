<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="PMD Scala"><sessioninfo id="andreas-XPS-13-9350-a3a3ef52" start="1469646941406" dump="1469646945456"/><sessioninfo id="andreas-XPS-13-9350-b6ae1fe7" start="1469647808506" dump="1469647811251"/><package name="org/sonar/plugins/scala/cpd"><class name="org/sonar/plugins/scala/cpd/ScalaTokenizer"><method name="&lt;init&gt;" desc="()V" line="38"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tokenize" desc="(Lnet/sourceforge/pmd/cpd/SourceCode;Lnet/sourceforge/pmd/cpd/Tokens;)V" line="41"><counter type="INSTRUCTION" missed="21" covered="48"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="3" covered="11"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="21" covered="51"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="3" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ScalaTokenizer.java"><line nr="38" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="10" mb="0" cb="2"/><line nr="47" mi="0" ci="10" mb="0" cb="2"/><line nr="50" mi="0" ci="8" mb="0" cb="0"/><line nr="51" mi="0" ci="3" mb="0" cb="0"/><line nr="52" mi="0" ci="1" mb="0" cb="0"/><line nr="53" mi="0" ci="3" mb="0" cb="0"/><line nr="54" mi="1" ci="0" mb="0" cb="0"/><line nr="55" mi="2" ci="0" mb="0" cb="0"/><line nr="58" mi="18" ci="0" mb="0" cb="0"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="21" covered="51"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="3" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="21" covered="51"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="3" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></package><package name="net/sourceforge/pmd/lang/scala"><class name="net/sourceforge/pmd/lang/scala/ScalaLanguageModule"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ScalaLanguageModule.java"><line nr="22" mi="0" ci="12" mb="0" cb="0"/><line nr="23" mi="0" ci="5" mb="0" cb="0"/><line nr="24" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></package><package name="net/sourceforge/pmd/cpd"><class name="net/sourceforge/pmd/cpd/ScalaLanguage"><method name="&lt;init&gt;" desc="()V" line="17"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ScalaLanguage.java"><line nr="17" mi="13" ci="0" mb="0" cb="0"/><line nr="18" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></package><package name="org/sonar/plugins/scala/language"><class name="org/sonar/plugins/scala/language/CodeDetector"><method name="hasDetectedCode" desc="(Ljava/lang/String;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/language/CodeDetector$$anonfun$org$sonar$plugins$scala$language$CodeDetector$$lookingForSyntaxTreesWithCode$1$2"><method name="apply" desc="(Lscala/reflect/internal/Trees$Tree;)Z" line="49"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="49"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/language/CodeDetector$"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parser$lzycompute" desc="()Lorg/sonar/plugins/scala/compiler/Parser;" line="35"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parser" desc="()Lorg/sonar/plugins/scala/compiler/Parser;" line="35"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hasDetectedCode" desc="(Ljava/lang/String;)Z" line="64"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="org$sonar$plugins$scala$language$CodeDetector$$lookingForSyntaxTreesWithCode$1" desc="(Lscala/reflect/internal/Trees$Tree;)Z" line="39"><counter type="INSTRUCTION" missed="103" covered="0"/><counter type="BRANCH" missed="24" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="31"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="152" covered="0"/><counter type="BRANCH" missed="28" covered="0"/><counter type="LINE" missed="19" covered="0"/><counter type="COMPLEXITY" missed="20" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/language/CodeDetector$$anonfun$org$sonar$plugins$scala$language$CodeDetector$$lookingForSyntaxTreesWithCode$1$1"><method name="apply" desc="(Lscala/reflect/internal/Trees$Tree;)Z" line="45"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/language/Comment"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Lorg/sonar/plugins/scala/language/CommentType;)V" line="42"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNumberOfLines" desc="()I" line="48"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNumberOfBlankLines" desc="()I" line="52"><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNumberOfCommentedOutLinesOfCode" desc="()I" line="71"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDocComment" desc="()Z" line="86"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isHeaderComment" desc="()Z" line="90"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="95"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="100"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="110"><counter type="INSTRUCTION" missed="52" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="197" covered="0"/><counter type="BRANCH" missed="30" covered="0"/><counter type="LINE" missed="35" covered="0"/><counter type="COMPLEXITY" missed="24" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/language/CommentType"><method name="values" desc="()[Lorg/sonar/plugins/scala/language/CommentType;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="valueOf" desc="(Ljava/lang/String;)Lorg/sonar/plugins/scala/language/CommentType;" line="29"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;I)V" line="29"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="29"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="CommentType.java"><line nr="29" mi="30" ci="0" mb="0" cb="0"/><line nr="31" mi="6" ci="0" mb="0" cb="0"/><line nr="32" mi="6" ci="0" mb="0" cb="0"/><line nr="33" mi="6" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="CodeDetector.scala"><line nr="31" mi="5" ci="0" mb="0" cb="0"/><line nr="35" mi="34" ci="0" mb="4" cb="0"/><line nr="39" mi="4" ci="0" mb="0" cb="0"/><line nr="41" mi="16" ci="0" mb="4" cb="0"/><line nr="42" mi="9" ci="0" mb="2" cb="0"/><line nr="43" mi="1" ci="0" mb="0" cb="0"/><line nr="45" mi="13" ci="0" mb="0" cb="0"/><line nr="48" mi="9" ci="0" mb="2" cb="0"/><line nr="49" mi="14" ci="0" mb="0" cb="0"/><line nr="51" mi="10" ci="0" mb="4" cb="0"/><line nr="52" mi="6" ci="0" mb="2" cb="0"/><line nr="53" mi="6" ci="0" mb="2" cb="0"/><line nr="54" mi="6" ci="0" mb="2" cb="0"/><line nr="55" mi="6" ci="0" mb="2" cb="0"/><line nr="56" mi="6" ci="0" mb="2" cb="0"/><line nr="57" mi="6" ci="0" mb="2" cb="0"/><line nr="58" mi="3" ci="0" mb="0" cb="0"/><line nr="61" mi="2" ci="0" mb="0" cb="0"/><line nr="64" mi="7" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="170" covered="0"/><counter type="BRANCH" missed="28" covered="0"/><counter type="LINE" missed="19" covered="0"/><counter type="COMPLEXITY" missed="25" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="4" covered="0"/></sourcefile><sourcefile name="Comment.java"><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="4" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="48" mi="10" ci="0" mb="0" cb="0"/><line nr="52" mi="2" ci="0" mb="0" cb="0"/><line nr="53" mi="11" ci="0" mb="2" cb="0"/><line nr="54" mi="2" ci="0" mb="0" cb="0"/><line nr="56" mi="10" ci="0" mb="4" cb="0"/><line nr="57" mi="4" ci="0" mb="0" cb="0"/><line nr="58" mi="9" ci="0" mb="6" cb="0"/><line nr="59" mi="2" ci="0" mb="0" cb="0"/><line nr="63" mi="2" ci="0" mb="2" cb="0"/><line nr="64" mi="1" ci="0" mb="0" cb="0"/><line nr="66" mi="1" ci="0" mb="0" cb="0"/><line nr="67" mi="2" ci="0" mb="0" cb="0"/><line nr="71" mi="3" ci="0" mb="2" cb="0"/><line nr="72" mi="2" ci="0" mb="0" cb="0"/><line nr="75" mi="2" ci="0" mb="0" cb="0"/><line nr="76" mi="11" ci="0" mb="2" cb="0"/><line nr="77" mi="4" ci="0" mb="0" cb="0"/><line nr="78" mi="3" ci="0" mb="2" cb="0"/><line nr="79" mi="1" ci="0" mb="0" cb="0"/><line nr="81" mi="1" ci="0" mb="0" cb="0"/><line nr="82" mi="2" ci="0" mb="0" cb="0"/><line nr="86" mi="8" ci="0" mb="2" cb="0"/><line nr="90" mi="8" ci="0" mb="2" cb="0"/><line nr="95" mi="11" ci="0" mb="0" cb="0"/><line nr="100" mi="3" ci="0" mb="2" cb="0"/><line nr="101" mi="2" ci="0" mb="0" cb="0"/><line nr="104" mi="3" ci="0" mb="0" cb="0"/><line nr="105" mi="15" ci="0" mb="0" cb="0"/><line nr="110" mi="12" ci="0" mb="2" cb="0"/><line nr="111" mi="16" ci="0" mb="2" cb="0"/><line nr="112" mi="24" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="197" covered="0"/><counter type="BRANCH" missed="30" covered="0"/><counter type="LINE" missed="35" covered="0"/><counter type="COMPLEXITY" missed="24" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="415" covered="0"/><counter type="BRANCH" missed="58" covered="0"/><counter type="LINE" missed="58" covered="0"/><counter type="COMPLEXITY" missed="53" covered="0"/><counter type="METHOD" missed="24" covered="0"/><counter type="CLASS" missed="6" covered="0"/></package><package name="org/sonar/plugins/scala/util"><class name="org/sonar/plugins/scala/util/StringUtils"><method name="&lt;init&gt;" desc="()V" line="31"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="convertStringToListOfLines" desc="(Ljava/lang/String;)Ljava/util/List;" line="36"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="StringUtils.java"><line nr="31" mi="2" ci="0" mb="0" cb="0"/><line nr="33" mi="1" ci="0" mb="0" cb="0"/><line nr="36" mi="4" ci="0" mb="0" cb="0"/><line nr="37" mi="2" ci="0" mb="0" cb="0"/><line nr="39" mi="8" ci="0" mb="0" cb="0"/><line nr="40" mi="2" ci="0" mb="0" cb="0"/><line nr="41" mi="5" ci="0" mb="2" cb="0"/><line nr="42" mi="5" ci="0" mb="0" cb="0"/><line nr="45" mi="7" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></package><package name="org/sonar/plugins/scala/compiler"><class name="org/sonar/plugins/scala/compiler/Token"><method name="tupled" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="curried" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tokenType" desc="()I" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="line" desc="()I" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tokenVal" desc="()Ljava/lang/String;" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="copy" desc="(IILjava/lang/String;)Lorg/sonar/plugins/scala/compiler/Token;" line="27"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copy$default$1" desc="()I" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copy$default$2" desc="()I" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copy$default$3" desc="()Ljava/lang/String;" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="productPrefix" desc="()Ljava/lang/String;" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="productArity" desc="()I" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="productElement" desc="(I)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="productIterator" desc="()Lscala/collection/Iterator;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="canEqual" desc="(Ljava/lang/Object;)Z" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="27"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="27"><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="BRANCH" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IILjava/lang/String;)V" line="27"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="135" covered="23"/><counter type="BRANCH" missed="24" covered="0"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="27" covered="4"/><counter type="METHOD" missed="14" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/sonar/plugins/scala/compiler/Token$"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(IILjava/lang/String;)Lorg/sonar/plugins/scala/compiler/Token;" line="27"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unapply" desc="(Lorg/sonar/plugins/scala/compiler/Token;)Lscala/Option;" line="27"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="27"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/compiler/Parser$$anon$1"><method name="showSyntaxErrors" desc="()V" line="55"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lorg/sonar/plugins/scala/compiler/Parser;Lscala/tools/nsc/CompilationUnits$CompilationUnit;)V" line="54"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/compiler/Compiler"><method name="forScaladoc" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoCompilationUnit" desc="()Lscala/tools/nsc/CompilationUnits$NoCompilationUnit$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pluginOptionsHelp" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="computePluginPhases" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pluginDescriptions" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="loadPlugins" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="loadRoughPluginsList" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="plugins" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="roughPluginsList" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="buildCompilerFromPhasesSet" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetLocalAttrsKeepLabels$default$2" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeStatus$default$2" desc="()Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetLocalAttrs$default$2" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetAllAttrs$default$2" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetLocalAttrsKeepLabels" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetLocalAttrs" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetAllAttrs" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="xtransform" desc="(Lscala/reflect/api/Trees$Transformer;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newLazyTreeCopier" desc="()Lscala/tools/nsc/ast/Trees$TreeCopier;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newStrictTreeCopier" desc="()Lscala/tools/nsc/ast/Trees$TreeCopier;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="xtraverse" desc="(Lscala/reflect/api/Trees$Traverser;Lscala/reflect/internal/Trees$Tree;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/internal/util/Position;)Lscala/reflect/internal/Trees$ClassDef;"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Template" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$ValDef;Lscala/reflect/internal/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/internal/util/Position;)Lscala/reflect/internal/Trees$Template;"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeSymStatus" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeStatus" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeLine" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="resetPos" desc="()Lscala/tools/nsc/ast/Trees$resetPos$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="noopTransformer" desc="()Lscala/tools/nsc/ast/Trees$noopTransformer$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treePrinter" desc="()Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeInfo" desc="()Lscala/tools/nsc/ast/Trees$treeInfo$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTreeWithDeferredRefCheck" desc="()Lscala/tools/nsc/ast/Trees$TypeTreeWithDeferredRefCheck$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="InjectDerivedValue" desc="()Lscala/tools/nsc/ast/Trees$InjectDerivedValue$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SelectFromArray" desc="()Lscala/tools/nsc/ast/Trees$SelectFromArray$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DocDef" desc="()Lscala/tools/nsc/ast/Trees$DocDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Parens" desc="()Lscala/tools/nsc/ast/Trees$Parens$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="()Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="(Ljava/io/OutputStream;)Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="(Ljava/io/PrintWriter;)Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newCompactTreePrinter" desc="()Lscala/tools/nsc/ast/Printers$CompactTreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newCompactTreePrinter" desc="(Ljava/io/OutputStream;)Lscala/tools/nsc/ast/Printers$CompactTreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newCompactTreePrinter" desc="(Ljava/io/PrintWriter;)Lscala/tools/nsc/ast/Printers$CompactTreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newStandardTreePrinter" desc="()Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newStandardTreePrinter" desc="(Ljava/io/OutputStream;)Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newStandardTreePrinter" desc="(Ljava/io/PrintWriter;)Lscala/tools/nsc/ast/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="asCompactDebugString" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="asCompactString" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="asString" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="xprintTree" desc="(Lscala/reflect/internal/Printers$TreePrinter;Lscala/reflect/internal/Trees$Tree;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandedDocComment$default$3" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="merge$default$4" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cookedDocComment$default$2" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="docComment$default$3" desc="()Lscala/reflect/internal/util/Position;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandVariables" desc="(Ljava/lang/String;Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Symbols$Symbol;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lookupVariable" desc="(Ljava/lang/String;Lscala/reflect/internal/Symbols$Symbol;)Lscala/Option;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandInheritdoc" desc="(Ljava/lang/String;Ljava/lang/String;Lscala/reflect/internal/Symbols$Symbol;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="merge" desc="(Ljava/lang/String;Ljava/lang/String;Lscala/reflect/internal/Symbols$Symbol;Z)Ljava/lang/String;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="superComment" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/Option;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandWiki" desc="(Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toJavaDoc" desc="(Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="useCases" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="useCases" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Symbols$Symbol;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandedDocComment" desc="(Lscala/reflect/internal/Symbols$Symbol;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expandedDocComment" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Symbols$Symbol;Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cookedDocComment" desc="(Lscala/reflect/internal/Symbols$Symbol;Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fillDocComment" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/tools/nsc/ast/DocComments$DocComment;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="docCommentPos" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/util/Position;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rawDocComment" desc="(Lscala/reflect/internal/Symbols$Symbol;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="docComment" desc="(Lscala/reflect/internal/Symbols$Symbol;Ljava/lang/String;Lscala/reflect/internal/util/Position;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clearDocComments" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$tools$nsc$ast$DocComments$_setter_$docComments_$eq" desc="(Lscala/collection/mutable/HashMap;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$tools$nsc$ast$DocComments$_setter_$cookedDocComments_$eq" desc="(Lscala/collection/mutable/HashMap;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="UseCase" desc="()Lscala/tools/nsc/ast/DocComments$UseCase$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DocComment" desc="()Lscala/tools/nsc/ast/DocComments$DocComment$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="docComments" desc="()Lscala/collection/mutable/HashMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cookedDocComments" desc="()Lscala/collection/mutable/HashMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="validatePositions" desc="(Lscala/reflect/internal/Trees$Tree;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rangePos" desc="(Lscala/reflect/internal/util/SourceFile;III)Lscala/reflect/internal/util/OffsetPosition;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="posAssigner" desc="()Lscala/reflect/internal/Positions$PosAssigner;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="onlyPresentation" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createJavadoc" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="forInteractive" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="forMSIL" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="forJVM" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getFile" desc="(Lscala/reflect/internal/Symbols$Symbol;Ljava/lang/String;)Ljava/io/File;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getFile" desc="(Lscala/reflect/io/AbstractFile;[Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showDef" desc="(Lscala/reflect/internal/Names$Name;ZLscala/reflect/internal/Phase;)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printAllUnits" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newSourceFile" desc="(Ljava/lang/String;)Lscala/reflect/internal/util/BatchSourceFile;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newCompilationUnit" desc="(Ljava/lang/String;)Lscala/tools/nsc/CompilationUnits$CompilationUnit;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newUnitScanner" desc="(Ljava/lang/String;)Lscala/tools/nsc/ast/parser/Scanners$UnitScanner;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newUnitParser" desc="(Ljava/lang/String;)Lscala/tools/nsc/ast/parser/Parsers$UnitParser;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="echoPhaseSummary" desc="(Lscala/reflect/internal/Phase;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentRunId" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="supplementErrorMessage" desc="(Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="explainTree" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="explainContext" desc="(Lscala/tools/nsc/typechecker/Contexts$Context;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeUncurry" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeTyper" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeSpecialize" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeRefchecks" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforePickler" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeMixin" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeIcode" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeFlatten" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeExplicitOuter" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforeErasure" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterUncurry" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterTyper" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterSpecialize" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterRefchecks" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterPickler" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterMixin" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterIcode" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterFlatten" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterExplicitOuter" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterPostErasure" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterErasure" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentSource" desc="()Lscala/reflect/internal/util/SourceFile;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentUnit" desc="()Lscala/tools/nsc/CompilationUnits$CompilationUnit;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentRun" desc="()Lscala/tools/nsc/Global$Run;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clearOnNextRun" desc="(Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="doInvalidation" desc="()Ljava/lang/Object;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invalidateClassPathEntries" desc="(Lscala/collection/Seq;)Lscala/Tuple2;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printAfterEachPhase" desc="(Lscala/Function0;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="describeAfterEveryPhase" desc="(Lscala/Function0;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="describeAfterEachPhase" desc="(Lscala/Function0;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="changesAfterEachPhase" desc="(Lscala/Function0;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterEachPhase" desc="(Lscala/Function0;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseFlagDescriptions" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseDescriptions" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseNames" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseDescriptors" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="erasure" desc="()Lscala/tools/nsc/Global$erasure$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="uncurry" desc="()Lscala/tools/nsc/Global$uncurry$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="refChecks" desc="()Lscala/tools/nsc/Global$refChecks$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="syntaxAnalyzer" desc="()Lscala/tools/nsc/Global$syntaxAnalyzer$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printInfers_$eq" desc="(Z)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printInfers" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printTypings_$eq" desc="(Z)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="printTypings" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseWithId" desc="()[Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MaxPhases" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="globalPhase_$eq" desc="(Lscala/reflect/internal/Phase;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="globalPhase" desc="()Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mirrorThatLoaded" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Mirrors$RootsBase;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="loaders" desc="()Lscala/tools/nsc/symtab/SymbolLoaders;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSourceFile" desc="(Ljava/lang/String;)Lscala/reflect/internal/util/SourceFile;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSourceFile" desc="(Lscala/reflect/io/AbstractFile;)Lscala/reflect/internal/util/BatchSourceFile;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isScriptRun" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="throwableAsString" desc="(Ljava/lang/Throwable;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reportThrowable" desc="(Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="logThrowable" desc="(Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="debuglog" desc="(Lscala/Function0;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="log" desc="(Lscala/Function0;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="shouldLogAtThisPhase" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="logAfterEveryPhase" desc="(Ljava/lang/String;Lscala/Function0;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="logError" desc="(Ljava/lang/String;Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="informTime" desc="(Ljava/lang/String;J)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="inform" desc="(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="informProgress" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="informComplete" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="debugwarn" desc="(Lscala/Function0;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ifDebug" desc="(Lscala/Function0;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abort" desc="(Ljava/lang/String;)Lscala/runtime/Nothing$;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="require" desc="(Z)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="require" desc="(ZLscala/Function0;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="assert" desc="(Z)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="assert" desc="(ZLscala/Function0;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="warning" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="globalError" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="inform" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="error" desc="(Ljava/lang/String;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="registerTopLevelSym" desc="(Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="registerContext" desc="(Lscala/tools/nsc/typechecker/Contexts$Context;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="signalParseProgress" desc="(Lscala/reflect/internal/util/Position;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="analyzer" desc="()Lscala/tools/nsc/typechecker/Analyzer;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="signalDone" desc="(Lscala/tools/nsc/typechecker/Contexts$Context;Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Tree;)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeBrowser" desc="()Lscala/tools/nsc/ast/TreeBrowsers$SwingBrowser;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nodeToString" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="withInfoLevel" desc="(Lscala/Enumeration$Value;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nodePrinters" desc="()Lscala/tools/nsc/Global$nodePrinters$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="gen" desc="()Lscala/tools/nsc/Global$gen$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="classPath" desc="()Lscala/tools/nsc/util/ClassPath;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="platform" desc="()Lscala/tools/nsc/backend/Platform;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="picklerPhase" desc="()Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mkAttributedQualifier" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="settings" desc="()Lscala/tools/nsc/Settings;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findMemberFromRoot" desc="(Lscala/reflect/internal/Names$Name;)Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="EmptyPackageClass" desc="()Lscala/reflect/internal/Symbols$ClassSymbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RootClass" desc="()Lscala/reflect/internal/Symbols$ClassSymbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rootMirror" desc="()Lscala/reflect/internal/Mirrors$RootsBase;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isCompilerUniverse" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reporter_$eq" desc="(Lscala/tools/nsc/reporters/Reporter;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reporter" desc="()Lscala/tools/nsc/reporters/Reporter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentSettings_$eq" desc="(Lscala/tools/nsc/Settings;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentSettings" desc="()Lscala/tools/nsc/Settings;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transposeSafe" desc="(Lscala/collection/immutable/List;)Lscala/Option;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="forall3" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function3;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="forall2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="exists3" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function3;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="exists2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foreach3" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function3;)V"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foreach2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="collectMap2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/Map;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapWithIndex" desc="(Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapFrom" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/Map;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findOrElse" desc="(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foreachWithIndex" desc="(Lscala/collection/immutable/List;Lscala/Function2;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flattensToEmpty" desc="(Lscala/collection/Seq;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="distinctBy" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatCollect" desc="(Lscala/collection/immutable/List;Lscala/PartialFunction;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map3" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function3;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map2" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mfilter" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mfind" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/Option;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mforeach" desc="(Lscala/collection/immutable/List;Lscala/Function1;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mmap" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mforall" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mexists" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="corresponds3" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function3;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nameToNameOps" desc="(Lscala/reflect/internal/Names$Name;)Lscala/reflect/internal/Names$NameOps;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeNameOps" desc="(Lscala/reflect/internal/Names$TypeName;)Lscala/reflect/internal/Names$NameOps;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TermNameOps" desc="(Lscala/reflect/internal/Names$TermName;)Lscala/reflect/internal/Names$NameOps;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="view" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nameChars" desc="()[C"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeName" desc="([BII)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeName" desc="([CII)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeNameCached" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermNameCached" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermName" desc="([BII)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeName" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermName" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeName" desc="([CIILjava/lang/String;)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermName" desc="([CIILjava/lang/String;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTypeName" desc="([C)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermName" desc="([C)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTermName" desc="([CII)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="promoteTermNamesAsNecessary" desc="(Lscala/reflect/internal/Names$Name;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Names$_setter_$TypeNameTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Names$_setter_$TermNameTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Names$_setter_$NameTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeNameTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TermNameTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NameTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="chrs_$eq" desc="([C)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="chrs" desc="()[C"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nameDebug" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newFreeTypeSymbol$default$2" desc="()J"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newFreeTermSymbol$default$3" desc="()J"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="closestEnclMethod" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapParamss" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createFromClonedSymbolsAtOwner" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Types$Type;Lscala/Function2;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createFromClonedSymbols" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/Function2;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cloneSymbolsAtOwnerAndModify" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cloneSymbolsAndModify" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cloneSymbolsAtOwner" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cloneSymbols" desc="(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveTypeWithWildcards" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveType" desc="(Lscala/collection/immutable/List;Lscala/Function1;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveSymbols" desc="(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="makeNoSymbol" desc="()Lscala/reflect/internal/Symbols$NoSymbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="shouldTriggerCompleter" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Types$Type;ZJ)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newFreeTypeSymbol" desc="(Lscala/reflect/internal/Names$TypeName;JLjava/lang/String;)Lscala/reflect/internal/Symbols$FreeTypeSymbol;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newFreeTermSymbol" desc="(Lscala/reflect/internal/Names$TermName;Lscala/Function0;JLjava/lang/String;)Lscala/reflect/internal/Symbols$FreeTermSymbol;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="connectModuleToClass" desc="(Lscala/reflect/internal/Symbols$ModuleSymbol;Lscala/reflect/internal/Symbols$ClassSymbol;)Lscala/reflect/internal/Symbols$ModuleSymbol;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="freshExistentialName" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TypeName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextId" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$symbolIsNonVariant_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$symbolIsPossibleInRefinement_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$FreeTypeSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$FreeTermSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$ClassSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$TypeSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$MethodSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$ModuleSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$TermSymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$SymbolTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$originalOwner_$eq" desc="(Lscala/collection/mutable/HashMap;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Symbols$_setter_$emptySymbolArray_$eq" desc="([Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CyclicReference" desc="()Lscala/reflect/internal/Symbols$CyclicReference$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoSymbol" desc="()Lscala/reflect/internal/Symbols$NoSymbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FreeTypeSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FreeTermSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MethodSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ModuleSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TermSymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SymbolTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="originalOwner" desc="()Lscala/collection/mutable/HashMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="emptySymbolArray" desc="()[Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ids_$eq" desc="(I)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ids" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="annotatedType$default$3" desc="()Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeToString" desc="(Lscala/reflect/internal/Types$Type;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="objToAny" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nonTrivialMembers" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/collection/Iterable;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="uncheckedBounds" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addSerializable" desc="(Lscala/collection/Seq;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isBoundedGeneric" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUnboundedGeneric" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="withTypesExplained" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="explainTypes" desc="(Lscala/Function2;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="explainTypes" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="explain" desc="(Ljava/lang/String;Lscala/Function2;Lscala/reflect/internal/Types$Type;Ljava/lang/Object;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="inheritsJavaVarArgsMethod" desc="(Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isJavaVarargsAncestor" desc="(Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addMember" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;I)V"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addMember" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mergePrefixAndArgs" desc="(Lscala/collection/immutable/List;II)Lscala/Option;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="suspendTypeVarsInType" desc="(Lscala/reflect/internal/Types$Type;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeVarsInType" desc="(Lscala/reflect/internal/Types$Type;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="glbNorm" desc="(Lscala/collection/immutable/List;I)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="glb" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lub" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isNumericSubType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isWeakSubType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="numericGlb" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="numericLub" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="weakGlb" desc="(Lscala/collection/immutable/List;)Lscala/Tuple2;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="weakLub" desc="(Lscala/collection/immutable/List;)Lscala/Tuple2;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="elimRefinement" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="elimAnonymousClass" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="spanningTypes" desc="(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findRecursiveBounds" desc="(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="instantiatedBounds" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isWithinBounds" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="solve" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;ZI)Z"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="solve" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Z)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map2Conserve" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="matchesType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;Z)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="specializesSym" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;I)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="specializesSym" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSubTypes" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="differentOrNone" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSubArgs" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;I)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isHKSubType0" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;I)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isNonRefinementClassType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isNonValueType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isValueType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUseableAsTypeArgs" desc="(Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUseableAsTypeArg" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isConstantType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSingleType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isErrorOrWildcard" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="instTypeVar" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beginsWithTypeVarOrIsRefined" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSubType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;I)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSubType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hasLength" desc="(Lscala/collection/immutable/List;I)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compareLengths" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)I"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sameLength" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSameTypes" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSameType2" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="normalizePlus" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDifferentTypeConstructor" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDifferentType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSameType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="needsOuterTest" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isPopulated" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeDepth" desc="(Lscala/reflect/internal/Types$Type;)I"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lubDepth" desc="(Lscala/collection/immutable/List;)I"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="commonOwnerMap" desc="()Lscala/reflect/internal/Types$CommonOwnerMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nestedMemberType" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isPossiblePrefix" desc="(Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="singletonBounds" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$TypeBounds;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rawToExistential" desc="()Lscala/reflect/internal/Types$TypeMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isRawType" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isRaw" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeParamsToExistentials" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeParamsToExistentials" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unique" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fromDeBruijn" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$TypeMap;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="etaExpandKeepsStar" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abstractTypesToBounds" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="existentialAbstraction" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeFun" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeFunAnon" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polyType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="genPolyType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="appliedTypeAsUpperBounds" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="appliedType" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/Seq;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="appliedType" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="intersectionType" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="intersectionType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyMethodType" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="JavaMethodType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$JavaMethodType;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyTypeRef" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeRef" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyRefinedType" desc="(Lscala/reflect/internal/Types$RefinedType;Lscala/collection/immutable/List;Lscala/reflect/internal/Scopes$Scope;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="refinedType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="refinedType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Scopes$Scope;Lscala/reflect/internal/util/Position;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="singleType" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="annotatedType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="existentialsInType" desc="(Lscala/reflect/internal/Types$Type;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="containsExistential" desc="(Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="repackExistential" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="overloadedType" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newExistentialType" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="defineBaseTypeSeqOfTypeRef" desc="(Lscala/reflect/internal/Types$TypeRef;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="defineParentsOfTypeRef" desc="(Lscala/reflect/internal/Types$TypeRef;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="baseTypeOfNonClassTypeRef" desc="(Lscala/reflect/internal/Types$NonClassTypeRef;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="validateClassInfo" desc="(Lscala/reflect/internal/Types$ClassInfoType;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="defineBaseClassesOfCompoundType" desc="(Lscala/reflect/internal/Types$CompoundType;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="defineBaseTypeSeqOfCompoundType" desc="(Lscala/reflect/internal/Types$CompoundType;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="defineUnderlyingOfSingleType" desc="(Lscala/reflect/internal/Types$SingleType;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newUndoLog" desc="()Lscala/reflect/internal/Types$UndoLog;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$TypeTagg_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$TypeRefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$TypeBoundsTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$ThisTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$SuperTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$SingleTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$SingletonTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$RefinedTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$PolyTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$NullaryMethodTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$MethodTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$ExistentialTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$ConstantTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$CompoundTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$ClassInfoTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$BoundedWildcardTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$AnnotatedTypeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsHigherKinded_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsAny_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsNothing_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsSubTypeOfSerializable_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeListIsEmpty_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$boundsContainType_$eq" desc="(Lscala/Function2;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeHasAnnotations_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsError_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsErroneous_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsExistentiallyBound_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsNonClassType_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeContainsTypeVar_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$isTypeVar_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$typeIsNotNull_$eq" desc="(Lscala/Function1;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$shorthands_$eq" desc="(Lscala/collection/immutable/Set;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$GlbFailure_$eq" desc="(Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$missingAliasException_$eq" desc="(Lscala/reflect/internal/Types$MissingAliasControl;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$intersectionWitness_$eq" desc="(Lscala/collection/mutable/WeakHashMap;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Types$_setter_$enableTypeVarExperimentals_$eq" desc="(Z)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTagg" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeRefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeBoundsTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ThisTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SuperTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SingleTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SingletonTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RefinedTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="PolyTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NullaryMethodTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MethodTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ExistentialTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ConstantTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CompoundTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassInfoTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BoundedWildcardTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AnnotatedTypeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxTostringRecursions" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="shorthands" desc="()Lscala/collection/immutable/Set;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RecoverableCyclicReference" desc="()Lscala/reflect/internal/Types$RecoverableCyclicReference$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="GlbFailure" desc="()Ljava/lang/Throwable;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SubTypePair" desc="()Lscala/reflect/internal/Types$SubTypePair$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="adaptToNewRunMap" desc="()Lscala/reflect/internal/Types$adaptToNewRunMap$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="missingAliasException" desc="()Lscala/reflect/internal/Types$MissingAliasControl;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ErroneousCollector" desc="()Lscala/reflect/internal/Types$ErroneousCollector$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeVarToOriginMap" desc="()Lscala/reflect/internal/Types$typeVarToOriginMap$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wildcardToTypeVarMap" desc="()Lscala/reflect/internal/Types$wildcardToTypeVarMap$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="StripAnnotationsMap" desc="()Lscala/reflect/internal/Types$StripAnnotationsMap$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ApproximateDependentMap" desc="()Lscala/reflect/internal/Types$ApproximateDependentMap$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="IsDependentCollector" desc="()Lscala/reflect/internal/Types$IsDependentCollector$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unwrapWrapperTypes" desc="()Lscala/reflect/internal/Types$unwrapWrapperTypes$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unwrapToStableClass" desc="()Lscala/reflect/internal/Types$unwrapToStableClass$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unwrapToClass" desc="()Lscala/reflect/internal/Types$unwrapToClass$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeConstraint" desc="()Lscala/reflect/internal/Types$TypeConstraint$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toDeBruijn" desc="()Lscala/reflect/internal/Types$toDeBruijn$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dropRepeatedParamType" desc="()Lscala/reflect/internal/Types$dropRepeatedParamType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dropAllRefinements" desc="()Lscala/reflect/internal/Types$dropAllRefinements$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dropSingletonType" desc="()Lscala/reflect/internal/Types$dropSingletonType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="normalizeAliases" desc="()Lscala/reflect/internal/Types$normalizeAliases$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="GenPolyType" desc="()Lscala/reflect/internal/Types$GenPolyType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ErasedValueType" desc="()Lscala/reflect/internal/Types$ErasedValueType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DeBruijnBinder" desc="()Lscala/reflect/internal/Types$DeBruijnBinder$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DeBruijnIndex" desc="()Lscala/reflect/internal/Types$DeBruijnIndex$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NamedType" desc="()Lscala/reflect/internal/Types$NamedType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AnnotatedType" desc="()Lscala/reflect/internal/Types$AnnotatedType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeVar" desc="()Lscala/reflect/internal/Types$TypeVar$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="HasTypeParams" desc="()Lscala/reflect/internal/Types$HasTypeParams$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="HasTypeMember" desc="()Lscala/reflect/internal/Types$HasTypeMember$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AntiPolyType" desc="()Lscala/reflect/internal/Types$AntiPolyType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="OverloadedType" desc="()Lscala/reflect/internal/Types$OverloadedType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ExistentialType" desc="()Lscala/reflect/internal/Types$ExistentialType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="PolyType" desc="()Lscala/reflect/internal/Types$PolyType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NullaryMethodType" desc="()Lscala/reflect/internal/Types$NullaryMethodType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MethodType" desc="()Lscala/reflect/internal/Types$MethodType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeRef" desc="()Lscala/reflect/internal/Types$TypeRef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ConstantType" desc="()Lscala/reflect/internal/Types$ConstantType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassInfoType" desc="()Lscala/reflect/internal/Types$ClassInfoType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RefinedType" desc="()Lscala/reflect/internal/Types$RefinedType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeBounds" desc="()Lscala/reflect/internal/Types$TypeBounds$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SuperType" desc="()Lscala/reflect/internal/Types$SuperType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SingleType" desc="()Lscala/reflect/internal/Types$SingleType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ThisType" desc="()Lscala/reflect/internal/Types$ThisType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BoundedWildcardType" desc="()Lscala/reflect/internal/Types$BoundedWildcardType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NotNullType" desc="()Lscala/reflect/internal/Types$NotNullType$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="intersectionWitness" desc="()Lscala/collection/mutable/WeakHashMap;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="undoLog" desc="()Lscala/reflect/internal/Types$UndoLog;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="skolemizationLevel_$eq" desc="(I)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="skolemizationLevel" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="enableTypeVarExperimentals" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="checkKindBounds0" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;Z)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="kindsConform" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Kinds$_setter_$NoKindErrors_$eq" desc="(Lscala/reflect/internal/Kinds$KindErrors;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoKindErrors" desc="()Lscala/reflect/internal/Kinds$KindErrors;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="KindErrors" desc="()Lscala/reflect/internal/Kinds$KindErrors$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="packSymbols$default$3" desc="()Lscala/Option;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="existentialTransform$default$3" desc="()Lscala/Option;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="packSymbols" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/Option;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="existentialTransform" desc="(Lscala/collection/immutable/List;Lscala/reflect/internal/Types$Type;Lscala/Option;Lscala/Function2;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isRawParameter" desc="(Lscala/reflect/internal/Symbols$Symbol;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveFreshSkolems" desc="(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addFlagOps" desc="(J)Lscala/reflect/api/FlagSets$FlagOps;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$FlagSets$_setter_$NoFlags_$eq" desc="(J)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$FlagSets$_setter_$FlagSetTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Flag" desc="()Lscala/reflect/internal/FlagSets$Flag$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoFlags" desc="()J"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FlagSetTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scopeTransform" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/Function0;)Lscala/reflect/internal/Scopes$Scope;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newPackageScope" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Scopes$Scope;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newScopeWith" desc="(Lscala/collection/Seq;)Lscala/reflect/internal/Scopes$Scope;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newNestedScope" desc="(Lscala/reflect/internal/Scopes$Scope;)Lscala/reflect/internal/Scopes$Scope;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newScope" desc="()Lscala/reflect/internal/Scopes$Scope;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Scopes$_setter_$MemberScopeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Scopes$_setter_$ScopeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="EmptyScope" desc="()Lscala/reflect/internal/Scopes$EmptyScope$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MemberScopeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ScopeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Scope" desc="()Lscala/reflect/internal/Scopes$Scope$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="definitions" desc="()Lscala/reflect/internal/Definitions$definitions$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Constants$_setter_$ConstantTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ConstantTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Constant" desc="()Lscala/reflect/internal/Constants$Constant$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="EnumTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClazzTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NullTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="StringTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DoubleTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FloatTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LongTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="IntTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CharTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ShortTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ByteTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BooleanTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="UnitTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoTag" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compoundBaseTypeSeq" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/BaseTypeSeqs$BaseTypeSeq;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="baseTypeSingletonSeq" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/BaseTypeSeqs$BaseTypeSeq;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newBaseTypeSeq" desc="(Lscala/collection/immutable/List;[Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/BaseTypeSeqs$BaseTypeSeq;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$BaseTypeSeqs$_setter_$CyclicInheritance_$eq" desc="(Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$BaseTypeSeqs$_setter_$undetBaseTypeSeq_$eq" desc="(Lscala/reflect/internal/BaseTypeSeqs$BaseTypeSeq;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CyclicInheritance" desc="()Ljava/lang/Throwable;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="undetBaseTypeSeq" desc="()Lscala/reflect/internal/BaseTypeSeqs$BaseTypeSeq;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transformedType" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transformedType" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="erasure" desc="()Lscala/reflect/internal/transform/Erasure;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="uncurry" desc="()Lscala/reflect/internal/transform/UnCurry;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="refChecks" desc="()Lscala/reflect/internal/transform/RefChecks;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lowerTermNames" desc="(Lscala/reflect/internal/Names$TermName;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="encode" desc="(Ljava/lang/String;)Lscala/reflect/internal/Names$TermName;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$StdNames$_setter_$javanme_$eq" desc="(Lscala/reflect/internal/StdNames$JavaKeywords;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sn" desc="()Lscala/reflect/internal/StdNames$SymbolNames;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nme" desc="()Lscala/reflect/internal/StdNames$nme$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="javanme" desc="()Lscala/reflect/internal/StdNames$JavaKeywords;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="binarynme" desc="()Lscala/reflect/internal/StdNames$binarynme$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fulltpnme" desc="()Lscala/reflect/internal/StdNames$fulltpnme$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tpnme" desc="()Lscala/reflect/internal/StdNames$tpnme$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$AnnotationTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$NestedArgumentTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$NestedArgument_$eq" desc="(Lscala/reflect/internal/AnnotationInfos$NestedAnnotArg$;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$ArrayArgumentTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$ArrayArgument_$eq" desc="(Lscala/reflect/internal/AnnotationInfos$ArrayAnnotArg$;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$LiteralArgumentTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$LiteralArgument_$eq" desc="(Lscala/reflect/internal/AnnotationInfos$LiteralAnnotArg$;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$AnnotationInfos$_setter_$JavaArgumentTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ThrownException" desc="()Lscala/reflect/internal/AnnotationInfos$ThrownException$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="UnmappableAnnotation" desc="()Lscala/reflect/internal/AnnotationInfos$UnmappableAnnotation$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AnnotationTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Annotation" desc="()Lscala/reflect/internal/AnnotationInfos$Annotation$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AnnotationInfo" desc="()Lscala/reflect/internal/AnnotationInfos$AnnotationInfo$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ScalaSigBytes" desc="()Lscala/reflect/internal/AnnotationInfos$ScalaSigBytes$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NestedArgumentTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NestedArgument" desc="()Lscala/reflect/internal/AnnotationInfos$NestedAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ArrayArgumentTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ArrayArgument" desc="()Lscala/reflect/internal/AnnotationInfos$ArrayAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LiteralArgumentTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LiteralArgument" desc="()Lscala/reflect/internal/AnnotationInfos$LiteralAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NestedAnnotArg" desc="()Lscala/reflect/internal/AnnotationInfos$NestedAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ArrayAnnotArg" desc="()Lscala/reflect/internal/AnnotationInfos$ArrayAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LiteralAnnotArg" desc="()Lscala/reflect/internal/AnnotationInfos$LiteralAnnotArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="JavaArgumentTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="adaptTypeOfReturn" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Types$Type;Lscala/Function0;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="adaptAnnotations" desc="(Lscala/reflect/internal/Trees$Tree;ILscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="canAdaptAnnotations" desc="(Lscala/reflect/internal/Trees$Tree;ILscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addAnnotations" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="adaptBoundsToAnnotations" desc="(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="annotationsGlb" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="annotationsLub" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/immutable/List;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="annotationsConform" desc="(Lscala/reflect/internal/Types$Type;Lscala/reflect/internal/Types$Type;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="removeAllAnnotationCheckers" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addAnnotationChecker" desc="(Lscala/reflect/internal/AnnotationCheckers$AnnotationChecker;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyClassDef$default$5" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Template;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyClassDef$default$4" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyClassDef$default$3" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Names$Name;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyClassDef$default$2" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Modifiers;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyValDef$default$5" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyValDef$default$4" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyValDef$default$3" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Names$Name;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyValDef$default$2" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Modifiers;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$7" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$6" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$5" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$4" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$3" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Names$Name;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef$default$2" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Modifiers;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveLabelDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$LabelDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveCaseDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$CaseDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveModuleDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$ModuleDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveClassDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$ClassDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveTemplate" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$Template;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveValDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$ValDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="deriveDefDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/Function1;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyClassDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Modifiers;Lscala/reflect/internal/Names$Name;Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$Template;)Lscala/reflect/internal/Trees$ClassDef;"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyValDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Modifiers;Lscala/reflect/internal/Names$Name;Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$ValDef;"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyDefDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Modifiers;Lscala/reflect/internal/Names$Name;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="duplicateAndKeepPositions" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="itransform" desc="(Lscala/reflect/api/Trees$Transformer;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="itraverse" desc="(Lscala/reflect/api/Trees$Traverser;Lscala/reflect/internal/Trees$Tree;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeTreeSymbol" desc="(Lscala/reflect/internal/Trees$TypeTree;)Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Block" desc="(Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Block;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Ident" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$Ident;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Ident" desc="(Ljava/lang/String;)Lscala/reflect/internal/Trees$Ident;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Select" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$Select;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Select" desc="(Lscala/reflect/internal/Trees$Tree;Ljava/lang/String;)Lscala/reflect/internal/Trees$Select;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="This" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Super" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Names$TypeName;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="New" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="New" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="New" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/collection/immutable/List;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Apply" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Throw" desc="(Lscala/reflect/internal/Types$Type;Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Throw;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Try" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/collection/Seq;)Lscala/reflect/internal/Trees$Try;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Bind" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Bind;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CaseDef" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$CaseDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LabelDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$LabelDef;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeDef" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$TypeDef;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$TypeDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/Function1;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Modifiers;Lscala/Function1;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Modifiers;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$DefDef;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ValDef" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$ValDef;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ValDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$ValDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ModuleDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Template;)Lscala/reflect/internal/Trees$ModuleDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassDef" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Trees$Template;)Lscala/reflect/internal/Trees$ClassDef;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isReferenceToAnyVal" desc="(Lscala/reflect/internal/Trees$Tree;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isReferenceToPredef" desc="(Lscala/reflect/internal/Trees$Tree;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isReferenceToScalaMember" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Names$Name;)Z"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTree" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Trees$TypeTree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ApplyConstructor" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/collection/immutable/List;)Lscala/reflect/internal/Trees$Apply;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$treeNodeCount_$eq" desc="(Lscala/reflect/internal/util/Statistics$View;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ExistentialTypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypeBoundsTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$AppliedTypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$CompoundTypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$SelectFromTypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$SingletonTypeTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$AnnotatedTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$LiteralTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ReferenceToBoxedTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$IdentTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$SelectTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ThisTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$SuperTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ApplyTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypeApplyTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$GenericApplyTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypedTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$NewTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ThrowTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TryTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ReturnTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$MatchTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$IfTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$AssignOrNamedArgTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$AssignTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$FunctionTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$UnApplyTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$BindTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$StarTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$AlternativeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$CaseDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$BlockTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TemplateTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ImportTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ImportSelectorTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$LabelDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypeDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$DefDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ValDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ValOrDefDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ModuleDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ClassDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ImplDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$PackageDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$MemberDefTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$DefTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$RefTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$NameTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$SymTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TypTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TermTreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$TreeTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Trees$_setter_$ModifiersTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeNodeCount" desc="()Lscala/reflect/internal/util/Statistics$View;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ExistentialTypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeBoundsTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AppliedTypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CompoundTypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SelectFromTypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SingletonTypeTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AnnotatedTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LiteralTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ReferenceToBoxedTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="IdentTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SelectTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ThisTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SuperTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ApplyTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeApplyTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="GenericApplyTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypedTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NewTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ThrowTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TryTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ReturnTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MatchTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="IfTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AssignOrNamedArgTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AssignTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FunctionTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="UnApplyTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BindTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="StarTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AlternativeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CaseDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BlockTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TemplateTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ImportTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ImportSelectorTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LabelDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ValDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ValOrDefDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ModuleDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ImplDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="PackageDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MemberDefTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RefTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NameTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SymTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TermTreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TreeTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="EmptyTreeTypeSubstituter" desc="()Lscala/reflect/internal/Trees$TreeTypeSubstituter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="emptyValDef" desc="()Lscala/reflect/internal/Trees$emptyValDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ModifiersTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Modifiers" desc="()Lscala/reflect/internal/Trees$Modifiers$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTree" desc="()Lscala/reflect/internal/Trees$TypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ExistentialTypeTree" desc="()Lscala/reflect/internal/Trees$ExistentialTypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeBoundsTree" desc="()Lscala/reflect/internal/Trees$TypeBoundsTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AppliedTypeTree" desc="()Lscala/reflect/internal/Trees$AppliedTypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CompoundTypeTree" desc="()Lscala/reflect/internal/Trees$CompoundTypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SelectFromTypeTree" desc="()Lscala/reflect/internal/Trees$SelectFromTypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="SingletonTypeTree" desc="()Lscala/reflect/internal/Trees$SingletonTypeTree$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Annotated" desc="()Lscala/reflect/internal/Trees$Annotated$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Literal" desc="()Lscala/reflect/internal/Trees$Literal$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ReferenceToBoxed" desc="()Lscala/reflect/internal/Trees$ReferenceToBoxed$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Ident" desc="()Lscala/reflect/internal/Trees$Ident$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Select" desc="()Lscala/reflect/internal/Trees$Select$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="This" desc="()Lscala/reflect/internal/Trees$This$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Super" desc="()Lscala/reflect/internal/Trees$Super$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ApplyDynamic" desc="()Lscala/reflect/internal/Trees$ApplyDynamic$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Apply" desc="()Lscala/reflect/internal/Trees$Apply$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeApply" desc="()Lscala/reflect/internal/Trees$TypeApply$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Typed" desc="()Lscala/reflect/internal/Trees$Typed$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="New" desc="()Lscala/reflect/internal/Trees$New$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Throw" desc="()Lscala/reflect/internal/Trees$Throw$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Try" desc="()Lscala/reflect/internal/Trees$Try$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Return" desc="()Lscala/reflect/internal/Trees$Return$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Match" desc="()Lscala/reflect/internal/Trees$Match$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="If" desc="()Lscala/reflect/internal/Trees$If$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AssignOrNamedArg" desc="()Lscala/reflect/internal/Trees$AssignOrNamedArg$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Assign" desc="()Lscala/reflect/internal/Trees$Assign$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Function" desc="()Lscala/reflect/internal/Trees$Function$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ArrayValue" desc="()Lscala/reflect/internal/Trees$ArrayValue$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="UnApply" desc="()Lscala/reflect/internal/Trees$UnApply$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Bind" desc="()Lscala/reflect/internal/Trees$Bind$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Star" desc="()Lscala/reflect/internal/Trees$Star$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Alternative" desc="()Lscala/reflect/internal/Trees$Alternative$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CaseDef" desc="()Lscala/reflect/internal/Trees$CaseDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Block" desc="()Lscala/reflect/internal/Trees$Block$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Template" desc="()Lscala/reflect/internal/Trees$Template$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Import" desc="()Lscala/reflect/internal/Trees$Import$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ImportSelector" desc="()Lscala/reflect/internal/Trees$ImportSelector$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="LabelDef" desc="()Lscala/reflect/internal/Trees$LabelDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeDef" desc="()Lscala/reflect/internal/Trees$TypeDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="DefDef" desc="()Lscala/reflect/internal/Trees$DefDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ValDef" desc="()Lscala/reflect/internal/Trees$ValDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ModuleDef" desc="()Lscala/reflect/internal/Trees$ModuleDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ClassDef" desc="()Lscala/reflect/internal/Trees$ClassDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="PackageDef" desc="()Lscala/reflect/internal/Trees$PackageDef$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show" desc="(J)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show" desc="(Lscala/reflect/internal/Names$Name;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newRawTreePrinter" desc="()Lscala/reflect/internal/Printers$RawTreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newRawTreePrinter" desc="(Ljava/io/OutputStream;)Lscala/reflect/internal/Printers$RawTreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newRawTreePrinter" desc="(Ljava/io/PrintWriter;)Lscala/reflect/internal/Printers$RawTreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="()Lscala/reflect/internal/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="(Ljava/io/OutputStream;)Lscala/reflect/internal/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="newTreePrinter" desc="(Ljava/io/PrintWriter;)Lscala/reflect/internal/Printers$TreePrinter;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="backquotedPath" desc="(Lscala/reflect/internal/Trees$Tree;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="symName" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Names$Name;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="decodedSymName" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/reflect/internal/Names$Name;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="quotedName" desc="(Ljava/lang/String;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="quotedName" desc="(Lscala/reflect/internal/Names$Name;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="quotedName" desc="(Lscala/reflect/internal/Names$Name;Z)Ljava/lang/String;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ConsoleWriter" desc="()Lscala/reflect/internal/Printers$ConsoleWriter$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showOuterTests" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="atPos" desc="(Lscala/reflect/internal/util/Position;Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ensureNonOverlapping" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/collection/immutable/List;Z)V"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ensureNonOverlapping" desc="(Lscala/reflect/internal/Trees$Tree;Lscala/collection/immutable/List;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrappingPos" desc="(Lscala/collection/immutable/List;)Lscala/reflect/internal/util/Position;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrappingPos" desc="(Lscala/reflect/internal/util/Position;Lscala/collection/immutable/List;Z)Lscala/reflect/internal/util/Position;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrappingPos" desc="(Lscala/reflect/internal/util/Position;Lscala/collection/immutable/List;)Lscala/reflect/internal/util/Position;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Positions$_setter_$PositionTag_$eq" desc="(Lscala/reflect/ClassTag;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$Positions$_setter_$NoPosition_$eq" desc="(Lscala/reflect/internal/util/NoPosition$;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="PositionTag" desc="()Lscala/reflect/ClassTag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoPosition" desc="()Lscala/reflect/internal/util/NoPosition$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="debugString" desc="(Lscala/reflect/internal/Types$Type;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeArgsString" desc="(Lscala/reflect/internal/Types$Type;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeParamsString" desc="(Lscala/reflect/internal/Types$Type;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="paramString" desc="(Lscala/reflect/internal/Types$Type;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeDebug" desc="()Lscala/reflect/internal/TypeDebugging$typeDebug$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mkImporter" desc="(Lscala/reflect/api/Universe;)Lscala/reflect/api/Importers$Importer;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="capturedVariableType$default$3" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="capturedVariableType$default$2" desc="()Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="capturedVariableType" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Types$Type;Z)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="capturedVariableType" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="referenceCapturedVariable" desc="(Lscala/reflect/internal/Symbols$Symbol;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="captureVariable" desc="(Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isMacroExpansionSuppressed" desc="(Lscala/reflect/internal/Trees$Tree;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unsuppressMacroExpansion" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="suppressMacroExpansion" desc="(Lscala/reflect/internal/Trees$Tree;)Lscala/reflect/internal/Trees$Tree;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="MacroExpansionAttachment" desc="()Lscala/reflect/internal/StdAttachments$MacroExpansionAttachment$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="CompoundTypeTreeOriginalAttachment" desc="()Lscala/reflect/internal/StdAttachments$CompoundTypeTreeOriginalAttachment$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FixedMirrorTypeCreator" desc="()Lscala/reflect/internal/StdCreators$FixedMirrorTypeCreator$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FixedMirrorTreeCreator" desc="()Lscala/reflect/internal/StdCreators$FixedMirrorTreeCreator$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$internal$BuildUtils$_setter_$build_$eq" desc="(Lscala/reflect/api/BuildUtils$BuildApi;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="build" desc="()Lscala/reflect/api/BuildUtils$BuildApi;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="importPrivateWithinFromJavaFlags" desc="(Lscala/reflect/internal/Symbols$Symbol;I)Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="StringContextStripMarginOps" desc="()Lscala/Function1;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="infoTransformers_$eq" desc="(Lscala/reflect/internal/InfoTransformers$InfoTransformer;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="infoTransformers" desc="()Lscala/reflect/internal/InfoTransformers$InfoTransformer;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="openPackageModule" desc="(Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="arrayToRepeated" desc="(Lscala/reflect/internal/Types$Type;)Lscala/reflect/internal/Types$Type;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="openPackageModule" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Symbols$Symbol;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isValidForBaseClasses" desc="(I)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isValid" desc="(I)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="atPhaseNotLaterThan" desc="(Lscala/reflect/internal/Phase;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforePrevPhase" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterCurrentPhase" desc="(Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="afterPhase" desc="(Lscala/reflect/internal/Phase;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="beforePhase" desc="(Lscala/reflect/internal/Phase;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="atPhase" desc="(Lscala/reflect/internal/Phase;Lscala/Function0;)Ljava/lang/Object;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isAtPhaseAfter" desc="(Lscala/reflect/internal/Phase;)Z"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="period" desc="(II)I"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseOf" desc="(I)Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="currentPeriod" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="startRun" desc="(I)I"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phaseId" desc="(I)I"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="runId" desc="(I)I"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="popPhase" desc="(Lscala/reflect/internal/Phase;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pushPhase" desc="(Lscala/reflect/internal/Phase;)Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phase_$eq" desc="(Lscala/reflect/internal/Phase;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="atPhaseStackMessage" desc="()Ljava/lang/String;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phase" desc="()Lscala/reflect/internal/Phase;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="atPhaseStack" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phStack_$eq" desc="(Lscala/collection/immutable/List;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="phStack" desc="()Lscala/collection/immutable/List;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoRunId" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoPeriod" desc="()I"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="missingHook" desc="(Lscala/reflect/internal/Symbols$Symbol;Lscala/reflect/internal/Names$Name;)Lscala/reflect/internal/Symbols$Symbol;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="assertCorrectThread" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="traceSymbolActivity" desc="()Z"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lowPriorityNameOrdering" desc="()Lscala/math/Ordering;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="debugStack" desc="(Ljava/lang/Throwable;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abort" desc="()Lscala/runtime/Nothing$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeBuild" desc="()Lscala/reflect/internal/TreeGen;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="gen" desc="()Lscala/reflect/internal/TreeGen;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="stringToTypeName" desc="(Ljava/lang/String;)Lscala/reflect/api/Names$NameApi;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="stringToTermName" desc="(Ljava/lang/String;)Lscala/reflect/api/Names$NameApi;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Modifiers" desc="(Ljava/lang/Object;)Lscala/reflect/api/Trees$ModifiersApi;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Modifiers" desc="(Ljava/lang/Object;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$ModifiersApi;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="xtransform" desc="(Lscala/reflect/api/Trees$Transformer;Lscala/reflect/api/Trees$TreeApi;)Lscala/reflect/api/Trees$TreeApi;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="itransform" desc="(Lscala/reflect/api/Trees$Transformer;Lscala/reflect/api/Trees$TreeApi;)Lscala/reflect/api/Trees$TreeApi;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="xtraverse" desc="(Lscala/reflect/api/Trees$Traverser;Lscala/reflect/api/Trees$TreeApi;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="itraverse" desc="(Lscala/reflect/api/Trees$Traverser;Lscala/reflect/api/Trees$TreeApi;)V"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scala$reflect$api$Trees$_setter_$treeCopy_$eq" desc="(Lscala/reflect/api/Trees$TreeCopierOps;)V"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="NoMods" desc="()Lscala/reflect/api/Trees$ModifiersApi;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeCopy" desc="()Lscala/reflect/api/Trees$TreeCopierOps;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="Expr" desc="()Lscala/reflect/api/Exprs$Expr$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeOf" desc="(Lscala/reflect/api/TypeTags$TypeTag;)Lscala/reflect/api/Types$TypeApi;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="weakTypeOf" desc="(Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Types$TypeApi;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeTag" desc="(Lscala/reflect/api/TypeTags$TypeTag;)Lscala/reflect/api/TypeTags$TypeTag;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="weakTypeTag" desc="(Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/TypeTags$WeakTypeTag;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="TypeTag" desc="()Lscala/reflect/api/TypeTags$TypeTag$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="WeakTypeTag" desc="()Lscala/reflect/api/TypeTags$WeakTypeTag$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="manifestToTypeTag" desc="(Ljava/lang/Object;Lscala/reflect/Manifest;)Lscala/reflect/api/TypeTags$TypeTag;"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="typeTagToManifest" desc="(Ljava/lang/Object;Lscala/reflect/api/TypeTags$TypeTag;Lscala/reflect/ClassTag;)Lscala/reflect/Manifest;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw$default$5" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw$default$4" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw$default$3" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw$default$2" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show$default$5" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show$default$4" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show$default$3" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show$default$2" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="render$default$6" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="render$default$5" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="render$default$4" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="render$default$3" desc="()Lscala/reflect/api/Printers$BooleanFlag;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw" desc="(Ljava/lang/Object;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw" desc="(Lscala/reflect/api/Names$NameApi;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="showRaw" desc="(Ljava/lang/Object;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="show" desc="(Ljava/lang/Object;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="treeToString" desc="(Lscala/reflect/api/Trees$TreeApi;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="render" desc="(Ljava/lang/Object;Lscala/Function1;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;Lscala/reflect/api/Printers$BooleanFlag;)Ljava/lang/String;"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="BooleanFlag" desc="()Lscala/reflect/api/Printers$BooleanFlag$;"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="3789" covered="0"/><counter type="COMPLEXITY" missed="958" covered="0"/><counter type="METHOD" missed="958" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/compiler/Lexer"><method name="getTokens" desc="(Ljava/lang/String;)Ljava/util/List;" line="41"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getTokensOfFile" desc="(Ljava/lang/String;)Ljava/util/List;" line="46"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tokenize" desc="(Lscala/tools/nsc/CompilationUnits$CompilationUnit;)Ljava/util/List;" line="51"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getComments" desc="(Ljava/lang/String;)Ljava/util/List;" line="67"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getCommentsOfFile" desc="(Ljava/lang/String;)Ljava/util/List;" line="72"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tokenizeComments" desc="(Lscala/tools/nsc/CompilationUnits$CompilationUnit;)Ljava/util/List;" line="77"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="35"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="74" covered="74"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="12" covered="13"/><counter type="COMPLEXITY" missed="5" covered="5"/><counter type="METHOD" missed="4" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/sonar/plugins/scala/compiler/Parser"><method name="parse" desc="(Ljava/lang/String;)Lscala/reflect/internal/Trees$Tree;" line="37"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parseFile" desc="(Ljava/lang/String;)Lscala/reflect/internal/Trees$Tree;" line="42"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parse" desc="(Lscala/reflect/internal/util/BatchSourceFile;[C)Lscala/reflect/internal/Trees$Tree;" line="47"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="86" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="org/sonar/plugins/scala/compiler/Compiler$"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forScaladoc" desc="()Z" line="32"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="()V" line="31"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/sonar/plugins/scala/compiler/Lexer$$anon$1"><method name="lastDocCommentRange" desc="()Lscala/Option;" line="80"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lastDocCommentRange_$eq" desc="(Lscala/Option;)V" line="80"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foundToken" desc="()Z" line="82"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foundToken_$eq" desc="(Z)V" line="82"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextToken" desc="()V" line="85"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foundComment" desc="(Ljava/lang/String;II)V" line="89"><counter type="INSTRUCTION" missed="88" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foundDocComment" desc="(Ljava/lang/String;II)V" line="115"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isHeaderComment$1" desc="(Ljava/lang/String;)Z" line="93"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lorg/sonar/plugins/scala/compiler/Lexer;Lscala/tools/nsc/CompilationUnits$CompilationUnit;Lscala/collection/mutable/ListBuffer;)V" line="78"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="170" covered="0"/><counter type="BRANCH" missed="24" covered="0"/><counter type="LINE" missed="19" covered="0"/><counter type="COMPLEXITY" missed="21" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="Token.scala"><line nr="27" mi="164" ci="23" mb="26" cb="0"/><counter type="INSTRUCTION" missed="173" covered="23"/><counter type="BRANCH" missed="26" covered="0"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="34" covered="4"/><counter type="METHOD" missed="20" covered="4"/><counter type="CLASS" missed="1" covered="1"/></sourcefile><sourcefile name="Parser.scala"><line nr="32" mi="3" ci="0" mb="0" cb="0"/><line nr="37" mi="9" ci="0" mb="0" cb="0"/><line nr="38" mi="6" ci="0" mb="0" cb="0"/><line nr="42" mi="7" ci="0" mb="0" cb="0"/><line nr="43" mi="10" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="12" ci="0" mb="0" cb="0"/><line nr="49" mi="6" ci="0" mb="0" cb="0"/><line nr="50" mi="17" ci="0" mb="0" cb="0"/><line nr="53" mi="6" ci="0" mb="0" cb="0"/><line nr="54" mi="12" ci="0" mb="0" cb="0"/><line nr="55" mi="1" ci="0" mb="0" cb="0"/><line nr="57" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="93" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="Compiler.scala"><line nr="31" mi="0" ci="8" mb="0" cb="0"/><line nr="32" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3789" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="958" covered="3"/><counter type="METHOD" missed="958" covered="3"/><counter type="CLASS" missed="1" covered="1"/></sourcefile><sourcefile name="Lexer.scala"><line nr="35" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="13" ci="0" mb="0" cb="0"/><line nr="42" mi="4" ci="0" mb="0" cb="0"/><line nr="46" mi="0" ci="11" mb="0" cb="0"/><line nr="47" mi="0" ci="4" mb="0" cb="0"/><line nr="51" mi="0" ci="7" mb="0" cb="0"/><line nr="52" mi="0" ci="5" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="2"/><line nr="56" mi="0" ci="1" mb="0" cb="0"/><line nr="57" mi="0" ci="12" mb="0" cb="2"/><line nr="58" mi="0" ci="8" mb="0" cb="0"/><line nr="60" mi="0" ci="10" mb="0" cb="0"/><line nr="61" mi="0" ci="3" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="13" ci="0" mb="0" cb="0"/><line nr="68" mi="4" ci="0" mb="0" cb="0"/><line nr="72" mi="11" ci="0" mb="0" cb="0"/><line nr="73" mi="4" ci="0" mb="0" cb="0"/><line nr="77" mi="5" ci="0" mb="0" cb="0"/><line nr="78" mi="15" ci="0" mb="0" cb="0"/><line nr="80" mi="10" ci="0" mb="0" cb="0"/><line nr="82" mi="11" ci="0" mb="0" cb="0"/><line nr="85" mi="2" ci="0" mb="0" cb="0"/><line nr="86" mi="10" ci="0" mb="2" cb="0"/><line nr="89" mi="1" ci="0" mb="0" cb="0"/><line nr="90" mi="5" ci="0" mb="0" cb="0"/><line nr="93" mi="16" ci="0" mb="6" cb="0"/><line nr="96" mi="8" ci="0" mb="0" cb="0"/><line nr="98" mi="14" ci="0" mb="4" cb="0"/><line nr="99" mi="11" ci="0" mb="4" cb="0"/><line nr="100" mi="11" ci="0" mb="0" cb="0"/><line nr="104" mi="12" ci="0" mb="6" cb="0"/><line nr="105" mi="5" ci="0" mb="2" cb="0"/><line nr="106" mi="11" ci="0" mb="0" cb="0"/><line nr="108" mi="10" ci="0" mb="0" cb="0"/><line nr="115" mi="5" ci="0" mb="0" cb="0"/><line nr="116" mi="9" ci="0" mb="0" cb="0"/><line nr="117" mi="11" ci="0" mb="0" cb="0"/><line nr="121" mi="2" ci="0" mb="0" cb="0"/><line nr="122" mi="4" ci="0" mb="2" cb="0"/><line nr="123" mi="3" ci="0" mb="0" cb="0"/><line nr="126" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="244" covered="74"/><counter type="BRANCH" missed="26" covered="4"/><counter type="LINE" missed="30" covered="13"/><counter type="COMPLEXITY" missed="26" covered="5"/><counter type="METHOD" missed="13" covered="3"/><counter type="CLASS" missed="1" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="4299" covered="110"/><counter type="BRANCH" missed="52" covered="4"/><counter type="LINE" missed="43" covered="16"/><counter type="COMPLEXITY" missed="1024" covered="12"/><counter type="METHOD" missed="997" covered="10"/><counter type="CLASS" missed="5" covered="3"/></package><counter type="INSTRUCTION" missed="4788" covered="179"/><counter type="BRANCH" missed="112" covered="8"/><counter type="LINE" missed="117" covered="31"/><counter type="COMPLEXITY" missed="1081" covered="17"/><counter type="METHOD" missed="1024" covered="13"/><counter type="CLASS" missed="13" covered="5"/></report>