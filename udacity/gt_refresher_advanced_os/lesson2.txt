date start : 12 october 2023


2.1 Introduction
---------------------------------------


2.2 File System Concept
---------------------------------------


2.3 Access Rights
---------------------------------------


2.4 Permissions Error
---------------------------------------
2,3


2.5 Developer's Interface
---------------------------------------


2.6 Sabotage
---------------------------------------
#include<stdlib.h>
#include<unistd.h>
#include <fcntl.h>
#include<stdio.h>

int main(int argc, char **argv){
int fd;
ssize_t len;
char *filename;
int key, srch_key, new_value;
if(argc < 4){
  fprintf(stderr, "usage: sabotage filename key value\n");
  exit(EXIT_FAILURE);
}
filename = argv[1];
srch_key = strtol(argv[2], NULL, 10);
new_value = strtol(argv[3], NULL, 10);
fd = open(filename, O_RDWR);
while( sizeof(int) == read(fd, &key, sizeof(int)) ){
  if (key != srch_key)
    lseek(fd, sizeof(int), SEEK_CUR);
  else{
    write(fd, &new_value, sizeof(int));
    close(fd);
    return EXIT_SUCCESS;
  }
}
fprintf(stderr, "Key not found!");
return EXIT_FAILURE;
}

2.7 MMap
---------------------------------------


2.8 Shuffle
---------------------------------------
#include<stdlib.h>
#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>
#include<errno.h>
#include<sys/mman.h>
#include<string.h>


/*
 * Linear Congruent Generator
 * http://en.wikipedia.org/wiki/Linear_congruential_generator
 * (better for testing than real random number generation)
 */
unsigned int lcg(){
  static unsigned int x = 0;

  x = 1664525L * x + 1013904223L;
  return x;
}

/*
 * Shuffles the memory starting at buf and extending len bytes,
 * at the granularity of card_size.
 */
void memshuffle(char *buf, int len, int card_size){
  void *swap;
  unsigned int x, i, r, N;

  /* Checking the len is a multiple of card_size*/
  if( len % card_size != 0){
    fprintf(stderr, "memshuffle: len must be a multiple of card_size.\n");
    exit(EXIT_FAILURE);
  }

  N = len / card_size;
  swap = malloc(card_size);

  for(i = 0; i < N; i++){
    r = i + (unsigned int) (1.0 * (N - i) * lcg() / 4294967296LL);

    memcpy(swap, buf + i * card_size, card_size);
    memcpy(buf + i * card_size, buf + r * card_size, card_size);
    memcpy(buf + r * card_size, swap, card_size);
  }
}

int main(int argc, char **argv){
  int fd, card_size;
  ssize_t len;
  void *buf;
  char *filename;

  if(argc < 3){
    fprintf(stderr, "usage: shuffle filename card_size\n");
    exit(EXIT_FAILURE);
  }

  filename = argv[1];
  card_size = strtol(argv[2], NULL, 10);

  /*
   * Map filename into memory and shuffle it at the granularity
   * of card_size.
   */  

  fd = open(filename, O_RDWR);

  len = lseek(fd, 0, SEEK_END);
  lseek(fd, 0, SEEK_SET);

  buf = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED, fd, 0);
  if ( buf == (void*) -1){
    fprintf(stderr, "mmap failed.\n");
    fprintf(stderr, "%d - %s\n", errno, strerror(errno));
    exit(EXIT_FAILURE);
  }

  memshuffle(buf, len, card_size);

  munmap(buf, len);

  close(fd);

  return EXIT_SUCCESS;
}

2.9 Allocation Strategies
---------------------------------------


2.10 File Allocation Table
---------------------------------------


2.11 Values in the FAT
---------------------------------------
3,5,7


2.12 File Allocation Table (cont)
---------------------------------------



2.13 Inode Structure
---------------------------------------


2.14 Data Blocks
---------------------------------------


2.15 Inode Structure
---------------------------------------


2.16 Buffer Cache
---------------------------------------


2.17 Journaling
---------------------------------------


2.18 Direct Memory Access
---------------------------------------


2.19 Fill in the Table
---------------------------------------
 x  x
    x  x
    x

2.20 Conclusion
---------------------------------------



