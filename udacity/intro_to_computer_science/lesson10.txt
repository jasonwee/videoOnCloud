date start : 28 september 2018


10.1 how to solve problems
---------------------------------------



10.2 days between dates
---------------------------------------



10.3 quiz: first step
---------------------------------------



10.4 understanding a problem
---------------------------------------



10.5 the first rule
---------------------------------------


10.6 what are the inputs
---------------------------------------


10.7 how are inputs represented
---------------------------------------


10.8 quiz: what are the outputs
---------------------------------------


10.9 obey the rules
---------------------------------------


10.10 quiz: next step
---------------------------------------


10.11 quiz: the expected otuput
---------------------------------------


10.12 take the next step
---------------------------------------


10.13 try an example  
---------------------------------------


10.14 harder example
---------------------------------------


10.15 algorithm pseudocode 
---------------------------------------


10.16 quiz: should we implement it
---------------------------------------


10.17 different approach
---------------------------------------


10.18 quiz: simple mechanical algorithm
---------------------------------------


10.19 don't optimize prematurely  
---------------------------------------


10.20 quiz: what should we write first
---------------------------------------


10.21 quiz: define simple nextDay
---------------------------------------
if day < 30:
    return year, month, day + 1
else:
    if month < 12:
        return year, month + 1, 1
    else:
        return year + 1, 1, 1



10.22 making progress is good
---------------------------------------



10.23 quiz: what should we do next
---------------------------------------



10.24 quiz: define daysbetweendates
---------------------------------------
def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar, and the first date is not after
       the second."""
        
    # YOUR CODE HERE!
    days = 0
    nextdate = (year1, month1, day1)
    end = (year2, month2, day2)
    while nextdate != end:
        nextdate = nextDay(*nextdate)
        days = days + 1 
    return days



10.25 step on pseudocode
---------------------------------------


10.26 step two helper function
---------------------------------------


10.27 step three daysbetweendates
---------------------------------------


10.28 quiz: test for valid inputs
---------------------------------------
assert dateIsBefore(year2, month2, day2, year1, month1, day1) == False


10.29 real world problem
---------------------------------------


10.30 quiz: best strategy
---------------------------------------


10.31 quiz: finish daysbetweendates
---------------------------------------
# Credit goes to Websten from forums
#
# Use Dave's suggestions to finish your daysBetweenDates
# procedure. It will need to take into account leap years
# in addition to the correct number of days in each month.

def isLeapYear(year):
    if year % 400 == 0:
        return True
    if year % 100 == 0: 
        return False
    if year % 4 == 0:        
        return True
    return False
        
def daysInMonth(year, month):
    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
        return 31
    else:
        if month == 2:
            if isLeapYear(year):
                return 29
            else:
                return 28
        else:
            return 30

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < daysInMonth(year, month):
        return year, month, day + 1
    else:
        if month < 12:
            return year, month + 1, 1
        else:
            return year + 1, 1, 1
        
def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False        

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        days += 1
    return days

def test():
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()

10.32 solution step I
---------------------------------------


10.33 solution step II
---------------------------------------


10.34 solution step III
---------------------------------------


10.35 solution step IV
---------------------------------------


10.36 conclusion
---------------------------------------


