date start : 26 august 2021


5.1 Introduction
---------------------------------------
Welcome To Software Engineering Practices, Part 2
In part 2 of software engineering practices, you'll learn about the following practices of software engineering and how they apply in data science.

Testing
Logging
Code reviews



5.2 Testing
---------------------------------------
Testing
Testing your code is essential before deployment. It helps you catch errors and faulty conclusions before they make any major impact. Today, employers are looking for data scientists with the skills to properly prepare their code for an industry setting, which includes testing their code.



5.3 Testing and Data Science
---------------------------------------
Testing And Data Science
Problems that could occur in data science aren’t always easily detectable; you might have values being encoded incorrectly, features being used inappropriately, or unexpected data breaking assumptions.
To catch these errors, you have to check for the quality and accuracy of your analysis in addition to the quality of your code. Proper testing is necessary to avoid unexpected surprises and have confidence in your results.
Test-driven development (TDD): A development process in which you write tests for tasks before you even write the code to implement those tasks.
Unit test: A type of test that covers a “unit” of code—usually a single function—independently from the rest of the program.
Resources
Four Ways Data Science Goes Wrong and How Test-Driven Data Analysis Can Help: Blog Post
Ned Batchelder: Getting Started Testing: Slide Deck and Presentation Video



5.4 Unit Tests
---------------------------------------
Unit tests
We want to test our functions in a way that is repeatable and automated. Ideally, we'd run a test program that runs all our unit tests and cleanly lets us know which ones failed and which ones succeeded. Fortunately, there are great tools available in Python that we can use to create effective unit tests!

Unit test advantages and disadvantages
The advantage of unit tests is that they are isolated from the rest of your program, and thus, no dependencies are involved. They don't require access to databases, APIs, or other external sources of information. However, passing unit tests isn’t always enough to prove that our program is working successfully. To show that all the parts of our program work with each other properly, communicating and transferring data between them correctly, we use integration tests. In this lesson, we'll focus on unit tests; however, when you start building larger programs, you will want to use integration tests as well.

To learn more about integration testing and how integration tests relate to unit tests, see Integration Testing. That article contains other very useful links as well.



5.5 Unit Testing Tools
---------------------------------------
Unit Testing Tools
To install pytest, run pip install -U pytest in your terminal. You can see more information on getting started here.

Create a test file starting with test_.
Define unit test functions that start with test_ inside the test file.
Enter pytest into your terminal in the directory of your test file and it detects these tests for you.
test_ is the default; if you wish to change this, you can learn how in this pytest configuration.

In the test output, periods represent successful unit tests and Fs represent failed unit tests. Since all you see is which test functions failed, it's wise to have only one assert statement per test. Otherwise, you won't know exactly how many tests failed or which tests failed.

Your test won't be stopped by failed assert statements, but it will stop if you have syntax errors.

https://docs.pytest.org/en/latest/getting-started.html
https://docs.pytest.org/en/latest/getting-started.html



5.6 Exercise: Unit tests
---------------------------------------
Exercise: Unit tests
Download README.md, compute_launch.py, and test_compute_launch.py.

Follow the instructions in README.md to complete the exercise.

Supporting Materials
Compute Launch
Test Compute Launch
README



5.7 Test-Drive Development and Data Science
---------------------------------------


5.8 Logging
--------------------------------------


5.9 Log Messages
---------------------------------------



5.10 Quiz: Logging
---------------------------------------



5.11 Code Reviews
---------------------------------------


5.12 Questions for a Code Review
---------------------------------------


5.13 Tips for Conducting a Code Review 
---------------------------------------



5.14 Conclusion
---------------------------------------



