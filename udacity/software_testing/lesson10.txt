date start : 02 august 2019


10.1 quiz: fuzz testing
---------------------------------------
def fuzzit(content):
    l = list(content) # this line had an extra space making Python interpreter crazy
    for x in range(len(l)):
        c = chr(random.randint(0,255))
        l[x] = c
    return l

print fuzzit(content)

10.2 quiz: random testing
---------------------------------------
def random_test():
    num_iterations = 10000
    queue_size = 500
    q = Queue(queue_size)
    inputs = []

    for x in range(0, num_iterations):
        to_add = 1234
        if random.random() < .5:
            try:
                q.enqueue(to_add)
                q.checkRep()
                inputs.append((to_add, 0))
            except:
                inputs.append((to_add, 1))
        else:
            try:
                q.dequeue()
                q.checkRep()
                inputs.append(('dq', 0))
            except:
                inputs.append(('dq', 1))

    return inputs

10.3 quiz: regression testing
---------------------------------------
# Regression Testing
# ------------------
# The goal of this problem is for you to write a regression tester
# for the Queue class.
# 
# Begin by finding and fixing all of the bugs in the Queue class. Next,
# define the function regression_test to take in a list of enqueue inputs
# and dequeue indicators (the returned list of the previous problem) and
# repeat those method calls using the fixed Queue.
# 
# That is, after fixing the Queue class, create a new Queue instance,
# and call the method corresponding to the indicator in the list
# for each item in the list:
# 
# Call the enqueue function whenever you come across an integer, using that
#     integer as the argument.
# Call the dequeue function whenever you come across the 'dq' indicator.

import array
import random

# Fix this Queue class
class Queue:
    
    def __init__(self,size_max):
        assert size_max > 0
        self.max = size_max - 1
        self.head = 0
        self.tail = 0
        self.size = 0
        self.data = array.array('i', range(size_max))

    def empty(self):
        return self.size == 0

    def full(self):
        return self.size == self.max

    def enqueue(self,x):
        x = x % 1000
        self.data[self.tail] = x
        self.size += 1
        self.tail += 1
        if self.tail == self.max:
            self.tail = 0
        return True

    def dequeue(self):
        if self.size <= 0:
            return None
        x = self.data[self.head]
        self.size -= 1
        self.head += 1
        if self.head == self.max:
            self.head = 0
        return x

    def checkRep(self):            
        assert self.tail >= 0
        assert self.tail < self.max
        assert self.head >= 0
        assert self.head < self.max
        if self.tail > self.head:
            assert (self.tail-self.head) == self.size
        if self.tail < self.head:
            assert (self.head-self.tail) == (self.max-self.size)
        if self.head == self.tail:
            assert (self
                    .size==0) or (self.size==self.max)


    def to_str(self):
        print self.data


# An example list of enqueue integers and dequeue indicators
inpts = [(574, 0), ('dq', 0), (991, 0), ('dq', 0), ('dq', 1),
         (731, 0), (97, 0), ('dq', 0), (116, 0), ('dq', 0),
         (464, 0), (723, 0), (51, 0), ('dq', 0), (553, 0),
         (390, 0), ('dq', 0), (165, 0), (952, 0), ('dq', 0),
         ('dq', 0), (586, 0), (894, 0), ('dq', 0), ('dq', 0),
         (125, 0), (802, 0), (963, 0), (370, 0), ('dq', 0),
         ('dq', 0), (467, 0), (274, 0), ('dq', 0), (737, 0),
         (665, 0), (996, 0), (604, 0), (354, 0), ('dq', 0),
         (415, 0), ('dq', 0), ('dq', 0), ('dq', 0), ('dq', 0),
         ('dq', 0), (588, 0), (702, 0), ('dq', 0), ('dq', 0),
         (887, 0), ('dq', 0), (286, 0), (493, 0), (105, 0),
         ('dq', 0), (942, 0), ('dq', 0), (167, 0), (88, 0),
         ('dq', 0), (145, 0), ('dq', 0), (776, 0), ('dq', 0),
         ('dq', 0), ('dq', 0), ('dq', 0), (67, 0), ('dq', 0),
         ('dq', 0), (367, 0), ('dq', 0), (429, 0), (996, 0),
         (508, 0), ('dq', 0), ('dq', 0), (295, 0), ('dq', 0),
         ('dq', 0), ('dq', 0), (997, 0), ('dq', 0), (29, 0),
         (669, 0), ('dq', 0), (911, 0), ('dq', 0), ('dq', 0),
         (690, 0), (169, 0), (730, 0), (172, 0), (161, 0),
         (966, 0), ('dq', 0), (865, 0), ('dq', 0), (348, 0)]


def random_test(return_on_failure = False):
    num_iterations = 10000
    queue_size = 500
    q = Queue(queue_size)
    inputs = []

    for x in range(0, num_iterations):
        to_add = 1234
        if random.random() < .5:
            try:
                q.enqueue(to_add)
                q.checkRep()
                inputs.append((to_add, 0))
            except:
                inputs.append((to_add, 1))
                if return_on_failure:
                    return inputs
        else:
            try:
                q.dequeue()
                q.checkRep()
                inputs.append(('dq', 0))
            except:
                inputs.append(('dq', 1))
                if return_on_failure:
                    return inputs

    return True


# Write a regression tester for the Queue class
def regression_test(inpts):
    q = Queue(500)
    for instruction in inpts:
        action, result = instruction
        if type(action) is int:
            q.enqueue(action)
        elif action == 'dq':
            q.dequeue()
        q.checkRep()
    print q.to_str()


if __name__ == '__main__':
    
    test_result = random_test(return_on_failure=True)
    if not test_result:
        print test_result



10.4 quiz: code coverage
---------------------------------------
# Enhanced Queue class
class Queue:
    
    def __init__(self,size_max):
        assert size_max > 0
        self.max = size_max
        self.head = 0
        self.tail = 0
        self.size = 0
        self.data = {}

    def __str__(self):
        return str(self.data)

    def clear(self):       
        self.__init__(self.max)

    def empty(self):       
        return self.size == 0

    def full(self):
        return self.size == self.max

    def enqueue(self,x):
        if type(x) is not int and type(x) is not str and type(x) is not bool:
            return False
        if self.size == self.max:
            return False
        
        self.data[self.tail] = x
        self.size += 1
        self.tail += 1
        if self.tail == self.max:           
            self.tail = 0
        return True

    def enqueueall(self, c):
        if type(c) is tuple or type(c) is list:
            if not self.size + len(c) > self.max:
                for itm in c:
                    self.enqueue(itm)
                return True
        return False

    def dequeue(self):
        if self.size == 0:           
            return None
        x = self.data[self.head]
        self.size -= 1
        self.head += 1
        if self.head == self.max:           
            self.head = 0
        return x 

    def checkRep(self):
        assert self.tail >= 0
        assert self.tail < self.max
        assert self.head >= 0
        assert self.head < self.max
        if self.tail > self.head:
            assert (self.tail-self.head) == self.size
        if self.tail < self.head:
            assert (self.head-self.tail) == (self.max-self.size)
        if self.head == self.tail:
            assert (self.size==0) or (self.size==self.max)


# Provide full statement and parameter value coverage of the Queue class
def test():
    # overfill test; parameter coverage
    q = Queue(4)
    q.enqueue(1)
    q.enqueue('')
    q.enqueue('asdf')
    q.enqueue(False)
    q.enqueue(True)
    q.checkRep()

    # dequeue and dequeue empty
    q = Queue(10)
    q.enqueue(1)
    el = q.dequeue()
    assert el == 1
    el = q.dequeue()
    assert el is None

    # __str__
    print(q)

    q.clear()
    q.checkRep()

    q.empty()
    q.checkRep()

    q.enqueueall((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    assert q.full()
    q.clear()
    assert q.empty()
    q.checkRep()

    assert q.enqueue([1]) is False
    assert q.enqueueall(1) is False
    q.checkRep()

    q = Queue(1)
    q.enqueue(1)
    q.dequeue()
    q.checkRep()

    q = Queue(3)
    q.enqueue(0)
    q.checkRep()
    q.enqueue(1)
    q.enqueue(2)
    q.dequeue()
    q.checkRep()
    q.dequeue()
    q.dequeue()
    q.enqueue(2)
    q.enqueue(3)


test()



