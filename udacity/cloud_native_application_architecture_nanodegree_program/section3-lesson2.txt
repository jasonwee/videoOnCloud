date start : 25 august 2021


2.1 Lesson Overview
---------------------------------------
In this lesson, we will look at how we can strategically approach refactoring a monolith application into microservices. We will look at how we can systematically prioritize what parts of a monolith to refactor and then how to practically refactor a production system.

By the end of this lesson you will be able to:

* Create a dependency map to prioritize refactoring a service based on business logic
* Develop an appropriate migration strategy for a specific use case
* Apply the strangler pattern to migrate a service from a monolith into its own microservice



2.2 Why Do Microservices Matter?
---------------------------------------
Monoliths versus Microservices
Monoliths and microservices are two architectural design patterns in how our applications are organized and deployed.

What is a Monolith Architecture?
Self-contained application that is deployed as one unit
 * Monoliths are applications that are deployed as one unit: rolling out changes to code means replacing an entire system with one release.

What is a Microservice Architecture?
Independently-deployed applications that communicate through networks

* Microservices are independent services that communicate with one another and are deployed separately.
* Rolling out changes to code in one service should have minimal impact on other services as they are relatively isolated.

Monoliths Aren't Bad!
Despite the enthusiasm today with building applications as microservices, monoliths aren't necessarily bad. The decision to build an application as a monolith or microservice is a design decision weighing tradeoffs:

* Monoliths are easier to develop and have less overhead for infrastructure.
* Microservices are more scalable and enable parallel development as multiple developers can easily work simultaneously on different parts of the application.
* Refactoring each microservice to make small changes can become frustrating and overwhelming



q1
> Which of the following differences between monoliths and microservices are true?
Monoliths can be deployed as a single unit, whereas microservices have multiple deployments
Monoliths are easier to set up than microservices



2.3 How Experts Approach Refactoring
---------------------------------------
It's Safer to Start with a Monolith
* Software that we build is often changing as business requirements evolve
* When in doubt, it's safer to start as a monolith
* Refactoring a monolith to microservice is easier than microservice to monolith

Microservice Complexity
* Microservices are inherently more complex than monoliths.
* Microservices have more moving pieces: services are individually deployed and communicate through a network.
* Microservices are a distributed system. Distributed systems come with new properties that inherently make it more complex than a single-node system like a monolith. All distributed systems are inevitably at risk for network failures and need additional overhead to manage the inherent risk.

Working with Microservices
* Without the support of a good developer toolchain, Microservices are more cumbersome to work with. A good overview of the different types of developer tools supporting can be found in this article.
* More overhead to manage when we need to make major changes that affect the whole system
* It's often easier to migrate an application from a monolith to microservice architecture than a microservice to monolith architecture.

Case Study
I once worked at a fast-paced startup where we would pivot or change our applications to meet new business needs. When we were informed of these changes, we were able to work quickly to make changes and push out new features and deprecate obsolete code. Thankfully, our applications at the time were built as monoliths, and it was easy to address these changes since they were typically localized in only a few areas. Imagine having spent so much effort to build your application as elegant microservices -- only to find out that half of your business logic is now obsolete. It would be frustrating and not productive to have to rework and redeploy code across multiple deployments.

q1
> If you are working on a lightweight, simple application that is beginning to run out of CPU and memory in processing increasing requests, which of the following is the best approach for refactoring?
Scale vertically by increasing the hardware.

q2
> Assume that you are working at a lean startup and you are responsible for a large legacy application that is stable and requires bug fixes and security patches once a quarter. Which of the following is the best approach for refactoring?
Keep the application as is.

q3
> Select the scenarios where it may be more beneficial to use a microservice architecture instead of a monolith architecture.
An enterprise application that needs to have downtime scheduled every night for any code changes
A company that wants two established teams that use different programming languages and frameworks to collaborate


New Terms
Term	               Definition
Distributed System	Multiple nodes that communicate with one another as part of a system



2.4 Preparing to Refactor a Monolith
---------------------------------------
Approaching Refactoring a Monolith
* A skilled developer would not blindly design and build everything as microservices!
* Look at the system from a bird's eye view to understand the relationships between services with a dependency graph.

Dependency Graphs
* A dependency graph is a way to visualize how pieces of a system relate to one another.
* Dependency graphs capture the modules and their dependencies as a directed graph.
* Helps us understand the downstream impact of the changes made in one module.
* Establishes an understanding of the system to see business risks associated with modifying one part of the system over another.

How to Get Started Creating a Dependency Graph
* Review source code
* Review existing documentation
* Understand external use cases

Details in Graphs
Dependency graphs involve nodes and arrows that capture the relationship between the modules that are linked.

Nodes
* Nodes represent a resource: these can be distinct servers, systems, or subcomponents of your application
* The level of detail to provide in a node depends on what type of information you are trying to capture with the dependency graph

Arrows
* Arrows capture the relationship between resources that are linked
* The direction of arrows can differ depending on what type of information you are capturing
* A diagram should not have different conventions for how arrows are directed as it makes the diagram confusing to understand

Because I often work with systems that transport data, I personally like my arrows to help represent how data is flows through my system.

REST API Endpoint

```
from services.orders import get_order_data
from services.customers import get_customer_data

@app.route('/order/<order_id>')
def get_order(order_id=0):
 order_data = get_order_data(order_id)
 customer_data = get_customer_data(order_data['customer_id'])

 return {
   'order_id': order_id,
   'purchase_price': order_data['purchase_price'],
   'customer_data': customer_data
 }
```


New Terms
Term	            Definition
Dependency Graph	A visual representation of how different components of a system interact with one another

Learn More About Preparing to Refactor a Monolith
Read the following to learn how dependency graphs are used and why distributed systems are more difficult to manage:

* Dependency Graphs in Webpack https://webpack.js.org/concepts/dependency-graph/
* SJSU Dependency Graphs       http://www.cs.sjsu.edu/faculty/pearce/modules/lectures/ood/metrics/Dependency.htm
* CAP Theorem                  https://en.wikipedia.org/wiki/CAP_theorem
￼


2.5 Quizzes: Dependency Graphs
---------------------------------------
q1
> Use the dependency graph above for the quiz. Assuming all of the nodes are of equal importance, which of the following nodes poses the most risk when it fails?
C

q2
> A dependency graph be helpful for … (Select all that apply)
Understanding how shutting down one service will affect another
Capturing an overview of a complicated system to understand security vulnerabilities
Creating a playbook for redeploying services in the event of a major failure



2.6 Exercise: Build a Dependency Graph
---------------------------------------
Build a Dependency Graph for a Flask Application

Your team needs to refactor an existing Flask application. Your task is to create a dependency graph for the team to review as they plan the migration strategy.

https://github.com/udacity/nd064-c2-message-passing-exercises/tree/master/lesson-1-refactoring-from-a-monolith/udacredit-monolith

user@localhost:~$ sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   633  100   633    0     0   8915      0 --:--:-- --:--:-- --:--:--  8915
100 12.1M  100 12.1M    0     0  6320k      0  0:00:01  0:00:01 --:--:-- 7103k
user@localhost:~$ ls -l /usr/local/bin/docker-compose
-rw-r--r-- 1 root root 13M Aug 21 11:10 /usr/local/bin/docker-compose
user@localhost:~$ sudo chmod +x /usr/local/bin/docker-compose
user@localhost:~$ ls -l /usr/local/bin/docker-compose
-rwxr-xr-x 1 root root 13M Aug 21 11:10 /usr/local/bin/docker-compose
user@localhost:~$ docker
docker                         dockerd                        dockerd-rootless.sh            docker-proxy                   
docker-compose                 dockerd-rootless-setuptool.sh  docker-init                    
user@localhost:~$ docker-compose --version
docker-compose version 1.29.2, build 5becea4c
user@localhost:~$ 




2.7 Solution: Build a Dependency Graph 
---------------------------------------

My Solution

My Process
1. Walk through client/src/index.js to understand the Frontend Client’s dependencies:
* Frontend Client is dependent on Customers Route and Employees Route

2. Walk through api/app.py to understand the dependencies for the routes
* Customers Route is dependent on Customers Service
* Employees Route is dependent on Employees Service
* Notifications Route is dependent on Employees Service and Notifications Service

3. Walk through files api/services/ to understand dependencies for the services
* All of the services have no dependencies


> Thinking Like A Cloud Native Developer
> Reflect on a situation in the past where you had to read through existing code. How would a dependency graph have helped you develop a better understanding of the code?
dependency graph give an quick overview how the code depend on each others...it give an initial idea where are the pieces related. This overview actually help during going through the code..



2.8 Migration Strategy
---------------------------------------

Migration Options
On a high level, we have three options for migrating an existing monolith application to microservices. There's no right or wrong approach -- it depends on which strategy best fits your business requirements.

1. Rewrite the application
2. Refactor the existing application
3. Migrate the existing application in pieces

Rewrite the Application
* An effort to refactor can be a good opportunity to rewrite an outdated application.
* Be mindful that it's not always a good idea to rewrite everything, and it's easy to lose track of the scope of rewrites.

Refactor the Existing Application
* Break apart the application into individual microservices and redeploy the finished refactor at once.
* We will need to make sure that our refactored application does not fall behind on features.

Migrate the Existing Application Incrementally
* An application can be refactored incrementally while it's live.
* We don't need to deploy a copy of the application and work on two simultaneous projects.
* Refactor in small increments so that we have time to ensure our application behaves as expected.
* Gradual refactoring is known as the Strangler Pattern.

The Strangler Pattern
The Strangler Pattern is a common way to migrate legacy applications. Rather than replacing your code with a new version, you can gradually replace components of your application.

New Terms
Term              Definition
Strangler Pattern	A strategy for gradually refactoring pieces of a deployed application

Learn More About Migration Strategies
Below are a few resources to learn more about the Strangler Pattern:

* Strangler Pattern   https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler-fig
* Martin Fowler's Origin of Strangler Pattern   https://martinfowler.com/bliki/StranglerFigApplication.html

The following are additional resources about refactoring applications:

* Martin Fowler's Definition of Refactoring   https://martinfowler.com/bliki/DefinitionOfRefactoring.html
* Refactoring for the Cloud   https://aws.amazon.com/blogs/enterprise-strategy/the-great-cloud-refactoring-debate/



2.9 Quizzes: Migration Strategy
---------------------------------------
q1
> Why would you use the Strangler Pattern to refactor a service?
To reduce the risks that might arise from changing too many pieces of an application at the same time

q2
> What are some ways the Strangler Pattern can be useful?
To reduce risk and make debugging more straightforward by localizing all the changes to one part of the application.



2.10 Exercise: Apply The Strangler Pattern
---------------------------------------
Applying The Strangler Pattern
You are tasked with refactoring the UdaCredit Union monolith application. Review the dependency graph below and decide which service to refactor first using the Strangler Pattern. Your goal is to determine which service would have the least amount of risk. Keep in mind there can be more than one right answer -- your solution needs to include your rationale for your decision!

Review the dependency graph and determine which part of the application is the least risky to refactor.
1. Analyze the dependency graph.
2. Determine which part of the application makes the most sense to begin refactoring using the Strangler pattern.
3. Write 2-3 sentences justifying your decision.

Exercise: Apply The Strangler Pattern
Review the dependency graph and determine which part of the application is the least risky to refactor.

* Analyze the dependency graph.
* Determine which part of the application makes the most sense to begin refactoring using the Strangler pattern.
* Write 2-3 sentences justifying your decision.


q1
> Strangler Pattern Response
> Explain which part of the application you would refactor first and the reasoning behind your decision
I would pick customers route and customers service because these are the least components (2) to begin refactoring. Frontend client require customers route and customers route require customers service. So if these two get refactors, it will work for the Frontend Client.



2.11 Solution: Apply The Strangler Pattern
---------------------------------------
Employees Route
This has 1 dependent and 1 dependency. It could be a candidate for refactoring but there may be better options.

Frontend Client
This has 2 dependencies and 0 dependents. There's no downstream impacts so it could be a great area to start.

Notifications Route
This has 2 dependencies and 0 dependents. There's no downstream impacts so it can be a great area to start.

Customers Route
When we look at the graph as a system, Customers Route along with Customers Service is much more decoupled from the rest of the application. Changes are more isolated and not cross-service. They are less likely to impact other parts of the system.

Tie Breaker
We can consider business context for each of the potential refactor candidates.

At the same time, Customers Service has logic that is much less tied to other parts of the API monolith. It may make sense to work with Customers Route and Customers Service.

> q1
Now that you've seen my response, has your opinion about which part to refactor first changed? Why?
sure, because refactoring decision will need to include business criteria too. It could also include like the application context.



2.12 Migrate from Monolith to Microservice
---------------------------------------
Using the Strangler Pattern
The Strangler Pattern provides a systematic approach to approaching our refactor. We want to look at how we can take these concepts and actually begin the work to refactor a monolith to individual microservices.

Refactoring with Kubernetes
* With Kubernetes, we can break apart our services into distinct Kubernetes services.
* We can begin to represent our application as multiple Docker images that are run as pods in multiple services.
* Kubernetes uses message passing to communicate between pods and services.

Premature Abstractions
Developers looking to reduce duplicate code may force non-ideal abstractions in their code. These types of abstractions are deceiving because they remove duplicate code and make the codebase seem more streamlined. However, the bad abstraction makes the code too rigid for changes.

* Don't force an abstraction to reduce code. You may find yourself with messy code that you need to accommodate; your abstraction should accommodate your code!

Example
Starting Point
Given that we have a store selling basketball and baseball equipment with the following types of message formats:

Basketball

* name: basketball
* ball size: large
* players: 10

Baseball

* name: baseball
* ball size: small
* players: 9

Forced Abstraction
We may see that there are common fields and decide to refactor our code to enforce that all of our sports follow this schema:

AbstractSport

* name:
* ball size:
* players:

Effect
When another sport is introduced, we may find that the abstraction had been too rigid. If the store begins to sell ice skating equipment, the abstraction starts to break apart:

Ice Skating

* name: skating
* ball size: ?
* players: 1

We can combat this by setting ball size as an optional/nullable field but this is a band-aid fix. As we accumulate more of these nullable fields to accommodate for our abstraction, we accrue more and more technical debt.

Addressing Duplicate Code

It's Fine To Have Duplicate Code
* It's a common misconception that code duplication is wrong in software. Production code is a living thing that evolves as business requirements change.
* The Do Not Repeat Yourself (DRY) principle is sometimes overly applied to every situation that makes our application too rigid.
* Some developers will force themselves to find a way to write abstractions for code that may not be prime candidates for abstractions.

It will be inevitable that you will have duplicate code. At the end of the day, it's fine to have code duplication.

Minimizing Duplicate Code
Common Libraries
* Common code can be abstracted into a library that is imported across our application.
* If we find that we have a lot of common utility functions, it's possible to publish this common code as its own library that we import to our other services.

Shared Common Code
* It's a common approach to have our microservices organized as submodules in one project. * We can possibly organize our project such that it references the same code.
This may look like this:

modules/service_one.py
modules/service_two.py
common/utils.py

Keep Duplicate Code
* My recommendation: focus on refactoring your application to microservices.
* Once you are done, you will have a better understanding of the shared components in your code.
* You can follow up with abstraction techniques to remove duplicate code if it makes sense to do so.

New Terms
Term                          Definition
Do Not Repeat Yourself (DRY)	A principle in software that encourages code reuse and applicable abstractions

Learn More About Migrating From Monolith to Microservices
Below are two very insightful articles on a different perspective of opting to overcomplicate abstractions instead of simply having duplicate code:
* Goodbye Clean Code      https://overreacted.io/goodbye-clean-code/
* The Wrong Abstraction   https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction?duplication
* Examples of Hosting Python Packages Internally   https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction?duplication



2.13 Quizzes: Migrate from Monolith to Microservice
---------------------------------------
q1
> A developer has been tasked with refactoring part of an application into microservices. Which of the following are appropriate approaches for reducing duplicate code?
Identify simple, identical blocks of code and centralize them into a helpers/utilities file
Keep the duplicate code as-is for now and reevaluate once the refactor is completed.
Gather duplicate code into a common library. Microservices will import the library when needed.

q2
> Microservices can be developed as subdirectories in the same git repositories or separated into their own independent repositories. What are some reasons for why we may want to keep them in the same repository?
Code can more easily reference common logic
Reduce complexity of managing multiple repos for developers working on the project


2.14 Exercise: Migrate from Monolith to Microservice
---------------------------------------
Applying Migrate from Monolith to Microservice
Your task is to use the Strangler Pattern to refactor an application. Your goal is to move the Customers service and Customers route into a microservice for the frontend application. This means that you will strangle the Customers service and Customers Route as an independent API.

The starter code can be found here: Flask Starter Code https://github.com/udacity/nd064-c2-message-passing-exercises/tree/master/lesson-1-refactoring-from-a-monolith/udacredit-monolith-starter

Hint: To make your refactoring work in this exercise easier, you may find it easier to create a copy of API and working backwards to remove code.

You can also use this dependency graph of the starter code:

Exercise: Migrate from Monolith to Microservice
Refactor the starter code by strangling the Customers Route and Customers Service into an independent API used for the frontend.

* Set up a new API with Customers Route and Customers Service
* Update the frontend application to use the new API
* Remove Customers Route and Customers Service from the original API

￼

2.15 Solution: Migrate from Monolith to Microservice
---------------------------------------

docker-compose.yaml
The docker-compose.yaml file has already been set up for you in the starter code:

version: '3'

services:
  api:
    build: api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./api:/backend
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
    ports:
      - "5000:5000"

  customers_api:
    build: customers_api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./customers_api:/backend
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
    ports:
      - "5001:5000"

  client:
    tty: true
    build: client
    command: ["npm", "start"]
    volumes:
      - ./client:/frontend
      - node-modules:/frontend/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - '3000:3000'
    depends_on:
      - api

volumes:
  node-modules:

It defines three containers:

api - the existing API code
customers_api - the API code that will be strangled
client - the frontend application

Steps
Create Customers API
We create a new project in the directory customers_api.

The new customers_api project should follow the same structure as api with the following differences:

app.py only contains Customers route logic
services/ only contains customers.py

My Solution (Part 2)

Steps
Remove Customers from Source API
We remove references to customers that have been introduced to customers_api:

In app.py, remove references to Customers route logic
Remove services/customers.py
Update Frontend Application
The docker-compose.yaml file has been set up to run the customers_api project on a separate port than that of api. This way, we can have the two applications running at the same time.

We update the /api/customers route to point to the application served on port 5001 instead of 5000.


q1
> Thinking Like A Cloud Native Developer
If we were to migrate another service into its own API with the Strangler Pattern, what changes would you have to make? Write a rough outline of a migration strategy.
1. identify which service. For example service A.
2. copy the api into another directory with the service name.
3. start make changes to the codes in the new service directory. example removing all other service other than the service A.
4. in the original directory, now remove service A off this api.


2.16 Refactoring Live Services
---------------------------------------

Given a code that is deployed in a live environment, how can we mitigate failures and negative business impact?

* Deploying code is not as simple as copy and pasting the latest changes.
* There are circumstances when we will need to perform a migration with minimal downtime.

DNS Cutover
* A DNS cutover refers to how a DNS server points to IP addresses.
* We can change the IP address that a DNS is pointing to to roll out changes.

For example, if we own www.foo.com that currently points to 192.168.0.0.1, we can possibly run another application on 192.168.0.0.2 and point our DNS to use the newer IP address instead. Then, users who visit www.foo.com will be landing in the newer resource.

Rolling Updates
1. Create a new deployment of our application with the latest changes. We now have two states of the application running at the same time: one with our old code and one with our new code.
2. Verify that the latest code is working.
3. Do a cutover and begin to serve traffic to the resource running the newer code.
4. Remove the old resource once it is safe to do so.

Rolling updates are a core feature of using Kubernetes to manage your containers and can easily help you achieve 0 downtime.

Reverting Changes
* By localizing our changes, we have an easy way to revert any changes that cause unexpected errors.
* We can run new containers running our "strangled" pieces of application logic in tandem with the old application code
* If there's any issues, we can easily revert our changes and troubleshoot accordingly and minimize any additional downtime.

New Terms
Term	            Definition
DNS Cutover       changing the IP address to which a DNS points to
Rolling Updates	releasing changes in a safe manner where old resources are removed once the new resources are verified to be healthy

Learn More About Refactoring Live Services
Below are a few resources for further reading on concepts mentioned in this section.

Kubernetes Rolling Updates             https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/
Office 365 Migration with DNS Cutover  https://cloudblogs.microsoft.com/industry-blog/en-gb/technetuk/2015/04/10/dns-the-key-to-a-successful-office-365-migration/



2.17 Quizzes: Refactoring Live Services
---------------------------------------

q1
> Which of the following are examples involving rolling changes?
Loading separate instances of an application with new code and verifying it works before configuring it to be used.
Updating a Kubernetes deployment to always pull the latest Docker image in new pods so health checks can be validated.

q2
> Match the following terms with their definitions
DNS Cutover
Rolling Updates
Revert
Downtime


2.18 Exercise: Refactoring Live Services
---------------------------------------
Applying Refactoring Live Services
If we are provided a server running some code, why don't we just update the code running on the server? Instead, we're proposing that we make this simple process more complicated with techniques like creating another server to host our new application.

Let's reflect on why we use techniques like cutovers and why we wouldn't just update our code directly.

> Why Use Cutovers?
> Why would we use techniques like cutovers instead of updating our code directly?
if the code release to production does not work as expected to the existing api, then we will have api failure. We want to mitigate such scenario by using technique cutovers, that is , when the new api works as expected, only then we remove the old api.



2.19 Solution: Refactoring Live Services
---------------------------------------
Bad Practice!
* No accountability - having a record on what changes in code were made is important for troubleshooting
* No reproducibility - ad-hoc changes can make it difficult to reproduce a code in the live environment or in a development environment
* Changes can be lost - updates can be lost as code is merged

Rollback Options
* No straightforward way to rollback failures - undoing code that was applied manually is cumbersome
* External state could have been modified - changes to an application don't always include only changes to code -- database tables may have been updated as well!
* Downtime to restore old code - reverting changes can take time

q1
> Thinking Like A Cloud Native Developer
> Reflect on a situation where you have made manual changes to deployed code. How would it be different if you had multiple teammates working on the same project? In 2-3 sentences, provide your thoughts on issues that may be solved with standard deployment strategies.
if a few persons work on a same project and given standard deployment strategies, we can be sure code that release to production follow the same procedure, everyone will *know* and understand correctly. If a person did manual changes to production code, forget to commit in the repository, then the code might get lost when coworker do his release.



2.20 When NOT to Refactor
---------------------------------------
q1
> Which of these are a good candidate for refactoring?
A customer-facing application that has 75% uptime.


q2
> Why should we consider creating our applications as monoliths?
It's more straightforward to migrate it to microservices
We may not need to use microservices at all


Monoliths Aren't Bad!
Microservices are a great way to approach designing systems but they should not be used without consideration of its tradeoffs!

* Don't build an application as microservices simply because it is popular.
* Microservices are intentional design decisions that optimize for your business use cases.
* As engineers, we should put intention behind our designs. We can start off with a monolith and find that we don't even need microservices!

Too Much Abstraction
* Services and modules inside of our microservices should be optimized for business productivity.
* Code that may look elegant today will turn out to be a mess as other developers find it very difficult to work with unnecessarily complicated code.


Further Reading
Read the following to learn more about why monoliths are viable architectural solutions:
* Well-Architected Monoliths are Okay https://robertnorthard.com/devops-days-well-architected-monoliths-are-okay/
* What's so Bad About Monoliths Anyway?! https://www.ben-morris.com/whats-so-bad-about-monoliths-anyway/


2.21 Quizzes: When NOT to Refactor
---------------------------------------
q1
> Which of the following scenarios makes the most sense to refactor?
A user-facing application using a library that recently updated to address security vulnerabilities.

q2
> Which of the contexts are good candidates for refactoring?
An internal product made by an intern that is being released to users.



2.22 Lesson Recap
---------------------------------------

In this lesson, we learned how to:

Analyze and understand decomposing a monolith
1. How to approach building out a migration strategy with our monolith
2. How to systematically approach a refactor using the Strangler Pattern
3. How to refactor a live application
4. In our next lesson, we'll learn about the concepts and purposes of different ways we can have our services communicate with one another.

In our next lesson, we'll learn about the concepts and purposes of different ways we can have our services communicate with one another.

We've taken our first step in learning all about message passing!

We're in the first phase of the big picture. We've looked at: how a daunting task like a refactor can be decomposed into something that we can systematically into individual services. Now that we have the services defined, we will learn about how to implement message passing to connect these service



2.23 Glossary
---------------------------------------
New Terms In This Lesson
Term                          Definition
Dependency Graph	            A visual representation of how different components of a system interact with one another
Distributed System	         Multiple nodes that communicate with one another as part of a system
DNS Cutover	                  Changing the IP address to which a DNS points to
Do Not Repeat Yourself (DRY)	A principle in software that encourages code reuse and applicable abstractions
Rolling Updates	            Releasing changes in a safe manner where old resources are removed once the new resources are verified to be healthy
Strangler Pattern             A strategy for gradually refactoring pieces of a deployed application


