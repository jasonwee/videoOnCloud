date start : 23 august 2021


3.1 Meet Your Instructor
---------------------------------------
Welcome to the course, Message Passing! My name is Justin and together, we will be learning about the design considerations and application of connecting services with one another. I have worked in software for many years as an engineer and consultant with small startups, Silicon Valley startups, to Fortune 500 companies. My goal is to teach you concepts in a relatable manner and how they apply in the industry.


3.2 Lesson Overview
---------------------------------------
In this lesson, we will be going over some of the foundational concepts that will help you with understanding and be successful with the courses. We will cover:

Course Overview
Course Prerequisites
What is Message Passing?
Who uses Message Passing?
When to use Message Passing?
History of Message Passing
Project


3.3 Course Overview
---------------------------------------
What We'll Cover
In this course we'll learn about system design, concepts behind popular technologies, and hands-on application of message passing.

By the end of the course you will be able to:

Refactor a service or capability from a monolith to a microservice
Determine when to apply a communication protocol or technology to a specific use case
Apply message passing techniques to enable communication between services
Apply Message passing in production systems.a


3.4 Prerequisites
---------------------------------------
Technologies You Should Be Comfortable Using:
Docker - creating images and running containers
DockerHub - pushing and pulling Docker images
Kubernetes - creating a cluster and creating pods and services
HTTP - using HTTP requests, HTTP responses, and HTTP servers
Basic Python - writing methods and using modules with Python 3
Command Line Interface - using CLI to install packages and run commands
GitHub - using git with GitHub to clone repositories, create commits, push changes, pull branches, and create repositories
We will be running Unix commands in a command line interface. MacOS and Linux support Unix commands natively. Windows users will need to use a tool like Git Bash to run Unix commands.

Concepts You Should Understand
Abstraction
An abstraction simplifies a system by only exposing the parts that concern a user.

Toaster Oven Example
System: an electronic component composed of electrical wiring, a heating element, and a timer.
Abstraction: a metal body used to heat toast
The user never needs to concern themselves with the internals of the toaster and how the components that make up the toaster work together.

A user never asks to buy a metal box with a heating element. Instead, they ask to buy a toaster.

Interface
Areas of interaction in a system.

Toaster Oven Example
We have defined ways for a user to interact with the toaster using the knobs and a spring-loaded lever.

It's not possible for a user to turn on the heating element of a toaster without using the lever. The only way to turn on the heating element is by using the lever as an interface.


New Terms
Term	Definition
Abstraction	Simplifying a system by only exposing parts that concern a user
Interface	Defined areas of interaction to a system



3.5 Introduction to Message Passing
---------------------------------------

Monoliths versus Microservices
Monoliths and microservices are architectural designs on how to structure and deploy applications.
A monolith is easier to maintain while a microservice offers more options for scalability with regards to business and technical concerns.

Monolith
A monolith application is one where all of the changes in code are deployed as one unit.
Simply call the function for behavior that may be in another service or module.
Application logic is all localized in the same deployment.

Microservice
A microservice application is one composed of individual services that can be deployed independently of one another.
May not have the luxury of simply making a function call.
We will need to rely on message passing to pass data between services.



q1
microservice

q2
microservice



New Terms
Term	Definition
Message Passing	Transfer data between services with a structured object
Monolith	An application that is deployed as a single unit
Microservice	An application composed of applications that are deployed independently



3.6 Message Passing Stackholders
---------------------------------------

Technical and Business Requirements
While message passing is a technical concept, there are both technical and business considerations that drive the architectural design behind your applications. Stakeholders not only include the team's developers but also include business leaders and external teams. Engineers design to find a balance between cost, maintainability, efficiency, and reliability to satisfy technical and business requirements.

Technical
Cost - memory, CPU, and overhead needed to handle messages
Maintainability - ease of modifications and enhancements
Efficiency - the amount of time it takes to handle a message or multiple messages
Reliability - messages being lost or improperly processed
Business
Cost - financial impact of paying for infrastructure
Maintainability - financial impact of developers to upkeep the system; ease of integration for external customers
Efficiency - productivity and cost-effectiveness of systems
Reliability - risks for when a system becomes unavailable for the user; reputation of business services




q1
documentation


3.7 When To Use Message Passing
---------------------------------------
Message passing is not limited to microservices. It is a crucial design consideration that is applicable beyond your application.

In an Application
Message passing is a critical component of how microservices communicate with one another. One microservice may have logic that requires additional logic to be processed by another.

In an Organization
In an organization, we may have multiple teams responsible for different applications and services. It's common for different teams to collaborate with one another to solve business problems. As teams may have different technologies and code, it's important to establish a common ground on how services will pass messages to one another.

Exposed Externally
Beyond an organization, message passing drives SaaS businesses. In the past, a business may have sold CD-ROM's of their software. Today, it's common for businesses to sell you their software with defined ways to pass messages to their products and tools.

q1
A payments processing startup creates a REST API for its customers to integrate their system.


New Terms
Term	Definition
SaaS(Software as a Service)	Software is hosted remotely by the vendor and its usage is licensed to users



3.8 History of Message Passing
---------------------------------------

The Problem
Having two applications communicate with one another is complicated: programming languages have very distinct ways on how it's translated into byte code that executes on the machine.
Even if two applications are written in the same programming language, it's hard to communicate directly with one another given how a system process is typically isolated from one another.

The Message
In order to enable synergy between different applications, we agree on a common way for applications to communicate via a language that is mutually understandable. We do this with messages.

Example Context
Assuming that you are building a web application that interfaces with this school's directory system, we will need to consider the message, message format, and how to pass the messages.

Enrolling a student means that we want to create a record of the student in the system.
We know that in this school system, we need to capture the student's first name, last name, email address, and date of birth.
Creating a student in this system is equivalent to the following in human language: I want to create a new student in the system with <first_name>, <last_name>, <email_address>, and <date_of_birth>
The Message Format
Translating this into a programmatic payload is not practical -- the format is too loose and will be hard to process.
To represent this data, we utilize data formats that are a balance between human-readability and machine-readability. Currently, the most popular formats are XML, YAML, and JSON.
We could represent the message as the following format in XML, YAML, and JSON:

XML
<student>
<first_name>John</first_name>
<last_name>Smith</last_name>
<email_address>johnsmith@udacity.com</email_address>
<date_of_birth>01-01-1950</date_of_birth>
</student>
YAML
first_name: John
last_name: Smith
email_address: johnsmith@udacity.com
date_of_birth: 01-01-1950

JSON
since JSON originates from JavaScript, it's best practice to use camelCase instead of snake_case though it's not wrong to use the other!

{
"firstName": "John",
"lastName": "Smith",
"emailAddress": "johnsmith@udacity.com",
"dateOfBirth": "01-01-1950"
}

These formats make it very easy for us to capture data and for our programs to process them. Drawing a comparison in Python, picture how much easier it is to extract values from a dict versus a str.

Passing the Messages
With our message format defined, we establish how these messages are passed and received. This is one of the core concepts in this course and will be covered in greater detail later in Types of Message Passing.

API
An Application Programming Interface (API) represents the message format and how we pass the message. It defines how we interact with software through a thoughtfully designed way to pass and receive data.
To illustrate an API, let's look at how we order a pizza: we are provided a list of available toppings to add to a pizza. We request for the toppings that we want and the kitchen takes care of the rest. We don't necessarily care about how the pizza is made, just that we can go through the menu to get a pizza!

Message passing is typically done through an API to establish a clean and consistent interface. Having a clean and thoughtfully designed API makes it easier for developers to create, maintain, and interact with our systems.


q1
Message formats provide accountability to how we pass our data


New Terms
Term	Definition
API (Application Program Interface)	Defines how a user interacts with an application
JSON	A format of human-readable messages that originates from JavaScript
XML	A format of human-readable messages that uses very expressive tags similar to HTML
YAML	A format of human-readable messages that is minimalist and less verbose





3.9 Project: UdaConnect
---------------------------------------
UdaConnect
To wrap up the course, we will be working on refactoring an existing project named UdaConnect. UdaConnect is a Python application built using the Flask library. Udaconnect uses location data from participants at trade shows and conferences to recommend professional connections. The application is pretty simple and is built as an MVP. Armed with the knowledge from this course, we will refactor this application to microservices using optimal message passing techniques.



3.10 Lesson Recap
---------------------------------------
In this lesson, we went over:

Course Overview
Course Prerequisites
What is Message Passing?
Who Uses Message Passing?
When to Use Message Passing?
History of Message Passing
Preview of the Final Project



3.11 Let's Get Started!
---------------------------------------
We've gone over how business and technical requirements have evolved into a state where message passing is an increasingly critical component of system design. I'm excited for us to become experts at message passing!



3.12 Lesson Glossary
---------------------------------------
New Terms In This Lesson
Term	Definition
Abstraction	Simplifying a system by only exposing parts that concern a user
API (Application Program Interface)	Defines how a user interacts with an application
JSON	A format of human-readable messages that originates from JavaScript
Message Passing	Transferring data between services with a structured object
Microservice	An application composed of applications that are deployed independently
Monolith	An application that is deployed as one unit
SaaS (Software as a Service)	Software is hosted remotely by the vendor and its usage is licensed to users
XML	A format of human-readable messages that uses very expressive tags similar to HTML
YAML	A format of human-readable messages that is minimalist and less verbose



