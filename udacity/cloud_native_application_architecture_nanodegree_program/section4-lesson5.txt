date start : 23 october 2021


5.1 Lesson Overview
---------------------------------------
Lesson Outline
Reviewing raw logs would be tedious and time consuming. In this lesson, we'll look at how we can use Grafana to create dashboards that allow us to visualize the data we've been collecting with Prometheus and Jaeger, so that we can see the performance of our system and application at a glance.

Starting with dashboards. First, we'll look at how to set up dashboards with Grafana, and we'll learn the key features of the dashboard UI.
Panels. Next, we'll create panels. These are essentially containers for charts and graphs within our dashboards.
Metrics. Then we will discuss how to use the Prometheus Query Language (PromQL) to track metrics on our cluster, and how to use Jaeger to track metrics on our application.
Edge case: Alternative tools. Finally, we'll look at some alternative tools and learn some of the best practices concerning when we might want to use something other than the Prometheus-Jaeger-Grafana stack for monitoring and observability.



5.2 Starting with Dashboards
---------------------------------------
Starting with Dashboards.
Remember, you can get all of the files you'll need for this and the other exercises in this course from this GitHub Repo.


When setting up Jaeger, we have to create an application and set our deployment to do sidecar injecting. Then we want to port-forward our Grafana service.

In real life, you would likely use NGINX or Istio as a service to expose the service.

NOTE: Your Vagrant machine may have gotten stale. If so, just run vagrant halt and then vagrant up. If vagrant halt fails, it's likely because it was not running.


q1
What is the default HTTP port used to access a Grafana dashboard?
3000


q2
A data source for Jaeger was created in the above video. I needed to point to our Jaeger Query instance. What is the HTTP port and what is the Kubernetes namespace?

(Select two options—one for the port and one for the namespace.)
11686
default

Additional Resources
If you would like to learn more about Grafana and why it is the standard, you can check out Grafana's website here.



5.3 Exercise: Starting with Dashboards
---------------------------------------
Exercise: Starting with Dashboards
In your career as an observability expert, you will probably more often need to navigate and modify an existing dashboard than create your own dashboard. So let's get a little practice with looking at some existing dashboards.

For the below quizzes, please refer to this public dashboard provided by CNCF.

These dashboards show you data from CNCF's public GitHub repos. This is a great resource for getting familiar with dashboards.

q1
Locate the dashboard named Companies table. Change the Metric to Commits.

Which company is ranked number one?
Google


q2
Find the Licenses and programming languages dashboard.

Out of the following options, select the two options that use the languages Nix or SaltStack.
kubernetes-sigs/cri-o
kubernetes-retired/kube-mesos-framework


Additional Resources
If you would like to learn more about Grafana JSON templating, you can check out Grafana's website here.



5.4 Panels
---------------------------------------
Grafana offers a wide array of types of graphs and charts that you can visualize. There are also extensions that you can find online to give you other features. I encourage you to play around with everything to familiarize yourself with the usage.

q1
Which of the following is not a graph type supported natively by Grafana?
Pie

q2
If you wanted to plot changes in response time over the course of a month as points on a graph, what panel chart makes the most sense?
line chart


Additional Resources
If you would like to learn more about Grafana Panels, you can check out Grafana's website here.



5.5 Exercise: Panels
---------------------------------------
Exercise: Panels
These next few questions will be using the official Prometheus dashboard from CNCF.

q1
Locate the dashboard named PRs Authors Companies Table. You will then see a panel named Prometheus PRs author companies. Edit it to see the query. What data source is being used?
postgresql


q2
In the same panel as above, what happens if you change Format as from Table to Time Series?
found no column named time


q3
Look for the dashboard named Users Statistics by Repository Group. Set the following:

Set the Period to Year
Set Metric to Commits made
Set Repository group to prometheus/client_python.
Based on avg, who has the most commits?

brian-brazil



5.6 Metrics
---------------------------------------

q1
For each of the metrics below, can you figure out what chart type would best display the data?
errors     bar graph
uptime     line graph
latency    line graph
saturation bar graph


q2
If you wanted to know which container used the most CPU cores in a given time, which PromQL metric would you use?

(The best way to figure it out is to create a panel, add a metric, and experiment!)

container_cpu_usage_seconds_total



5.7 Exercise: Metrics
---------------------------------------
Exercise: Metrics
For this exercise, use this Grafana Playground Dashboard.

These dashboards have mock performance data provided by Grafana. I would highly recommend playing with these dashboards on your own time to familiarize yourself with how everything works. The dashboards are ephemeral so don't worry about breaking them.

q1
Review the panel named Memory usage. Look at the metric with a legend named free. What is the parent metric named?
node_memory_MemFree_bytes


q2
Locate the panel named Disk I/O utilization and try creating a new metric. Which formula would show you the rate of disk write by node?
rate(node_disk_writes_completed_total[5m])


q3
In the above screenshot, what is the name of my span?
jobs




5.8 Alternative Tooling
---------------------------------------
The use cases in which you will most likely use another tool aside from the Prometheus, Jaeger, Grafana stack would most likely be if your cloud provider offers their own logging or if you already have a tool purchased that you enjoy.

While some companies use internal tooling, we are starting to see less and less of that due to the growing availability of tools.

q1
Besides Prometheus, what other sources can you use?
Google Cloud Monitoring


q2
Your Environment is hosted on Google Cloud and currently, your applications team is thinking of migrating from MySQL to a NoSQL solution. Which backends make the most sense?
Cloud Monitoring
InfluxDB


Additional Resources
If you would like to learn more about Grafana Data Sources and why it is the standard, you can check out Grafana's documentation on Data Sources here.



5.9 Lesson Review
---------------------------------------
Lesson Outline
In this lesson, we looked at how we can use Grafana to visualize the data we've been collecting with Prometheus and Jaeger, so that we can see the performance of our system and application at a glance. Hopefully by now you are convinced that visualization is very important to your career in observability! It is way easier to get insight on what’s happening in your cluster from a dashboard than it is from sifting through piles of logs.

Starting with dashboards. First, we looked at how to set up dashboards with Grafana, and we learmed the key features of the dashboard UI.
Panels. Next, we learned how to create panels. These are essentially containers for charts and graphs within our dashboards.
Metrics. Then we discussed how to use the Prometheus Query Language (PromQL) to track metrics on our cluster, and how to use Jaeger to track metrics on our application.
Edge case: Alternative tools. Finally, we considered some alternative tools and learned some of the best practices concerning when we might want to use something other than the Prometheus-Jaeger-Grafana stack for monitoring and observability.
With this knowledge, you will be ready to create really powerful graphics that make it easier for you to be a rockstar operations expert!



5.10 Course Review
---------------------------------------
If you followed along with everything in this course then you've learned a lot about observability! Here is the course outline again, in case you'd like to look over all of your new knowledge and skills!

Course Outline
Here's an outline of all the lessons and topics in this course, for your reference.

Lesson 1: Introduction to Cloud Observability
In this first lesson, we'll go over the big picture. Why is observability relevant? And what is your role is as an observability engineer? What tools will you need to be able to conduct observability on your cluster?

Big Picture: Monitoring in Clusters. We'll introduce the big picture of what cloud observability is and how monitoring developed.
Business Stakeholders. As a cloud observability expert, it's important to understand who the various stakeholders are that you'll be interacting with, so you can understand the sort of events you need to monitor for and how others will be using this information.
Where to Use Observability. We'll also talk about the conditions under which observability can be applied, and make a distinction between monitoring your system and observing the individual events within an application.
Prerequisites. We'll briefly go over the skills and concepts you should already have in order to ensure success in this course.
Tools, Environment and Dependencies. Finally, we'll go over a few technical requirements, along with the software and tools you'll need to install for this course.
Lesson 2: Observability Tools
This lesson will get you set up with the tools you need to start doing observability in your cluster.

Understanding your components. First, we'll look at the big picture. We'll consider three major needs that we will encounter when trying to do observability: System data, application data, and data visualization. Then we'll discuss why the three tools we're going to use—Prometheus, Jaeger, and Grafana—are great choices for addressing each of these needs.
Installing Prometheus, Grafana, and Jaeger. Next, we'll get into the details of how to install Prometheus, Grafana, and Jaeger, and how to confirm that the installations were successful.
Edge Case: Using ELK. Although the tools we are using in this course are excellent, industry-standard tools, it's always good to be aware of other options you may run into during your time as an observability expert. So at the end of the lesson, we will briefly consider ELK or Elasticsearch, Logstash, Kibana, which is a stack that serves as a popular alternative to the one we use in this course.
Lesson 3: SLOs, SLIs, and Error Budgets
This lesson is all about reliability metrics. In order to observe performance, we first need to get clear on how we are defining and measuring it, and that's what we'll cover here.

Defining performance. The first thing we need to do is define what we mean by site reliability or performance. We will talk about performance in terms of providing a certain level of service, and we'll go over what are called the four golden signals that are used in site reliability modeling.
Service-Level Objectives (SLOs). We also need a clear objective or goal, and this is where Service-Level Objectives (or SLOs) come in. We will talk about what SLOs are and what factors to consider when setting them.
Service-level indicators (SLIs) . Once we have a clear definition and objective for the level of performance we want to deliver, we need to consider how we will actually measure this performance. This is done using Service-Level Indicators or SLIs.
Error Budgets. Since we cannot guarantee 100% performance, we need to plan for errors. For example, if we are OK with 99% reliability on a metric, that means we have an error budget of 1%. We are deciding that if things get any worse than that 1%, this is a signal to us that an improvement is needed.
Building SLAs. Finally, we will bring this all together and examine Service-Level Agreements or SLAs. While you personally won’t have to worry about SLAs as an SRE, it is important to understand the context of SLAs as it does play a part in the overall SRE model.
Lesson 4: Tracing
This lesson is all about tracing. Tracing will allow us to get performance data on our applications, particularly on the latency of the key processes within them.

Big Picture: What is tracing? First we will talk about the underlying concept of tracing and how it is different from logs. In particular, we will consider why tracing is increasingly popular in diagnosing latency issues.
Distributed Tracing. In order to do tracing on our Kubernetes cluster, we need an approach to tracing that can handle microservices. This is called distributed tracing. We will explain what distributed tracing is in the context of Kubernetes applications and why this is such a useful tool.
Jaeger. Our tool for distributed tracing is Jaeger. We will discuss the key features of Jaeger as well as the main standards it uses, which are the OpenTracing and OpenTelemetry models.
Python Application Tracing. With Prometheus and Grafana, once we installed them they were pretty much ready to go. In contrast, in order to do tracing with Jaeger, we have to actually add code into the application itself to run a trace. We will walk through how to do this with Python applications.
Revisiting Logging. Finally, we will revisit logging. Although tracing is incredibly useful for issues involving latency, this doesn't mean that you should abandon logging. We will look at some use cases when you will want to utilize logs and consider how how logs are still useful in tracing.
Lesson 5: Building Dashboards
In this lesson, we'll look at how we can use Grafana to visualize the data we've been collecting with Prometheus and Jaeger, so that we can see the performance of our system and application at a glance.

Starting with dashboards. First, we'll look at how to set up dashboards with Grafana, and we'll learn the key features of the dashboard UI.
Panels. Next, we'll create panels. These are essentially containers for charts and graphs within our dashboards.
Metrics. Then we will discuss how to use the Prometheus Query Language (PromQL) to track metrics on our cluster, and how to use Jaeger to track metrics on our application.
Edge case: Alternative tools. Finally, we'll look at some alternative tools and learn some of the best practices concerning when we might want to use something other than the Prometheus-Jaeger-Grafana stack for monitoring and observability.
