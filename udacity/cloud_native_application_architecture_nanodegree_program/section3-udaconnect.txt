date start : 10 september 2021


6.1 Project Overview
---------------------------------------
UdaConnect
Background
Conferences and conventions are hotspots for making connections. Professionals in attendance often share the same interests and can make valuable business and personal connections with one another. At the same time, these events draw a large crowd and it's often hard to make these connections in the midst of all of these events' excitement and energy. To help attendees make connections, we are building the infrastructure for a service that can inform attendees if they have attended the same booths and presentations at an event.

The Task
You work for a company that is building an app that uses location data from mobile devices. Your company has built a Proof of concept (POC) application to ingest location data named UdaConnect. This POC was built with the core functionality of ingesting location and identifying individuals who have shared close geographic proximity.

Management loved the POC, so now that there is buy-in, we want to enhance this application. You have been tasked to enhance the POC application into a Minimum Viable Product (MVP) to handle the large volume of location data that will be ingested.

To do so, you will refactor this application into a microservice architecture using message passing techniques that you have learned in this course.

Starter Code
You can get started by forking, cloning, or downloading the starter code



6.2 Environment & Tools
---------------------------------------
1. Setup The Environment
Install the tools to get our environment set up properly.

If you haven't already done so:

Install Docker
Set up a DockerHub account
Set up kubectl
Install VirtualBox with at least version 6.0
Install Vagrant with at least version 2.0

2. Initialize K3s
To run the application, you will need a K8s cluster running locally and interface with it via kubectl. We will be using Vagrant with VirtualBox to run K3s.

In this project's root, run vagrant up.

vagrant up
The command will take a while and will leverage VirtualBox to load an openSUSE OS and automatically install K3s. Some useful vagrant commands can be found in this cheatsheet. A good introduction to Vagrant can be found in this article.

3. Retrieve the Kubernetes config File
After vagrant up is done, you will SSH into the Vagrant environment and retrieve the Kubernetes config file used by kubectl. We want to copy this file's contents into our local environment so that kubectl knows how to communicate with the K3s cluster.

We want to copy this file's contents into our local environment so that kubectl knows how to communicate with the K3s cluster.

sudo cat /etc/rancher/k3s/k3s.yaml

The output should look like this:

apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJWekNCL3FBREFnRUNBZ0VBTUFvR0NDcUdTTTQ5QkFNQ01DTXhJVEFmQmdOVkJBTU1HR3N6Y3kxelpYSjIKWlhJdFkyRkFNVFU1T1RrNE9EYzFNekFlRncweU1EQTVNVE13T1RFNU1UTmFGdzB6TURBNU1URXdPVEU1TVROYQpNQ014SVRBZkJnTlZCQU1NR0dzemN5MXpaWEoyWlhJdFkyRkFNVFU1T1RrNE9EYzFNekJaTUJNR0J5cUdTTTQ5CkFnRUdDQ3FHU000OUF3RUhBMElBQk9rc2IvV1FEVVVXczJacUlJWlF4alN2MHFseE9rZXdvRWdBMGtSN2gzZHEKUzFhRjN3L3pnZ0FNNEZNOU1jbFBSMW1sNXZINUVsZUFOV0VTQWRZUnhJeWpJekFoTUE0R0ExVWREd0VCL3dRRQpBd0lDcERBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFERjczbWZ4YXBwCmZNS2RnMTF1dCswd3BXcWQvMk5pWE9HL0RvZUo0SnpOYlFJZ1JPcnlvRXMrMnFKUkZ5WC8xQmIydnoyZXpwOHkKZ1dKMkxNYUxrMGJzNXcwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://127.0.0.1:6443
  name: default
contexts:
- context:
    cluster: default
    user: default
  name: default
current-context: default
kind: Config
preferences: {}
users:
- name: default
  user:
    password: 485084ed2cc05d84494d5893160836c9
    username: admin

Copy the content and type exit to exit the virtual OS. You will find yourself back in your computer's session.

Retrieve the Kubernetes config file", add "A useful article on how to manage kubeconfig files can be found here.

4. Configure kubectl
Create the file ~/.kube/config (or replace it if it already exists).

Paste the contents of the k3s.yaml output into the config file.

Test that kubectl works by running the command

kubectl describe services
It should not return any errors.

5. Deploy kubectl
kubectl apply -f deployment/db-configmap.yaml - Set up environment variables for the pods
kubectl apply -f deployment/db-secret.yaml - Set up secrets for the pods
kubectl apply -f deployment/postgres.yaml - Set up a Postgres database running PostGIS
kubectl apply -f deployment/udaconnect-api.yaml - Set up the service and deployment for the API
kubectl apply -f deployment/udaconnect-app.yaml - Set up the service and deployment for the web app
sh scripts/run_db_command.sh <POD_NAME> - Seed your database against the postgres pod. (kubectl get pods will give you the POD_NAME)

Manually applying each of the individual yaml files is cumbersome, but going through each step provides some context on the starter project's content. In practice, we can reduce the number of steps by running the command against a directory to apply all of the contents:

kubectl apply -f deployment/

6. Seed the Database
The first time you run this project, you will need to seed the database with dummy data. Use the command:

sh scripts/run_db_command.sh <POD_NAME>
against the postgres pod. (kubectl get pods will give you the POD_NAME). Subsequent runs of kubectl apply to make changes to deployments or services will not require you to seed the database again!

7. Verify Your Deployment
Once the project is up and running, you should be able to see three deployments and three services in Kubernetes. To verify, run the following commands:

kubectl get pods
kubectl get services
Both should both return udaconnect-app, udaconnect-api, and postgres.

These pages should also load on your web browser:

http://localhost:30001/ - OpenAPI Documentation
http://localhost:30001/api/ - Base path for API
http://localhost:30000/ - Frontend ReactJS Application



6.3 Understanding the Starter Code
---------------------------------------
Understanding the Starter Code
Project Structure
To start, fork or clone the starter code.

The project is organized with the following structure:

db - database scripts
deployment - Kubernetes configurations
modules - application logic
scripts - miscellaneous scripts
When you're working on your services, it will make the most sense to add them under the modules directory with a similar setup to that of the starter code.

The project contains a README in the project root. This is a great resource for referencing any project instructions or details for the project.

Starter Code Review Part I
Vagrantfile
scripts directory
db directory
deployment directory
routes file
config.py file
__init__.py file

Starter Code Review Part II
controllers.py file
models.py file
schemas.py file
services.py file



6.4 Instructions
---------------------------------------
How To Complete The Project


Instructions
1. Review and Plan
Review the starter project
Determine which message passing strategies would integrate well when refactoring to a microservice architecture.

2. Design and Document
Using the design decisions from the previous step, create an architecture diagram of your microservice architecture showing the services and message passing techniques between them.
Continue to use Kubernetes and maintain the core functionality of the starter project.
Include at least three message passing strategies into your microservice architecture implementing Kafka, gRPC, and either enhancing or creating a RESTful API endpoint.

3. Justify Your Decisions
Write a 2-3 sentence rationale for each message passing strategy to justify your decision.

4. Refactor into Microservices
Refactor the starter code into a microservice architecture.
While microservices can be technology-agnostic, we want to make sure that we use tools that your company is comfortable with. Therefore, this project should be done in Python.

5. Create OpenAPI Documentation
Provide OpenAPI documentation for API endpoints.

6. Create a Postman Library
Provide Postman library for REST endpoints that you created or modified.

Submission Requirements
The completed project must include:

Instructions and commands on how to run the project in the project README.
Architecture diagram named docs/architecture_design.png
Document on justifying your architectureâ€™s design decisions named docs/architecture_decisions.txt
OpenAPI documentation of your new REST API endpoint as docs/openapi.yaml
gRPC documentation of your endpoint and how to make a sample request in docs/grpc.txt
Screenshot of kubectl get pods as docs/pods_screenshot.png
Screenshot of kubectl get services as docs/services_screenshot.png
All project code
Postman collection of REST API endpoints that you created or modified as docs/postman.json


---

kafka
grpc

https://review.udacity.com/#!/rubrics/2924/view


6.5 Project: UdaConnect
---------------------------------------

Project Overview
You work for a company that is building an app that uses location data from mobile devices. Your company has built a proof of concept application to ingest location data named UdaConnect. This POC was built with the core functionality of ingesting location and identifying individuals who have shared a close geographic proximity.

Management loved the POC so now that there is buy-in, we want to enhance this application. You have been tasked to enhance the POC application into a minimum viable product to handle the large volume of location data that will be ingested. It is your job to refactor this application into a microservice architecture using message passing techniques that you have learned in this course.

Submission Instructions
This project should be submitted as either a zipped folder or a GitHub repo. The folder or repo must include: Before submitting, please check the Project Rubric to confirm that you have met all specifications.

Instructions and commands on how to run the project in the project README
Architecture diagram - docs/architecture_design.png
Justification for your architectureâ€™s design decisions - docs/architecture_decisions.txt
GRPC documentation of your endpoint and how to make a sample request - docs/grpc.txt
Screenshot of kubectl get pods -docs/pods_screenshot.png
Screenshot of kubectl get services - docs/services_screenshot.png
All project code
Postman collection of REST API endpoints -docs/postman.json



