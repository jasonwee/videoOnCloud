date start : 15 november 2021


3.1 Introduction
---------------------------------------
In this lesson, we will focus on verifying the security of a Docker configuration with an open-source tool called Docker-bench, as you would during the build phase of the SDLC. Once verified, we will deploy the image to Docker Hub.

Note: In this lesson, we will test the list of possible threats we established with STRIDE and confirm which threats actually exist by running Docker-bench.



3.2 Lesson Overview
---------------------------------------
In this lesson, we will cover the following topics:

Refresh on Docker attack surfaces from the previous lesson
Evaluate Docker process isolation
Inspect an image with Docker-bench to evaluate attack surface hands-on, identify threats and compare them to our threat model
Sign the image using Docker content trust and commit the hardened Docker image to Docker Hub



3.3 Docker Attack Surface
---------------------------------------
Refresher on Docker Attack Surface
What can go wrong? Let's examine this question for the three top-level groups - Docker client, Docker host, and Docker registry.

Docker client: We are most concerned with the compromise of the Docker desktop running on the administrator's machine, abuse of the client's authorization to make privileged changes, and how the Dockerfile is built.
Docker host also has a large attack surface - we are most concerned with namespace isolation to prevent container escape attacks, insecure defaults, and misconfiguration.
Docker registry likely has the largest attack surface with the most external implications. Here we are concerned with image security, Open-Source Software (OSS) security, and Docker registry security.
Next, let’s take review each top concern (client compromise, isolation tampering, and image security) in more detail.

Further Reading
Research findings from Google's Project Zero security research team.



3.4 Docker Client - Compromise
---------------------------------------
Docker client security is vital because the Docker client is how the user interacts with the Docker host.

What Could Happen with Client Compromise
If the Docker client is compromised, you should assume the attacker has privileged access to the host. At this point, the attacker controls the client and has the ability to control the host using the administrator's privilege access. All the built-in security controls are bypassed.

How the Client Can Be Abused
The machine running the Docker client is often an engineer's machine which often runs in a privileged context. This machine may be compromised via malware which may allow an attacker to control the machine remotely.

How to Protect against Abuse
Hardening the machine running the client (macOS, Windows, or Linux) is a good practice. However, that's beyond the scope of this course. The Center for Internet Security (CIS) provides hardening guides for all popular operating systems. You should collect and analyze Docker client logs.
Run the latest patched version of the Docker client.
Run anti-virus (AV) and endpoint detection and response (EDR) software to detect malicious processes and respond.
Avoid using the --privileged flag when running commands, as this flag makes the container privileged, opening the door to container escape.
New Terms
Endpoint detection and response (EDR) software: An agent that monitors for and alerts to suspicious processes and file system changes. Commercial examples include Crowdstrike Falcon and Carbon Black Response.



3.5 Docker HOst - Isolation Tampering
---------------------------------------
What Is Isolation?
Let's cover what isolation is on the Linux system. Isolation is the state of being separated, both in a physical and virtual sense that we can easily apply to Docker. Let's look at a simple analogy.

An apartment building has a shared common hallway, but each apartment has its own isolated door. The shared common areas in the apartment (i.e. the hallway) are like the kernel and each apartment is like a container. The isolation for each container is provided by namespaces, which are like the door to your apartment.

Two key things to keep in mind:

In a container, you rely on the kernel for all runtime operations.
Isolation allows each process to have its own isolated world to run processes.
How Namespace Isolation Works in Docker
Containers use a single shared kernel on the host. Unlike VMs, containers do not have their own kernel. Hence isolation is very vital to limit container processes.
Namespaces are what allows for isolation of process ID (PID).
Hence container “udacity” running PID 900 cannot directly see container “student” running PID 1000, or any other PIDs on the host system.
To allow isolation, namespaces provide doors for each container to communicate to the host.
Container Breakout
The term “Container breakout” is used when isolation checks have been bypassed. To prevent this, you can restrict the use of --privileged flags, which increase the risk of container breakout.

How to Protect Docker Host
Avoid using --privileged flag.
Give containers individual “capabilities” they need. Reference the Docker documentation for specific capabilities that can be added.
Use SELinux in enforcing mode.
New Terms
Container breakout/escape: A situation where a Docker container has bypassed isolation checks, accessing sensitive information from the host or gaining additional privileges.
Isolation: The state of being separated, both in a physical and virtual sense. On the Linux operating system, isolation allows each process to have its own isolated world to run processes as enforced by the kernel using namespaces.
Kernel: The orchestrator for all processes on a computer. The kernel has complete control over everything on the machine. Security and isolation of processes are enforced by the kernel.
Process ID (PID): An identifier assigned by the kernel to each created process to uniquely identify an active process.
Namespace: A Linux native control that isolates or partitions resources such that one set of processes cannot see the resources of another set of processes. Namespaces are what allows for isolation of process ID (PID).



3.6 Docker Registry - Image Security
---------------------------------------
A Docker image is a collection of layers of software manifests and tarballs that together form a single container unit. Each layer consists of manifests and libraries that could have vulnerabilities. The image itself must also be trusted, signed, and verified using the Docker content trust (DCT), which we will talk about in-depth later in this lesson.

How Image Security Can Be Abused
Images may inadvertently contain authentication secrets. If the image is exposed, the system may be compromised.
An attacker may introduce a spoofed image to the Docker Hub and fool users to use that image. This happens frequently. Usually, the attacker conceals the malicious elements by using common names to trick others to use them.
Dependencies used by the image may be tampered with or have vulnerabilities.
How Image Security Can Be Protected
Image hardening: Be sure to handle secrets properly. Also, minimize the use of third-party software and use verifiable ones to avoid introducing malicious software to the container environment.
Image signing with Docker content trust
Verifying public images by comparing the image digest sha256 hash with one provided by the image repository.
New Terms
Tarball: A tarball or tarfile is the name of a group or archive of files that are bundled together using the tar command. They usually have the .tar file extension. If the tar file is compressed using the gzip command, the tarball will end with .tar. Sometimes ZIP files are also called tarballs.
Docker content trust (DCT) gives you the ability to verify the integrity of both the publisher and the images they provide. It allows publishers to digitally sign their collections with a cryptographically designed key, while users get to use the key to verify the integrity of the content they use. DCT serves as an anti-spoofing control.
Image digest: A cryptographic representation of the Docker image as a string of characters. An image digest or sha256 hash represents the image you are using. Using the digest as the identifier, Docker will not only pull the image with that digest, but also calculate the sha256 hash of what you downloaded, and verify it against what you specified. Using and verifying image digests ensure the integrity of the image you are running. It also mitigates man-in-the-middle attacks.
Sha256: The algorithm used to generate a cryptographic representation of the Docker image as a string of characters, also known as the image digest.
Man in the middle: A type of security attack, where an attacker intercepts communication between two parties, for example, intercepting communication between the Docker client/daemon and Docker Hub may allow an attacker to modify the image. Image signing mitigates this risk.
Further Reading
How to Man in the Middle Docker Container Traffic
Books:

Jean-Philippe Aumasson | A Practical Introduction to Modern Encryption




