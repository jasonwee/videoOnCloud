ud206

date start : 15 september 2023


1.1 The Command Line
---------------------------------------
Why Does Command Line Matter?
The command line is an alternative to the GUI based interface we are so used to. Although GUI interfaces are quite easy to use, they are not as flexible as the command line. Imagine copying a thousand files with a GUI. It would take a few clicks to select the files, some scrolling and some to and fro between the source and target directories. Doing the same thing from command line involves a fair bit of typing. So the command line approach may not seem a clear winner. Now consider renaming files in bulk or separating them based on their timestamps. It is tough to perform tasks like these from the GUI because GUIs are not programmable. With the command line you can combine multiple commands to, for example, find the timestamp, and copy the files based on the timestamps.

A good command line interface, like the Linux shell allows you to write scripts to automate tasks like these. In fact, the Linux shell comes with a long list of commands that can be composed to automate any task imaginable. This ability to build larger programs from smaller ones is what gives the command line its power and flexibility.

In this lesson you learn about some of the most useful commands and how to combine them into larger commands.



1.2 Intro to the Shell
---------------------------------------
Welcome to the Shell Workshop lesson
With this lesson, you start with the familiarization of one of the essential tools to become a Web developer.

During this lesson, we are going to provide in each concept a Workspace where you can experiment with the commands, but it is always good that you test those also in your computer locally.

Learning Objectives
Recognize the importance of the Shell terminal for a Web Developer.
Operate with a Shell terminal using multiple commands.
Practice various commands to perform different operations like navigating directories, files organization, etc.
Recomendation
The Shell commands can be installed or not on your computer if you are using Linux or Mac and you have issues running the commands check the documentation specifically for the Operating System.

Linux
MACOS



1.3 Windows: Installing Git Bash
---------------------------------------
Reminder: This page is Windows-only! Mac and Linux users, skip ahead to the next page!

Download Git here: https://git-scm.com/download/win

Note: There is a new Linux compatibility system in Windows 10, called Windows Subsystem for Linux (WSL). If you've heard of it, you may be wondering why we don't use that in this course. It's an experimental mini-Linux-OS that runs inside Windows, like a virtual machine. You can access your Windows files from inside it, but it's a little bit dangerous to share files between the Linux and Windows sides. In the future, WSL will probably become less experimental, but for now we'll be using Git Bash instead for this course.



1.4 Opening a terminal
---------------------------------------


1.5 Your first command (echo)
---------------------------------------
q1
The shell is telling me how big my terminal is

q2


1.6 Navigating directories (ls, cd, ..)
---------------------------------------
Navigating directories
Managing your directories and file structure in your computer or servers is an important skill you need to use in the development and deployment phases in your Web development.

In this concept, we are going to show you how to use the Shell with multiple commands to navigate and organize your files.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.


Commands:
ls: List the files in the directory.
cd: Move to a different directory.
Instructor Notes
If you are using the Git Bash on Windows you will find that some of your directories have spaces in the name like My Pictures in this case you need to use the command in this way cd 'My Pictures'.


q1
all three



1.7 Current working directory (pwd)
---------------------------------------
Current working directory
Sometimes you will get lost in many directories, with this command you can see where you are.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.

Command
pwd: Print Working Directory
Workspace
You can use this workspace to test your commands.


q1
less typing



1.8 Parameters and Options (ls -l)
---------------------------------------
Use parameters and options in your commands
Some commands have parameters or options to help you get more information or change the default behavior of those commands.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.

q1
1,2,3

q2
3



1.9 Organizing your files (mkdir, mv)
---------------------------------------
Organizing your files
With the Shell, you can use commands to organize your files into directories, move files, copy or remove the files.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.

Commands
mkdir: Creates directories.
mv: Move files from a directory to another.

q1
2,3,4

By the way, when you quote something in the shell, you always use straight quotes. This is what you'll get if you type into a terminal window. However, if you copy and paste from a web page or document, you should be really careful to make sure that it hasn't accidentally been written with “curly quotes”. Curly quotes will not work in the shell.

Single quotes and double quotes do slightly different things in the shell. If you're unsure which to use, go for single quotes.



1.10 Downloading (curl)
---------------------------------------
Downloading (curl)
curl is used in command lines or scripts to transfer data.

q1
curl -L https://tinyurl.com/zeyq9vc > dictionary.txt

By the way, a lot of URLs have special characters in them, such as the & sign, which have unusual meanings to the shell. That's why I'm always putting these URLs in quotes … even though these particular examples would work without them, it's a good practice to get into.



1.11 Viewing files (cat, less)
---------------------------------------
Viewing files
With the Shell, you can use commands to view files, let's learn how to do it in this concept.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too. You should have downloaded the dictionary.txt in the previous concept in the workspace.

Commands
cat: View file content.
less: View file content screen by screen.
Remember from the previous concept you downloaded dictionary.txt file into Downloads, you will need to cd into Downloads directory.

q1
good



1.12 Removing things (rm, rmdir)
---------------------------------------
Removing files or directories (rm, rmdir)
With the Shell, you can use commands to remove files or directories.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.

Commands
rm: Delete files.
rmdir: Delete directories.

q1
1,4



1.13 Searching and pipes (grep, wc)
---------------------------------------
Searching and pipes (grep, wc)
With the Shell, you can use commands search content in files.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too. You will need to have download dictionary.txt from Downloading (curl) concept

Commands
grep: "global regular expression print,” processes text line by line and prints any lines which match a specified pattern
wc: "short for word count" reads either standard input or a list of files and generates one or more of the following statistics: newline count, word count, and byte count
grep shell dictionary.txt | less

q1
22

q2
regular expression



1.14 Shell and environment variables
---------------------------------------
Shell and environment variables
Let see what more we can do with the Shell.

Use the workspace below the video to practice the commands and remember to practice locally in your computer too.

q1
environment variable

q2
echo $LOGNAME $PWD



1.15 Startup files (.bash_profile)
---------------------------------------
Instructor Notes
For users on Windows OS and using Git Bash you won't have a .bash_profile file. Don't worry I will explain to you how to create it.

1) If you're not in the home directory, change into it.

2) Create a file using touch .bashrc

3) Then edit it with Vim vim .bashrc

5) Save and close the file typing :wq and hit Enter.

6) Restart your Git Bash shell.

7) When you open your Git bash it will create a .bash_profile for you.



1.16 Controlling the shell prompt($PS1)
---------------------------------------
Near the end of the video, there's a screenshot of the tool I used to construct the long and complex $PS1 prompt. The tool is http://bashrcgenerator.com by Julien Ricard. Try it out!



1.17 Aliases
---------------------------------------
Commands
alias: Allows you to create short names for commands.


1.18 Keep learning!
---------------------------------------



