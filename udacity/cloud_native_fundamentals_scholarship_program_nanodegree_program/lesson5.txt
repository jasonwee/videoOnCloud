date start : 21 june 2021


5.1 Introduction
---------------------------------------


5.2 Big Picture: Application Releases
---------------------------------------


5.3 Continous Application Deployment
---------------------------------------
Overall, a delivery pipeline consists of two phases:

Continuous Integration (or CI) includes the build, test, and package stages.
Continuous Delivery (or CD) handles the deploy stage.



5.4 Quizzes: Continous Application Deployment
---------------------------------------
1,3,4

1,2,4

3

5.5 The CI Fundamentals
---------------------------------------


5.6 Quizzes: The CI Fundamentals
---------------------------------------
pytest
run pip install -r requirements.txt
docker build -t python-frontend .
docker push pixelpotato/python-frontend:v4.3.8


1,4

2



5.7 Exercise: The CI Fundamentals
---------------------------------------



5.8 Solution: The CI Fundamentals
---------------------------------------

GitHub has a rich library of upstream actions that can be easily integrated with any repository. The suite includes a Build and push Docker images action which uses 3 main components:

login - to logging into DockerHub
setup-buildx - to use an extended Docker CLI build capabilities
setup-qemu - to enable the execution of different multi-architecture containers




# This is a basic workflow to help you get started with Actions

name: Docker Build and Push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: {{ YOUR_DOCKERHUB_REPOSITORY }}/python-helloworld:latest

5.9 The CD Fundamentals
---------------------------------------
## API endpoint used to create the Application resource
apiVersion: argoproj.io/v1alpha1
kind: Application
## Set the name of the resource and namespace where it should be deployed.
## In this case the Application resource name is set to  `python-helloworld `
## and it is deployed in the `argocd` namespace
metadata:
  name: python-helloworld 
  namespace: argocd
spec:
  ## Set the target cluster and namespace to deploy the Python hello-world application.
  ## For example, the Python hello-world application is deployed in the `default` namespace
  ## within the local cluster or `https://kubernetes.default.svc`
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  ## Set the project the application belongs to.
  ## In this case the `default` project is used.
  project: default
  ## Define the source of the Python hello-world application manifests.
  ## In this example, the manifests are stored in the `argocd-demo` repository
  ## under the `python-manifests` folder. Additionally, the latest commit within
  ## the repository is targeted or `HEAD`.
  source:
    path: python-manifests
    repoURL:
    https://github.com/kgamanji/argocd-demo
    targetRevision: HEAD
  # # Set the sync policy. 
  ## If left empty, the sync policy will default to manual.
  syncPolicy: {}



CRDs (Custom Resource Definitions) 


5.10 ArgoCD Walkthrough
---------------------------------------



5.11 Quizzes: The CD Fundamentals
---------------------------------------
3,4


kubectl apply
kubectl create


2,3


5.12 Exercise: The CD Fundamentals
---------------------------------------


5.13 Solution: The CD Fundamentals Exercise
---------------------------------------
# deploy ArgoCD
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml


# Create the NodePort service for ArgoCD server by using the 
# `kubectl apply -f argocd-server-nodeport.yaml` command
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
  name: argocd-server-nodeport
  namespace: argocd
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
    nodePort: 30007
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8080
    nodePort: 30008
  selector:
    app.kubernetes.io/name: argocd-server
  type: NodePort



5.14 Configuration Managers
---------------------------------------


Helm - package manager that templates exiting manifests, and uses input files to tailor configuration for each environment
Kustomize - a template-free mechanism that uses a base and multiple overlays, to manage the configuration for each environment
Jsonnet - a programming language, that enables the templating of manifests as JSON files, that can be easily consumed by Kubernetes



Helm is a package manager, that manages Kubernetes manifests through charts. A Helm chart is a collection of YAML files that describe the state of multiple Kubernetes resources. These files can be parametrized using Go template.

A Helm chart is composed of the following files:

Chart.yaml - expose chart details, such as description, version, and dependencies
templates/ folder - contains templates YAML manifests for Kubernetes resources
values.yaml - default input configuration file for the chart. If no other values file is supplied, the parameters in this file will be used.



## The chart API version
apiVersion: v1
## The name of the chart. 
## In this case,  the chart name is`python-helloworld `.
name: python-helloworld 
## A single-sentence description of this project
description: Install Python HelloWorld
## A list of keywords about this project to quickly identify the chart's capabilities.
keywords:
- python
- helloworld 
## The chart version, here set to `3.7.0`
version: 3.7.0
## List of maintainers, their names, and method of contact
maintainers:
- name: kgamanji 
  email: kgamanji@xyz.com





5.15 Helm Walkthrough
---------------------------------------


5.16 Quizzes: configuration Managers
---------------------------------------
template manifests as json files
base and multiple overlays
package manager go template


1,3,4

4


5.17 Exercise: Configuration Managers
---------------------------------------


5.18 Solution: Configuration Managers 
---------------------------------------
The Helm chart is defined in the Chart.yaml file, which contains the API version, name and version of the chart:

apiVersion: v1
name: nginx-deployment
description: Install Nginx deployment manifests 
keywords:
- nginx 
version: 1.0.0
maintainers:
- name: kgamanji 


An example of the values.yaml file can be found below:

namespace:
  name: demo

service:
  port: 8111
  type: ClusterIP

image:
  repository: nginx 
  tag: alpine
  pullPolicy: IfNotPresent

replicaCount: 3

resources:
  requests:
    cpu: 50m
    memory: 256Mi

configmap:
  data: "version: alpine"


Below is an example of the values-prod.yaml file, which will override the default parameters:

namespace:
  name: prod 

service:
  port: 80
  type: ClusterIP

image:
  repository: nginx 
  tag: 1.17.0
  pullPolicy: IfNotPresent

replicaCount: 2

resources:
  requests:
    cpu: 70m
    memory: 256Mi

configmap:
  data: "version: 1.17.0"


And finally, here is ArgoCD application CRD for the nginx-prod deployment:

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nginx-prod
  namespace: argocd
spec:
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  project: default
  source:
    helm:
      valueFiles:
      - values-prod.yaml
    path: helm
    repoURL: https://github.com/kgamanji/argocd-demo
    targetRevision: HEAD

5.19
---------------------------------------



5.20
---------------------------------------


5.21
---------------------------------------



