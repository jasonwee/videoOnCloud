date start : 19 june 2021


4.1 Introduction
---------------------------------------


4.2 Cluster Management
---------------------------------------


4.3 PaaS Mechanisms
---------------------------------------
On-premise - where an engineering team has full control over the platform, including the physical servers
IaaS or Infrastructure as a Service - where a team consumes compute, network, and storage resources from a vendor
PaaS or Platform as a Service - where the infrastructure is fully managed by a provider, and the team is focused on application deployment

Networking - establish communication between internal and external systems, such as internet connection, firewalls, routers, and cables
Storage- collect and store digital data, such as files, blocks, or objects
Servers - physical machines that provide compute services for a platform
Virtualization - abstracts physical servers, storage, and networking. For example, we have learned that hypervisors are used to virtualize servers.
O/S - operating systems that connect the software to physical resources (e.g. Linux, Ubuntu, Windows, etc)
Middleware - help the developers to build an application by making it easy to consume platform capabilities (e.g. messaging, API, data management)
Runtime - execution context for an application. For example, using JVM (or Java Virtual Machine) as a Java runtime
Data - tools for collection and storage of data that is required by an application during execution(e.g. MySQL, MongoDB, or CockroachDB)
Applications - the business logic for a product



4.4 Quizzes: PaaS Mechanisms
---------------------------------------
all

middleware, data, applications

application , data

on premises

paas

iaas

4.5 Exercise: PaaS Mechanisms
---------------------------------------
PaaS is suitable for such use case because for a small team, we dont have the capacity, time and monatary resources to managed so many different areas. It is better to managed and focus application well and do it good. While leaving the rest of the components such as database, networking, o/s security and storage to the expert.

4.6 Solution: PaaS Mechanisms 
---------------------------------------



4.7 Cloud Foundry
---------------------------------------
This demo showcases the main capabilities of the Stratos console and Cloud Foundry.

Some of the noteworthy sections are:

Marketplace and Services - research the service catalog and explore any integrated services
Organizations - used to manage multi-tenancy, quotas, and access to applications
Routes - list all available endpoints used to access deployed applications
Build Packs - explore available buildpacks packages used to build an application
Security groups - configure the endpoints that the application can communicate with





4.8 Quizzes: Cloud Foundry
---------------------------------------
1,4

1,3

all

true


4.9 Exercise: Cloud Foundry
---------------------------------------
install docker, k3s, build image with your app, deploy to kubernetes cluster

pick the images, select the resources, and then deploy

one is cli vs one is gui


4.10 Solution: Cloud Foundry
---------------------------------------
Kubernetes
create an OCI (Open Container Initiative) compliant image, usually created by using Docker
deploy a Kubernetes cluster with a valid ingress controller for the routing of requests
deploy an observability stack, including logs and metrics
create the YAML manifests for the application deployment
create a CI/CD pipeline to push the Kubernetes resources to the cluster
Cloud Foundry
write a manifest file to provide main application deployment parameters
deploy Cloud Foundry or use Cloud Foundry PaaS solutions from 3rd part vendors
deploy the application to Cloud Foundry (via CLI or UI)
Note: Cloud Foundry will create the OCI compliant image by default, and it will provide the routing capacities as well.
Cloud Foundry provides a better developer experience for application deployment, as it offers a greater level of component abstraction (no need to manage the underlying infrastructure). However, a PaaS solution locks-in the customer to a specific vendor. On the other side, Kubernetes offers full control over the container orchestration, providing more flexible management of the application.


4.11 Edge Case: Function as a Service
---------------------------------------
FaaS or Function as a Service - event-driven cloud-computing service that requires only the application code to execute successfully.

Popular FaaS solutions are AWS Lambda, Azure Functions, Cloud Functions from GCP, and many more.


4.12 Exercise: Function as a Service 
---------------------------------------
faas.

because user creation and deletion not happening every seconds.. like once in a while, so best suited for faas. hence, cost can be reduce.


4.13 Solution: Function as a Service
---------------------------------------
For this particular exercise, choosing either a PaaS or FaaS would reach the end goal: making the service available to customers.

In most cases, in a newspaper context, the readers are more focused on the news content rather than managing their accounts. Also, the number of requests to get an article can be a thousandfold higher than the number of requests to create or delete an account. As such, you can assume that the microservice should not be running at all times consuming available resources, and instead invoke it on demand-only.

Conclusively, a FaaS solution would be more suitable for the management of customer account microservice.


4.14 Lesson Conclusion
---------------------------------------



