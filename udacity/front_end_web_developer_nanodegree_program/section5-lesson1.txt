

5.1.1 Introduction
---------------------------------------
Welcome to part four of the front end development course!
You have learned to build a webpage with HTML and CSS, and to make it interactive with Javascript. You have all the tools you need to make a fully functional website - and that’s awesome! But you might be asking - where do I go from here? In this course we are going to cover some tools that will take your front end web development skills to a professional level. We will focus on a build tool called Webpack and let it take us on a tour through all the most common technologies and strategies you’ll see in a professional front end project.

This course is really about a mental shift. Up to this point we have built toy apps for the purpose of learning that typically only have one user - us. But how does our development need to change in order to build, say, a large company website with a whole team of devs? We’re going to explore that and a whole lot more in the coming modules.

Lesson Objectives
The prime objectives of this first lesson are:

1. To set up the context of why we need build-tools for front end development.
2. To understand how any build tool uses a configuration file where all the app development rules are defined.

Baseline Questions
Have you ever used build tools in a project?
yes, many, from ant, maven, gradle, make and npm

Baseline Questions
As you start this course, what is your current understanding of build tools (if any)? What are they? What are they for/what do they do?
allow quickly to run compile , to test and build final binary files in a single command.

Baseline Questions
As you start this course, what is your current understanding of Webpack (if any)? Feel free to throw out even bits and pieces if you can't think of a full description. Things like where is Webpack used, what it does, other technologies that use it, etc..
in npm, when install package, npm provide a means to find,  install and update its config file , provide dependencies solution and many more.

Interview Question
Tell me about one tool you have used that improved your frontend workflow and why. This could be anything from a text editor plugin, linter, time tracker, etc... whatever you like.
i would say the devtools that comes with the browser is a must to use... it contain all tools to identify the problem during frontend development.



5.1.2 Setting the Stage
---------------------------------------
Setting the Stage

In this section we are going to talk about why we need build tools for front end projects.

Go to the Udacity website and inspect element to look at all of the assets on the Udacity home page.

Pro tip: Don't just open inspector and go to the head tag element to see what's there. One of my favorite browser dev tools is the Network tab. Go there and you can look at all the requests made by the page, separate them by type, see the http request responsible, see the response, etc.. I could do an entire course just on this tab probably. You can learn a ton by taking a look at sites this way and it is a priceless debugging tool.

On your own
More practice examples.

x Go to two websites you visit often or like
x Inspect their dependency lists just like we did Udacity's website earlier
x Take note of any trends, questions, or observations you have while inspecting each

Questions
What are some of your observations and takeaways from looking at Udacity and the other website assets?

there are many differetn type of requests , example xhr, js, css, img , media and font.
also occassional post requests even after page loaded.

Quiz Question
When loading website styles the order in which each css file is loaded matters
true

Interview Question
If a client is complaining that their website load time is too slow, what things would you do to assess where the slowdown is occurring and what might fix the issue?
take a look at the devtools network tab, see which request took the most time.
another way is to turn on profilers on devtools and indentify components that take the longest to load/paint.




5.1.3 Intro To Build Tools
---------------------------------------
In this section we are going to talk about some general principles that all build tools have in common, and then introduce how Webpack fits into that role.

Build tools will manage all our assets so that we don’t have to by combining them all into a single file (or sometimes a few files). We create a set of rules for the build tool to follow, telling it specifically how we want each type of asset handled, and then it follows our rules, takes all the assets and bundles them into a single large file, which has everything loading in the correct order and is much easier for us to deal with. Typically, files with names like bundle or main are the result of a build tool combining many assets into one.

What does it look like to write these rules for a build tool? Rules are written into config files. Just to give you a glimpse of where we’re headed, here is an example webpack config file. Don’t worry, this should look like gibberish right now, but we’re just going to take a look at a few things.

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'main.js',
  },
  module: {
       rules: [
          {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: "babel-loader",
          },
          {
                test: /\.html$/,
                use: [{ loader: "html-loader"}],
                },
                {
                    test: /\.scss$/,
                    use: [ 'style-loader', 'css-loader', 'sass-loader' ]
                }
       ]
 },
  plugins: [
    new HtmlWebPackPlugin({
           template: "./src/html/index.html",
           filename: "./index.html",
    })
  ]
}

One thing to notice is that we’re in javascript land! You can see that this config file is 100% normal javascript. Webpack is entirely built with js.

You can also see a whole section here in the middle titled “rules”. Not surprisingly, this is where we declare the rules that will govern our different assets. You might also have noticed that each rule targets a certain type of file with regex.

Activity
A developer’s best friend is their search engine! Take some time to do this quick search and see what you find.
x Do a quick google search (not more than 10 minutes) for front end build tools
x Note what names you see, or other facts that stand out

￼
Quiz Question
What kinds of assets might care which order they are loaded in?
x Styles
x Images
x Javascript
x Third party libraries
￼
Quiz Question
Build Tools are a category of front end development technology that:
Help developers write their asset management requirements into programmatic rules that can be run on command to save time and effort
￼
Quiz Question
So far, we know that Webpack is:
A Javascript tool for better asset management


Interview Question
Explain what role build tools play in modern frontend development.
install library require, manage various libraries dependency and conflict management, transpire all input to an optimized output when loaded by browser.





