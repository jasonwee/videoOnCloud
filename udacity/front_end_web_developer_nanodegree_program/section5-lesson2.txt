

5.2.1 Introduction to Webpack
---------------------------------------
Lesson Objectives
The objectives of this lesson are to:

1. Understand the role and necessity of webpack as a build tool
2. Install webpack, and get started with a Node/Express web app
3. Understand to use the major components of webpack - entry point, output, loaders, and plugins
4. Explain the use to two different modes - production and development. We will also learn to use webpack-dev-server in development mode.

Getting Started with Webpack
The webpack documentation describes itself this way:

At its core, webpack is a static module bundler for modern JavaScript applications.

But…what does that really mean?

This image from the Webpack website is a good visual.

The idea here is that on the left you have all the various asset file formats you will probably come across in a project. You might not recognize all the extensions, but just imagine that these are all your images, stylesheets, javascripts and more.

Webpack takes all the assets on the left and “bundles” or combines them into fewer files that are much easier to manage. Notice that multiple .js files on the left became one .js file on the right - that’s because the two files were combined into one large .js file.

Key Terms Used in the Video Above
1. Bootstrap is an open-source CSS library that helps to build responsive web sites, meaning the websites can adapt to the user's device (platform). Bootstrap library contains CSS and JavaScript-based design templates for different web page components. Refer to Bootstrap documentation for more details. Note that Bootstrap comprises a variety of components, two that the Instructor mentioned are tooltips, and modal.

2. Bootstrap Tooltip provides textual boxes that pop-up whenever we hover the mouse over a particular component or element. Refer a few Tooltip examples to have a better overview and usages. Note that the tooltip depends on third party library Popper.js, which in turn has its dependencies such as popper.min.js, and util.js.

3. Bootstrap Modal plugin adds dialogs to your site for lightboxes, user notifications, or any other component. They offer a variety of effects such as sliding, fading of the containing page, and scrolling. See a few examples here.

4. Animation library such as Parallax. Parallax is the type of animation effect where a component has a relative difference in the positioning on the web page. For example, an image that can seem to be moving when scrolling a web page is a Parallax. There are numerous libraries available in the market.

Quiz Question
￼
Based on what you know of Webpack so far, which of these tasks would NOT be performed by webpack:
All of the above could be done with webpack

Interview Question
Tell us how you have addressed an issue caused by conflicting asset files (or if you haven't experienced this first hand, tell us about a situation where this could happen). Examples could be styles conflicting with a third party stylesheet, or a bug caused by the order of javascript files.

use different naming convention or dont use the 3rd party stylesheet at all.



5.2.2 Getting Started
---------------------------------------
In this section, we're going to walk through the steps required to set up Webpack in your local machine.

This course is going to include a lot of work on your Git repository. We chose this style of practice because:
* We prefer learning by doing. By the end of the course, we want you to own a solid example to look back at for new projects.
* When working on your own repository, you have more freedom to try things and change things - which is an excellent way to learn! Just remember to stop and make a branch or at least commit before going off onto a rabbit trail.

Choose a Mode of Practice
In order to get the starter code up and running on your machine, before we start with Webpack, you have to pick either of the two options here:

1. Fork the Webpack Express Example App - Github repository, and then clone it onto your local machine to avoid accidentally trying to push your updates to the Udacity master repository.

2. You can use the in-classroom workspaces, starting from the next page, spread throughout this lesson. In this option, that you don’t need to deal with any environment setup.

About Github Repository - Webpack Express Example App
Each stage of the Webpack setup is reflected as a branch in the Github repository, and each branch has a README.md file documenting the steps taken in the branch. Note the following six branches that correspond to different stages, as shown in the snapshot below:

This repository makes use of git branches for each stage of this lesson. You will want to use the stage before the exercise you are on, as a starting point. The first exercise is branch 0-initial-setup, but you’ll also want to use that as the basis for the second exercise. You’ll use the next branch 1-install-webpack as the basis for moving onto the third exercise.

If you need to check which branches are available, use git branch -a. Then, once you know which branch you want, use git checkout <branch-name>, e.g., git checkout 0-initial-setup.

Give a moment to have a glance at the different files available in the repository:

Once, we will start configuring the initial setup, you will notice the change in package.json, node_modules, and package-lock.json.

Steps for Initial Setup of the Starter Code - Locally in Your Machine
Follow the steps as explained below:

1. Fork this repo, then clone the branch of your choice from your forked repo down to your computer locally. When you fork the repo, you can add your own personal notes to the README.md markdown file.

2. Open your terminal, go to a specific directory for this Nanodegree, and clone the Git repo using the command: git clone https://github.com/<Your Github Username>/fend-webpack-content.git

3. Get inside the newly downloaded directory, using cd fend-webpack-content

4. As we are just starting this process the first time, we will switch to the branch 0-initial-setup, using:

git checkout 0-initial-setup
git branch

Install NPM in your project, giving the ability to use Node. NPM is by-default installed with Node.js. To see if you already have Node.js and NPM installed and check the installed version, run the following commands:
node -v
npm -v

You can upgrade to the latest version of npm using:

npm install -g npm@latest
npm install

6. If the npm install throws NPM error, try clearing the cache and a fresh re-install, using:
npm cache clean
[sudo] npm install -g npm
npm install

If it asks to fix the vulnerabilities, run npm audit fix

7. Start your project, using npm run start

8. Check the website running at http://localhost:8080/. By default, this app runs on port 8080, but you can, of course, edit that in server.js. If everything, goes well, you'll see the app running as shown in the snapshot below:

Quiz Question
￼
When you use npm to install a new package, how many files/folders in your code change?
3

Quiz Question
￼
What do the commands npm i or yarn do? Choose the best answer.
They install all modules listed in the package.json and add to or create a new node_modules folder

Interview Question
What information can go into a package.json file? Name everything you can think of.
dependencies



5.2.3 Ex 0: Getting Started - Workspace
---------------------------------------
Set up the Local Machine
In the previous page, we explained the steps required for the initial setup of the starter code in your local machine.

If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

￼
Exercise: Getting Started Tasklist
Fork this repo.
x Clone it onto your own machine
x Install npm packages
x [optional] Change server to run on different port
x Start server (find the start command in package.json)

Udacity Workspace
Below, we’ve included a Udacity workspace. Here, you'll be able to work on exercises without leaving the classroom environment.

Exercise: Getting Started

Exercise: Getting Started¶
cd into your folder (webpack-content) and run:

npm install
npm start to start the app
this app runs on localhost:3000 on your local machine, although you can use the OPEN APP button here to view it.
Note that you could normally edit the port in server.js, although you won't be able to view it outside of port 3000 in this workspace.




5.2.4 Install Webpack
---------------------------------------
Install Webpack
In this exercise we will install Webpack locally.

Current Version of Webpack
At the time this course is created, the most recent stable version of Webpack is version 4. Webpack 4 comes with some significant changes from previous versions, so you will find different information out there if you read an older tutorial.

One of the new things about version 4, is that webpack declared a few default settings that are automatically in place when you install webpack. So, you might not even need a webpack config file. But, our app won't be following all the default settings, so we will need a custom config file, webpack.config.js.

Install Webpack in Local Machine
Prerequisite - We suggest you have any code editor, such as Visual Studio Code in your local machine. It will help to edit the files, keep track of the changes, and easy navigation. In this exercise, we will install Webpack locally. The steps are as follows:

In the terminal (Mac/Linux) or command prompt (Windows), go to the project directory. If you wish to practice the steps mentioned in the video demonstration below, stay on the 0-initial-setup branch. Else, switch to the branch 1-install-webpack corresponding the current exercise where all the steps have already been carried out. Note: If you are switching branches don't forget to make a commit on the current branch before switching.

git checkout 1-install-webpack
git branch

1. Install Webpack and the command line instructions (CLI) tool using npm, as:

npm install

Remember that npm i is just shorthand for npm install. A CLI is a terminal program that allows developers to run commands from the command line to communicate with the Webpack.

1. In package.json, verify if webpack and webpack-cli are added to the "dependencies" as:

"dependencies": {
"express": "^4.17.1",
"webpack": "^4.43.0",
"webpack-cli": "^3.3.11"
},

1. In package.json, add a build npm script as:

"scripts": {
"build": "webpack"
},

Lastly, verify the dependency for the development in "devDependencies" block as:

"devDependencies":{
"webpack-dev-server": "^3.11.0",
},

1. Create a webpack.config.js file in the root location of your project, and add the necessary require statements, and a blank module.exports code as:

const path = require("path")
const webpack = require("webpack")
module.exports = {
}

We will populate the module.exports with the entry code in the next exercise.

1. Try running Webpack using the command npm run build. You can expect to get an error in the terminal because our config file is currently still empty. We will start building the config file in the following lessons.
2. Let's commit the work done until now, using git commit.

Erratum - The webpack.config.js file has to be created in the root (/) location of your project.

Note: Let's see why we have mentioned in the video above that "the default entry point is not going to work for us because we have express installed."

The default location for the webpack entry point is ./src/index.js - but because we are already set up with express and have a slightly different file structure, that file doesn't exist! Instead, we need to tell webpack to use a custom entry point. You will learn more about this in the next pages!

￼
Quiz Question
￼
A webpack config file:
Allows us to override the webpack default setup as necessary

Interview Question
At work, a project requires the use of a technology that is completely new to you. What steps would you take to learn the required technology?
install it, go through quick example and play around with it.



5.2.5 Ex 1: Install Webpack - Workspace
---------------------------------------
Exercise: Install Webpack
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

￼
Exercise: Install Webpack Tasklist
In your own repo:
x Install webpack and webpack cli
x Add the config file: webpack.config.js
x Add necessary require statements and module.exports to config file

   const path = require(‘path’) 
   const webpack = require('webpack')

   module.exports = {

   }
x Add a new webpack npm script to your package.json
   "build": "webpack"
x Try running webpack (You should get a Webpack error in terminal, but you’ll see it trying to run)
   npm run build
x Git commit





5.2.6 Webpack Entry
---------------------------------------
Webpack Entry
Let's create the Webpack entry point. Webpack broke at the last step because it didn’t have an entry point.

Switch the Git Branch
If you want to practice the steps mentioned in the video demonstration below, then stay on the 1-install-webpack branch.

Else, switch to the branch 2-add-webpack-entry corresponding to the current exercise where all the steps have already been carried out, using

git checkout 2-add-webpack-entry
git branch

Note: If you are switching branches don't forget to make a commit on the current branch before switching.

You can view the files specific to the current branch, in the Github repository online, as well. For your convenience, the todo steps for the current stage/exercise are mentioned in STEP-2.md file available in the root directory of the project.

Webpack Entry
Webpack is going to make a map of our app assets and all of their dependencies, but it needs somewhere to start. The default location for the webpack entry point is ./src/index.js - but because we are already set up with express and have a slightly different file structure, that file doesn't exist! Instead, we need to tell webpack to use a custom entry point. In webpack.config.js, mention the entry point as:

module.exports = {
    entry: './src/client/index.js'
}

Quick Check -

1. For your easy reference, the index.js file at path ./src/client/ is already available in the 2-add-webpack-entry branch that you are working on. If you are unable to find index.js in ./src/client/, feel free to create the file here.
2. For building the app, you can use either npm run build.
3. After running the build command successfully, verify that a dist directory is created in the root, containing the bundled file main.js.

To check what files are included in the webpack build, you can run webpack-cli command from the terminal: npx webpack --display-modules or npx webpack --json > info.json (if you want to generate a json file in the project folder).

Interview Question
Without using build tools, what are the strategies available to you for loading assets in a particular order?

include in html file



5.2.7 Ex 2: Webpack Entry - Workspace
---------------------------------------
Exercise: Webpack Entry
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Webpack Entry Tasklist
In your project:
x Add an index.js file to the client directory (you may need to remove the existing one from the repo)
x Add the entry point attribute to webpack config './src/client/index.js'
x Add an alert to the index.js so we can see it run
x Build webpack
x Check for a dist folder - look in the main.js file for the alert you added
x Commit your changes!

Exercise: Webpack Entry¶
Now, we'll start to see the files webpack will create for us. Again, start by cd into webpack-content.

* Add an index.js file to the client directory
* Add the entry point attribute to the webpack config './src/client/index.js'

HIDE SOLUTION

In webpack.config.js, within module.exports, add:
￼
entry: './src/client/index.js'

* Add an alert to the index.js so we can see it run

HIDE SOLUTION
Here's one option here:

￼alert('I exist!')

Build webpack
￼HIDE SOLUTION
npm run build

If you want to also see the app in action, use npm start as well.

* Check for a dist folder - look in the main.js file for the alert you added

Need to try viewing the app? Use these to view or stop the app.



5.2.8 Output and Loaders
---------------------------------------
We have setup webpack just enough to be performing the most basic function of webpack - creating a dist folder with a main.js file from our entry point. And all of that is great - but none of it is useful yet.

What’s wrong? Let’s take a look:

1. The distribution folder has no connection whatsoever to our app. If you start the express server, our app is still functioning exactly the same way it did in part 0.
2. The main.js file of our distribution folder contains none of the javascript or other assets we wrote for our webpage.

In short - there are some things wrong with our distribution folder. So it’s time to take a look at customizing the webpack output. The “output” of webpack is - no surprise here - the distribution folder. It is where webpack drops or “outputs” the neat bundles of assets it creates from the individual files we point it to.

So we are going to solve the issues above by setting up our webpack output, along with a few other tasks required to make it all work.

Switch the Git Branch

If you want to practice the steps mentioned in the video demonstration below, then stay on the 2-add-webpack-entry branch.

Else, you can switch to the branch 3-webpack-output-and-loaders corresponding to the current exercise where all the steps have already been carried out.

git checkout 3-webpack-output-and-loaders
git branch

Note: If you are switching branches don't forget to make a commit on the current branch before switching.

You will need to run npm install to install babel dependencies in package.json file.

About the dist Directory, Installing the Babel Tool and Loading the JS Dependencies


Reflect
If you were told to install a node module called awesomest-linter for your development dependencies, what command would you write?
Hint - Use npm or yarn.
npm install -D awesomest-linter

Quiz Question
￼
When using webpack, if you need to change the button background color, which of the following theoretical files would you choose to edit?
ui.css

Steps Demonstrated in the Video Above
It might seem strange that we have to add ANOTHER library before we’re even finished setting up the first library - but believe me, that’s how it goes. Babel itself is also not an easy tool to use necessarily, it requires a bit of setup but it is widely used throughout the javascript world to translate new ES syntax into vanilla js that can run on browsers etc. They describe their tool like this:

Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.

Once you have the hang of this setup, I have personally found it helpful to have babel even on projects that don’t have Webpack. Sometimes I’ll install it just for the convenience … like the convenience of no semicolons or being able to use import/export syntax.

First off, we need to install Babel via npm. Babel occasionally changes its install requirements, but at the moment these are the configurations that work and seem to be pretty stable:

npm i -D @babel/core@^7.5.4 @babel/preset-env@^7.5.4 babel-loader@^8.0.6

Remember that the -D will install these as development dependencies.

And now, just like webpack, babel also requires a config file. In this case, it is a fairly simple one.

Create a new file .babelrc in the root of the project. Fill it with this code:

{ ‘presets’: ['@babel/preset-env'] }

Now, we’re about to go through a whole rigamarole of settings, these aren’t the kind of settings I would commit to memory necessarily, but I will try to explain the steps as we go along.

First, we have both webpack and babel installed, now we have to get webpack to use babel. Doing that forces us to use a part of webpack we haven’t explained yet - we will explain them I promise - but that would jump us just a little ahead of where we are, so for now, you can copy and paste this part. We will observe what it does and then circle back around to explain it.

So, back we go to the webpack config, because we have some things to add.

First, we could specify the “output” of our webpack config, it would look something like this:

output: { ...output options }

But at the moment, we don’t need to add any custom settings there. The default settings are good enough for us - creating a dist folder in the root of our project.

So, output is set, but there’s still the matter of getting webpack to use babel. For that we’ll use a webpack loader. Loaders are what we will circle back around to in a second, but for now, add this to your webpack config.

    module: {
            rules: [
                    {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: "babel-loader"
                    }
            ]
    }

Now, with that loader in place, we should be able to get going.

Go to your index.js file and import our two javascript files (also make sure you export them in the original files!). Then console log one of the functions. Here is an example:

import { checkForName } from './js/nameChecker'
import { handleSubmit } from './js/formHandler'

console.log(checkForName);

alert("I EXIST")

Really we don’t need the alert any more, but either way, delete the current distribution folder and rerun the build command.

You have been successful if you see your console logged function in the main.js that is output.

￼
Quiz Question
￼
Babel is a javascript library that allows us to:

Use the latest version of javascript, even if our browser or runtime doesn't allow it

Quiz
What file would you look for in a project to see if it is using babel?
.babelrc


Quiz Question
Why are webpack and babel seen together so frequently?
Babel allows developers to use convenient es6 syntax that works well with Webpack in a front end application


Interview Question
What is the difference between source code and built code?
source code is the place where we add/remove/edit/update the code and this source code will be transpire into build code where it will be ready by the client/browser.

Resource - Webpack Introductory Documentation
Have a look at the Webpack Introductory Documentation, where you can understand its core concepts - Entry, Output, Loaders, and Plugins.




5.2.9 Ex 3a: Output & Loaders - Workspace
---------------------------------------
Exercise: Output & Loaders
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Output & Loaders Tasklist
Now it’s your turn! Follow the steps below to add babel and the correct import statements to your repo.
￼
x For now, hardcode a reference to your javascript into the index.html:

  <script type="text/javascript" src="../../../dist/main.js">
  </script>
￼
x Add babel to your repo:

  npm i -D @babel/core @babel/preset-env babel-loader
￼
x Create a .babelrc file and fill it with these settings:
  { ‘presets’: ['@babel/preset-env'] }


Exercise: Output & Loaders¶
Now, we'll get babel hooked up to our code. Start by cd into webpack-content.

For now, hardcode a reference to your dist javascript into index.html (in the views folder of client)
￼HIDE SOLUTION
<script type="text/javascript" src="../../../dist/main.js"></script>

Add babel to your repo
￼HIDE SOLUTION
npm i -D @babel/core @babel/preset-env babel-loader

Create a .babelrc file and fill it with the appropriate settings
￼HIDE SOLUTION
{ ‘presets’: ['@babel/preset-env'] }

Need to try viewing the app? Use these to view or stop the app.

￼OPEN APP ￼CLOSE APP

Troubleshooting: If facing any dependency issue, please use these versions:

npm i -D @babel/core@^7.5.4 @babel/preset-env@^7.5.4 babel-loader@^8.0.6



5.2.10 Loaders
---------------------------------------
Loaders
In the last section we got webpack’s output configured - but to use babel we had to add a loader to our webpack config. We used it then without knowing what it was, but now we can revisit it.

Let’s take another look at that loader.

module: {
    rules: [
        {
            test: /\.js$/,
            exclude: /node_modules/,
            loader: "babel-loader"
        }
    ]
}

Now take a look at how Webpack describes loaders:

Out of the box, webpack only understands JavaScript and JSON files. Loaders allow webpack to process other types of files and convert them into valid modules that can be consumed by your application.

So loaders allow us to transform files of one type into another type so that webpack can work with them. It might not have looked like we were transforming file types in the step shown above, but we were actually taking es6 files and running the babel-loader over them to turn them into vanilla js files.

There are all sorts of loaders for webpack - take a look at this list. In webpack, most of the things you need to do will end up needing a loader.

We will visit a few more loaders later, but for now, just notice how they work. The rules array will contain all of our loaders, each loader specifies what types of files it will run on by running a regex matcher - in the case above we are looking for all .js files - the $ at the end simply means that nothing comes after that.

But simply looking for all the .js files in our project would be problematic, as we don’t want to run this on all the files we have in our node modules. For that kind of use case, we also have an exclude option available to us, and then we simply name the loader to be run on the selected files. Some loaders will have different options, you can always look it up in the loader documentation.

Quiz
Being able to read documentation is a super power that will allow you to rise quickly in your skills as a developer. Go to the webpack loader documentation and recap one or two things that you learn, or that confuse you.
there are just too many concepts to learn!

Quiz
What webpack loader regex rule would you write to find all css files?
/\.css$/

Interview Question
What are some examples of es6 syntax? Do you have a favorite?
const
import

Resource for ES6
Check out the ECMAScript 6 — New Features: Overview & Comparison with respect to ES5.



5.2.11 Ex 3b: Loaders
---------------------------------------
Exercise: Loaders
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Loaders Tasklist
Take some time to play with the Webpack loader we installed.
x Make sure you have installed Babel according to the instructions in the last tasklist.
x Tell webpack to use our new babel loader; add this to the module.exports in webpack config:
  module: {
     rules: [
         {
             test: /\.js$/,
             exclude: /node_modules/,
             loader: "babel-loader"
         }
     ]
   }
x Add export statements to your javascript files
  export { functionName }
x Add import statements for your javascript files in the index.js
  import { functionName } from './js/fileName'
x Delete your dist folder. You can delete it through your text editor, but it’s good practice to try it in the command line. Run the following command from your project root: `` `rm -rf dist
x Re-build webpack and watch the text that shows up in your terminal. You should see the names of your javascript files included in the files Webpack has looked through. You might not find your javascript code in the main.js, but as long as you can see that Webpack found your js files, it is all working as expected.

￼
Exercise: Loaders Optional Tasklist
Choose another loader to add to webpack. I would suggest starting with one of the following:

* JSON loader
* Eslint loader
* File Loader
￼
x Before doing ANYTHING - create a new git branch! Anytime you want to try an experiment, just make a branch.
x Go to the documentation for the loader you want to try
x Implement and see if you can get it to work. Remember to google any errors you get and look up the github repo for the loader if you come across any issues.


Exercise: Loaders
Now, you'll see how babel helps with linking, along with exports and imports. Start by cding into webpack-content.

* Make sure you have installed Babel according to the instructions in the last tasklist.
* Tell webpack to use our new babel loader; add this to the module.exports in webpack config:

module: {
    rules: [
        {
            test: '/\.js$/',
            exclude: /node_modules/,
            loader: "babel-loader"
        }
    ]
}

* Add export statements to your javascript files

export { functionName }

* Add import statements for your javascript files in the index.js

import { functionName } from './js/fileName'

* Delete your dist folder. You can delete it through your text editor, but it’s good practice to try it in the command line. Run the following command from your project root:

rm -rf dist

Re-build webpack and watch the text that shows up in your terminal. You should see the names of your javascript files included in the files Webpack has looked through. You might not find your javascript code in the main.js, but as long as you can see that Webpack found your js files, it is all working as expected.

Need to try viewing the app? Use these to view or stop the app.



5.2.12 Plugins
---------------------------------------
Switch the Git Branch
If you want to practice the steps mentioned in the video demonstration below, then use on the 3-webpack-output-and-loaders branch.

Else, you can switch to the branch 4-webpack-plugins corresponding to the current exercise where all the steps have already been carried out.

git checkout 4-webpack-plugins
git branch

Webpack Plugins
Plugins are one of the last vital concepts for webpack. The Webpack documentation explains them like this:

While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.

So, pretty much anything that we need to do that falls outside the range of loaders will be accomplished with plugins.

Plugins can do all sorts of things, from automatically adding asset references to an html file (which we’ll cover in a second) to allowing for hot module replacement - which is used in React’s Create React App to create an auto updating development server.

Note - In the video demonstration above, one more change is required to be done in <project_root_directory>/src/server/index.js file:

Change the path from:

app.use(express.static('src/client'))
To:

app.use(express.static('dist'))

We will see a sequential task list of all the instructions on the next page.

if you are facing errors while running npm run build, remove the dist folder and run the same command again.

Quiz Question
￼
Would a webpack plugin or loader be responsible for creating global constant values that can be used throughout the application?
Plugin

Quiz Question
Would a webpack plugin or loader be responsible for taking a .less file and returning css?
Loader


Quiz Question
￼
What are the three steps to install most plugins:
Declare a new instance of the plugin in the plugins list
Require the plugin from the node modules directory
Install the plugin via yarn or npm


Interview Question
In javascript, when you see the "new" keyword, what does it do and what does it say about the thing it is being called on?
create a new object

Things to think about
Some words and concepts that should be part of your answer here are:

The word instantiate, you create a new instance of the class
We create instances from classes, so the thing it is called on must be a class
If you want to get into the nitty gritty, you could talk about javascript pseudo classes and how the new keyword in javascript classes is really just syntactic sugar for javascript prototypes




5.2.13  Ex 4: Plugins
---------------------------------------
Exercise: Plugins
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Plugins Tasklist
In your repo:

￼
x Install the html webpack plugin

    npm i -D html-webpack-plugin
￼
x Require the plugin at the top of your webpack config

    const HtmlWebPackPlugin = require(‘html-webpack-plugin’)
￼
x Add a plugins list to the webpack config and instantiate the plugin

    plugins: [
      new HtmlWebPackPlugin({
        template: "./src/client/views/index.html",
        filename: "./index.html",
      })
    ]
￼
x Run webpack and observe the new dist folder output

x Update your server file. Change the home route to use the index file from dist:

    app.get('/', function (req, res) {
      res.sendFile('dist/index.html')
    })
￼
x Update your server file to look for asset files in the dist instead of client. Change:

    app.use(express.static('src/client'))
    
    To:

    app.use(express.static('dist'))
￼
x Run the server

x Git commit


Note: Some students are facing dependency issues, if you are facing such issues, we would suggest you to modify the version of html plugin in package.json to "html-webpack-plugin": "^3.2.0" and then install the packages again npm i. Now you can run npm run build and the dist folder will be generated again.



Exercise: Plugins
Now's your chance to begin work with plugins! Start by cding into webpack-content.

Install the html webpack plugin
￼HIDE SOLUTION
npm i -D html-webpack-plugin

Require the plugin at the top of your webpack config
￼HIDE SOLUTION
￼
const HtmlWebPackPlugin = require('html-webpack-plugin')
Add a plugins list to the webpack config and instantiate the plugin
￼HIDE SOLUTION
￼
plugins: [
    new HtmlWebPackPlugin({
        template: "./src/client/views/index.html",
        filename: "./index.html",
    })
]
Run webpack and observe the new dist folder output

Update your server file. Change the home route to use the index file from dist.

￼HIDE SOLUTION
￼
app.get('/', function (req, res) {
    res.sendFile('dist/index.html')
})
Update your server file to look for asset files in the dist instead of client.
￼HIDE SOLUTION
Change:

￼
app.use(express.static('src/client'))
To:

￼
app.use(express.static('dist'))
Run the server
Need to try viewing the app? Use these to view or stop the app.





5.2.14 Mode
---------------------------------------
Mode

Switch the Git Branch
If you wish to practice the steps mentioned in the video demonstration below, use the 4-webpack-plugins branch.

Else, you can switch to the branch 5-webpack-mode corresponding to the current exercise where all the steps have already been carried out.

git checkout 5-webpack-mode
git branch

Webpack Mode
The last core Webpack concept we’re going to cover is Mode. In the last concept, when you build, you probably noticed the warning:

The issue is that we haven’t told webpack which mode to run in. Modes won’t make sense until we delve into environments. You have probably already come across the idea of environments in code projects, or at least heard mention of a “development” or “prod” environment. But in order to use webpack to its true potential, we have to fully understand these concepts.

Production vs. Development Environments
Developers refer to the various “states” of a website as environments. When we are developing a website, we call it the development environment - we run the server on localhost and use tools that are specifically convenient for us as developers. On the other hand, there is a production environment, which is our code on a server and where we can tune every tool and file for optimal efficiency, thereby giving our users the best experience when they use the webpage. There can be many environments for a project, like a testing environment or review environment, but we are going to focus on development and production for now.

There are lots of tools that aim to make writing code easier for developers. One of these tools, called “sass”, we will cover in a future lesson, but for now just know that it is css with some developer friendly syntax and features. It’s great that we have tools that make development easier, but if you take sass as an example - we can’t run sass on a server. All our sass files have to be run through a transpiler in order to become css that can go on a live webpage. No matter how awesome a development tool is, in the end our code will be judged by how well it runs on a server, and oftentimes what is best for the server is the opposite of what is convenient for developers. So how do we handle both of these environments? By utilizing build tools, we can make code that is convenient for our dev team, without sacrificing speed on the server.

One of the awesome features of webpack, is that it lets us apply configurations to our code based on the environment we are running. We can create a development environment (MODE in webpack) and run totally different loaders and plugins than we do for production mode.

Now we have learned the second part of why we use build tools. First, we learned that build tools allow devs to use the tools that are more convenient for them. The other side of that coin is that build tools simultaneously allow devs to optimize code for the server. Build tools like Webpack are one tool we can use to help us with organization in all environments. If that doesn’t fully make sense now, don’t worry too much, it will become more clear as we go along.

You can see that a lot of times, what is best for developers is the opposite of what is most efficient for the server. Webpack helps us have the best of both worlds.

Changes proposed for the Configuration Files
1. Create a copy of the webpack.config.js, and rename it as webpack.prod.js. This file should have mode: 'production' statement in module.exports.
2. Now, rename the webpack.config.js to webpack.dev.js. This file should have the following statements in module.exports

mode: 'development',
devtool: 'source-map',

Changes proposed for package.json
The statements added to the package.json for the configuration files of production and development modes separately in the "script" block are:

"scripts": {
    "build-prod": "webpack --config webpack.prod.js",
    "build-dev": "webpack --config webpack.dev.js --open"
},
Note that you should remove the "build": "webpack" script now from package.json, and only have the two related to build-dev and build-prod. This also means when you build your app with npm, you should use the correct script, e.g.

npm run build-dev
Note: Some students are facing dependency issues, if you are facing such issues, we would suggest you to modify the version of html plugin in package.json to "html-webpack-plugin": "^3.2.0" and then install the packages again npm i. Now you can run npm run build and the dist folder will be generated again.

Mode Quiz
Which environment is concerned with what happens on a server?

production


Quiz Question
￼
Select the following webpack loaders and plugins that you would expect to find in development mode and not in production mode
Linters
A source map mode for debugging
￼
Quiz Question
Which environment has the most direct effect on users?
Production


Interview Question
Would you minify files for development or production? Why?

production, so it can be tranfer as minimal time as possible to client/browser so the response is quick!





5.2.15 Ex 5: Mode
---------------------------------------
Exercise: Mode
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Mode Tasklist
Your turn!
x Experiment with setting the mode in the webpack script when you run it
x Observe the dist folder output
x Create a prod config file
x Update your npm scripts
x Git commit

Note: Some students are facing dependency issues, if you are facing such issues, we would suggest you to modify the version of html plugin in package.json to "html-webpack-plugin": "^4.5.1" and then install the packages again npm i. Now you can run npm run build and the dist folder will be generated again.


Exercise: Mode
Here, you'll get to compare production vs. development builds. Start by cding into webpack-content.

Experiment with setting the mode in the webpack script when you run it
￼HIDE SOLUTION
One potential mode here would be:

￼
mode: 'production'
Observe the dist folder output
Create a prod config file
Change your webpack config file to be a webpack dev file
Update your npm scripts
￼HIDE SOLUTION
In package.json (make sure to open with the Editor), add the following scripts:

￼
"build-prod": "webpack --config webpack.prod.js",
"build-dev": "webpack --config webpack.dev.js"
Note that you should remove the build script now from package.json, and only have the two related to build-dev and build-prod. This also means when you build your app with npm, you should use the correct script, e.g. npm run build-dev.

Need to try viewing the app? Use these to view or stop the app.



5.2.16 Convenience in Webpack
---------------------------------------
Congratulations!
We have made our tedious way through all of the webpack concepts. Now we get to actually make things awesome.

As you probably noted during this lesson so far, there are some things about the process we have now that aren’t exactly smooth. Overall, I wouldn’t call our set up a good dev experience and we don’t have production set up at all. It is functional, and that’s about it. But the whole point of using all these tools is to make our lives easier. So...what’s going wrong? Let’s use what we’ve learned to make some improvements.

Switch the Git Branch
If you wish to practice the steps mentioned in the video demonstration below, use the 5-webpack-mode branch.

Else, you can switch to the branch 6-webpack-for-convenience corresponding to the current exercise where all the steps have already been carried out.

git checkout 6-webpack-for-convenience

Install Webpack Dev Server
It helps in live reloading of the page, only for Development mode, and automatically re-builds the application.

Up next, have you noticed how we often have to remove the dist folder manually before re-running the build script? From what I have seen, when you rebuild, new code will be added to the bundled files, but if there was old code that you got rid of, webpack build does not remove the old stuff. So, we have been removing the dist folder via the terminal and before rebuilding.

Really though, that is an extra and unnecessary step. If we wanted to go really low tech, we could just edit our build script:

rm -rf dist && webpack-dev-server  --config webpack.dev.js --open

And there’s really nothing wrong with that. Honestly, being comfortable customizing your npm scripts will make so many things easier. But, it is doing a little bit of extra work. That script blindly deletes everything and then rebuilds it, even if 99% of the code remained the same.

To be a little more efficient, there is a webpack plugin called Clean. From its documentation:

By default, this plugin will remove all files inside webpack's output.path directory, as well as all unused webpack assets after every successful rebuild.

Now, some people will choose to go with the simpler blanket dist folder delete, but just to try it, lets install the clean plugin.

npm i -D clean-webpack-plugin

Then, as we learned before, to make webpack use a plugin, we have to do two things:

Add a require statement to the top of the webpack config file:

const { CleanWebpackPlugin } = require('clean-webpack-plugin');

Add the plugin to Plugins array in the module.exports. The clean plugin is a good example of a plugin that allows for various options. Take a look at this:

We could use CleanWebpackPlugin like this:

   new CleanWebpackPlugin()

 And the above would function. When there are no options passed in, a plugin will run all the default settings, but we can also pass in our custom selections of the various plugin options, like this:

     new CleanWebpackPlugin({
                // Simulate the removal of files
                dry: true,
                // Write Logs to Console
                verbose: true,
                // Automatically remove all unused webpack assets on rebuild
                cleanStaleWebpackAssets: true,
                protectWebpackAssets: false
        })

You can’t know what options a plugin allows without reading the documentation for that plugin.

Add that code to your wepack.dev.js file and rerun the build script, now you’ll see a few lines added to the webpack output that tell you the clean plugin is functioning.

Note: If facing dependency issue, install: npm i -D clean-webpack-plugin@^3.0.0

Quiz
What do you think are the most time-saving developer tools for you? Which tools do you absolutely want in a development environment, or which could you do without?

Your reflection
depend on which language and/or product you develop, if it is front end, vscode and chrome devtools, if it is java, eclipse ide.

Interview Question
You start work on a project with webpack already installed, but there is no specific build for production. Walk me through the steps of setting up a production environment in webpack


Interview Question
You start work on a project with webpack already installed, but there is no specific build for production. Walk me through the steps of setting up a production environment in webpack
webpack.prod.js
with mode: 'produciton'

change in package.json in scripts section, add the following:
"scripts": {
    "build-prod": "webpack --config webpack.prod.js",
},





5.2.17 Ex 6: Convenience
---------------------------------------
Ex 6: Convenience
Exercise: Convenience
If you are using the classroom workspace, you do not need to use the tasklist below - it’s here to help those working on their local machines. The same instructions are included in the workspace, so you should click “Expand” on the bottom left to be able to use your full screen.

Exercise: Convenience Tasklist
Now it’s time to get some more practice.

x Install the webpack dev server

    npm i -D webpack-dev-server
￼
x Edit the build-dev npm script to use webpack-dev-server, it should look like this:

    webpack-dev-server --config webpack.dev.js --open
￼
x Next, implement one of the following:

    * Clean Webpack plugin
    * Source Maps
￼
Exercise: Convenience Optional Tasklist
If you feel comfortable with the things we’ve learned so far, I highly recommend you try out this fun Bundle Analyzer. It will give you a graphical representation of all the bundles in your code. We’ve done enough hand holding, so try this one on your own!

x Installation instructions can be found here.
x You’ve been successful when you can generate the webpage that shows you all your bundles!

Exercise: Convenience¶
Now, let's check out webpack-dev-server. Start by cding into webpack-content.

Install the webpack dev server
￼HIDE SOLUTION
npm i -D webpack-dev-server

Edit the build-dev npm script to use webpack-dev-server
￼HIDE SOLUTION
In package.json, the script for "build-dev" should now look like this:

￼
webpack-dev-server --config webpack.dev.js --open
Next, implement one of the following:
Clean Webpack plugin
Source Maps
Note: The classroom unfortunately does not support the --open flag with the webpack-dev-server. However, if your terminal notes that npm run build-dev has compiled successfully, open a new terminal (File...New...Terminal) with the first terminal still running, and use:

￼
curl localhost:3000
You should be able to see the HTML from your app from there.


Troubleshooting:

For dependency issues, follow the given versions for installation:

npm i -D webpack-dev-server@^3.7.2
npm i -D clean-webpack-plugin@^3.0.0



5.2.18 Conclusion
---------------------------------------
Summary
Webpack Entry: Webpack is going to make a map of our app assets and all of their dependencies, but it needs somewhere to start. That entry point is Webpack entry.

Loaders: Loaders allow us to transform files of one type into another type so that Webpack can work with them

Plugins: While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management, and injection of environment variables.

Mode: One of the awesome features of Webpack, is that it lets us apply configurations to our code based on the environment we are running. We can create a development environment (MODE in Webpack) and run totally different loaders and plugins than we do for production mode

Additional Resources
If you want to go further with webpack, check out these topics next:

1. Multiple entry points with webpack
   https://github.com/webpack/webpack/tree/main/examples/multiple-entry-points
2. Using webpack to be more efficient with your styles and assets
   https://www.jonathancreamer.com/advanced-webpack-part-1-the-commonschunk-plugin/
3. Cache busting with webpack
   https://webpack.js.org/guides/caching/



