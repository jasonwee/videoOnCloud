

5.3.1 Sass Basics
---------------------------------------

Lesson Objectives
In this lesson, we will learn about a CSS extension language - Sass, and how it can be used in conjunction with webpack. Sass provides an extra set of CSS language syntax that helps writing more efficient styles. The objectives are:

1. Explain the basics of Sass, and introduce the important features
2. Describe more about the features - nesting, variables, ampersand
3. Learn to use Sass with webpack

Introduction
The two of the famous CSS extension languages are:

1. Sass - Note that these files have an extension as .scss
2. Less - It has .less as file extension

We are going to learn about Sass in this lesson.

When a developer writes a .scss file, there is a problem. Browsers don’t know what Sass is, they don’t run Sass, they run CSS. Sass transpiles to CSS - or in more common english - Sass can be directly translated to CSS. Anything you write in Sass can be written in 100% pure CSS, they are equivalent to each other, but the Sass syntax is going to be much shorter and easier to write than the CSS.

Sass now comes with some of its own tools to run that translation process to create CSS, but since we’re using webpack anyway, we’re going to leverage webpack to do that job.

Quiz Question
￼
From what you have learned of webpack loaders and plugins, which one do you think we will need to turn our .scss files into .css files?
A Loader

Quiz
Do you have any previous experience with sass?
yes, a little


Quiz Question
CSS is valid Sass and Sass can be transpiled to pure CSS￼
True

Interview Question
Name two or three reasons developers often prefer to work with sass or less over vanilla css.
class/id naming conflict, easier separate scss for each html

Sass Tutorial Resource
Learning sass is worth every minute of your time as you hone your front end developer skills. These days it is pretty much required knowledge and it could be a whole course of its own. Unfortunately, this course is jam-packed enough as it is so we aren’t going to spend much time here. On the bright side, the sass website has a good tutorial that will take you through all the basics. In the next few sections, I’ll highlight three of the concepts I think are most important to learn about sass.

Again, we strongly recommend you to give it some time to read through the preprocessing, variables, nesting, modules, inheritance, and operators, from the link above.



5.3.2 Sass Nesting
---------------------------------------
Sass Nesting
Nesting is one of the key features of Sass. HTML elements are nested, and so CSS is nested by nature, but that isn't reflected in CSS syntax. Sass allows you to write styles for nested elements in a much more intuitive way. Writing nested sass can mean that you don't have to create nearly as many individual classes, which can save a lot of time and markup. Not only that, but you are much more likely to be able to edit styles by only touching the CSS file, without having to go back and forth between the HTML and CSS. As a rule of thumb though, if you find yourself nesting more than three levels deep, it’s probably time for a new class.

Nesting Example
Take a look at these examples of nesting:

nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

The code above, when translated to css, would become:

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

I chose this feature as one of the core things to know about sass because it is probably the single feature that most impacts your ability to write compact and efficient styles.

GitHub Repository for the Current Lesson
In this lesson, we have once again provided in-classroom workspaces for you to use.

Otherwise, if you wish to work on your local machine, the current lesson and the next one uses the same Git repository. You can fork and then clone this Git repo. https://github.com/udacity/fend-webpack-sass You can even continue from your work in the previous lesson.

git clone https://github.com/<Github_Username>/fend-webpack-sass.git
cd fend-webpack-sass/
Once again, the different branches are the different steps at each exercise - make sure to use the branch before the current exercise (if you aren’t continuing from your own code), as the branch for each exercise contains the related solution code.

Current exercise can be carried out on 0-initial-setup branch.

git checkout 0-initial-setup
git branch
Don't forget to install the dependencies from package.json by running npm install on your terminal.

Exercise
Go to the path fend-webpack-sass/src/client/styles/, you'll find four .css files and a resets.scss file. Convert all the .css file extensions to .scss, and leave the content all the same. CSS is valid Sass!

Quiz: Sass vs. CSS
What css would be generated by the following sass code?

section.hero {
    width: 100vw;
    height: 60vh;
    display: flex;
    justify-content: center;
    align-items: center;

    img {
         background-image: url('mybg.jpeg');
         background-size: cover;
    }

    h1, h3 {
         font-family: 'cool font', sans-serif;
    }
}

Option 4
section.hero {
   width: 100vw;
    height: 60vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

section.hero img  {
    background-image: url('mybg.jpeg');
    background-size: cover;
}

section.hero h1,  section.hero h3 {
    font-family: 'cool font', sans-serif;
}

Quiz Question
￼
Select one of the following options that correlates to the options listed above.
Option 4


Interview Question
Explain sass nesting syntax and its advantages over vanilla css.

Your reflection
more intuitive, dont have to remember css specific syntax

￼
Things to think about
If you need help remembering some of the main points, go back to video for this section. Some quick points are:

Fewer classes required Shorter stylesheets




