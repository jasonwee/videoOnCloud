

3.3.1 Introduction
---------------------------------------
Need to Know
To be successful in this section, there are a couple of things from the previous section that you need to know. You need to have a solid grasp of selecting DOM elements using:

* document.getElementById()
* document.querySelector()

Also, remember the Node Interface and the Element interface we went over in the previous section? Understanding how an interface determines the properties and methods for an element and understanding how to research an interface's properties and methods will be vital in this lesson.

If you get stuck, just jump back to the previous section that's giving you a bit of trouble.

Project Repository
Throughout this course, you'll learn skills and techniques to access and modify page content. There's no better way to demonstrate these skills than through trying them out on a real website! So I've created a copy of just the Udacity homepage on GitHub - https://github.com/udacity/course-JS-and-the-DOM. You can call this as a remote repository. Now, you can do either of the following:

* Clone the remote repository to your local machine so that you can follow along. To clone, you can use git clone https://github.com/udacity/course-JS-and-the-DOM command on your terminal. When you clone a remote repository, you get an identical copy locally, where you can make desired changes.
* Fork the remote repository to your own online account. When you fork a remote repository, a new duplicate copy of the remote repository is created in your account.

A detailed course on Git & GitHub is available in the extracurricular section of this nano-degree.

Check off tasks as you complete them
* I have cloned the project
* I understand that this project is just the index page of the Udacity site.
* I understand that the code in this repo is not representative of how Udacity builds its site. ;-)



3.3.2 Update Existing Page Content
---------------------------------------
Let's jump right into it. Open up the project in your browser. There's only one HTML file (index.html) so this is what it should look like after you open it:

💡Project Code 💡
Instructions and a walkthrough of the project were in the previous section. You can clone the project from the GitHub link below. Look back at the previous section to see detailed information about the project and a walkthrough video.

Project repository: https://github.com/udacity/course-JS-and-the-DOM

The `index.html` serves as a starter template for you to get started. There might be a slight mismatch between the actual content of `index.html` file downloaded from GitHub vs. the one shown in the demo. However, the mismatch would not block you from practicing the classroom instructions.

Write the DOM code necessary to select the first element with class: card

document.querySelector('.card')

Let's store the first .card element in a variable for easy access:

const nanodegreeCard = document.querySelector('.card');
Now that we've stored the first card element in the nanodegreeCard variable, we can use nanodegreeCard to refer to this element instead of having to use document.querySelector('.card') to select the element every time we need access to it.


An Element's Inner HTML

Every element inherits properties and methods from the Element Interface (remember this from the previous lesson!). This means that every element has an .innerHTML property. This property, as it's rightly named, represents the markup of the element's content. We can use this property to:

* get an element's (and all of its descendants!) HTML content
* set an element's HTML content

Quiz Question
￼
What is .innerHTML?

a property


Quiz Question
￼
What does .innerHTML return?
￼
a string


💡 Innie vs Outie 💡
The .innerHTML property sets or returns the HTML content inside the selected element (i.e. between the tags).

There's also the rarely used .outerHTML property. .outerHTML represents the HTML element itself, as well as its children.

<h1 id="pick-me">Greetings To <span>All</span>!</h1>

const innerResults = document.querySelector('#pick-me').innerHTML;
console.log(innerResults); // logs the string: "Greetings To <span>All</span>!"

const outerResults = document.querySelector('#pick-me').outerHTML;
console.log(outerResults); // logs the string: "<h1 id="pick-me">Greetings To <span>All</span>!</h1>"

An Element's Text Content
So .innerHTML will get/set an element's HTML content. If we just want the text content, we can use the fantastically named .textContent property!

The .textContent property will:

* set the text content of an element and all its descendants
* return the text content of an element and all its descendants

Let's check it out!

Check out the .textContent's documentation page on MDN: textContent docs

Setting an element's text content is easy, just set it like you would any other property:

nanodegreeCard.textContent = "I will be the updated text for the nanodegreeCard element!";

Quiz Question
￼
<h1 id="test">Ice Cream Flavors</h1>
Given the HTML above, what will be the .textContent value after running this code:

const myElement = document.querySelector('#test');
myElement.textContent = 'The <strong>Greatest</strong> Ice Cream Flavors';

The < strong >Greatest</ strong > Ice Cream Flavors

We just saw that passing text that contains HTML characters to .textContent will not display the content as HTML. Instead, it will still display everything as text - even the HTML characters!

If you'd like to update an element, including its HTML, then you need to use the .innerHTML property:

myElement.textContent = 'The <strong>Greatest</strong> Ice Cream Flavors'; // doesn't work as expected

myElement.innerHTML = 'The <strong>Greatest</strong> Ice Cream Flavors';  // works as expected

An Element's Text Content - Version 2!
We can't close this section out without looking at the .innerText property!

Like the .textContent property, the .innerText property can be used to get/set an element's text content, but there are some important differences between the two properties.

.textContent sets/gets the text content of an element...pretty clear and simple.

.innerText, on the other hand, is a little tricker. Let's see this in action and then we'll discuss it!

As you saw, .innerText will get the visible text of the element. This is an important distinction! If CSS is used to hide any text inside that element, .innerText will not return that text, while .textContent will return it. And it's not just the hiding/showing nature of CSS that .innerText adheres to, .innerText will also honor changes to things like capitalization.

The .textContent property has been a standard for quite a long time. Conversely, .innerText property is a relatively new addition to the HTML specification. It has been around for a while but was not fully supported by all browsers because it was not a part of the HTML specification.

Between .textContent and .innerText, you probably want to use .textContent since that will return all of the text no matter what. Rarely will you actually want only the visible text.

Update Existing Content Recap
In this section, we looked at multiple ways to change page content:

* .innerHTML
* .textContent
* .innerText

We saw that to set HTML content for an element, out of the three properties list above, we can only use .innerHTML. Using .textContent will erroneously include the HTML characters as plain text inside the element.

We also looked at the difference between .textContent and .innerText. .textContent completely ignores any CSS styling and returns all of the element's HTML just as it's listed in the HTML. On the other hand, the .innerText property will take CSS styling into consideration and will return the text that is visibly rendered on the page.

Further Research
* innerHTML on MDN
* textContent on MDN
* innerText on MDN
* Article: The poor, misunderstood innerText
* Article: innertext vs. textcontent
￼

￼
3.3.3 Add New Page Content
---------------------------------------
Quiz Question
￼
You've learned about the document object, the Node Interface, and the Element interface. Where does .createElement() come from?

the document object


What is the URL for the "createElement" page on MDN?

https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement￼


Quiz Question
￼
Which of the following would create a new paragraph element?

document.createElement('p');
￼

As you've already discovered, the .createElement() method is a method on the document object:

// creates and returns a <span> element
document.createElement('span');

// creates and returns an <h3> element
document.createElement('h3');
Here's the .createElement() documentation page on MDN: createElement docs

Adding Content To The Page

You may have noticed that using document.createElement() to create an element didn't actually add that newly created element anywhere on the page! Creating an element...just creates it. It doesn't add it to the DOM. Since the element isn't added to the DOM, it doesn't appear in the page (if you remember, the DOM is the parsed representation of the page). So, now that we can create brand new elements, we need to be able to add them to the DOM so that they'll show up on the page.

We can use the .appendChild() method to add an element to the page! Before we see how this element works, let's quickly define the word "append". There are several different definitions of the word, but I like the wording of the Cambridge Dictionary's the best:

to add something to the end of a piece of writing

definition of the word "append" (source)

Now, to use the .appendChild() method, it needs to be called on another element, not the document object!

// create a brand new <span> element
const newSpan = document.createElement('span');

// select the first (main) heading of the page
const mainHeading = document.querySelector('h1');

// add the <span> element as the last child element of the main heading
mainHeading.appendChild(newSpan);

I like the Cambridge Dictionary's version because it clearly states how the content is added at the end. The .appendChild() method is called on one element, and is passed the element to append. The element that is about to be appended is added as the last child. So, in the example above, the <span> element will appear in the DOM as a child of the <h1>...but it will appear at the end, after all text and any other elements that might be in the <h1>.

Here's the .appendChild() documentation page on MDN: [appendChild docs)(https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)

⚠️ .appendChild() Needs An Element! ⚠️
This is stated above, but I wanted to call this out, specifically. When you're using the .appendChild() method, it must be called on an existing element. To be clear, you can't call this on the document object, so the following will result in an error:

const newSpan = document.createElement('span');

// causes an error
document.appendChild(newSpan);

Creating Text Nodes

Just like you created new elements with the .createElement() method, you can also create new text nodes using the .createTextNode() method. Take a look at the following code that:

* creates a paragraph element
* creates a text node
* appends the text node to the paragraph
* appends the paragraph to the tag

const myPara = document.createElement('p');
const textOfParagraph = document.createTextNode('I am the text for the paragraph!');

myPara.appendChild(textOfParagraph);
document.body.appendChild(myPara);

However, since you already know about the .textContent property, the code below will provide the exact same result:

const myPara = document.createElement('p');

myPara.textContent = 'I am the text for the paragraph!';
document.body.appendChild(myPara);

Therefore, instead of creating a new text node and appending it to an element, it's faster and easier to just update the element's text with the .textContent property.

For more info, check out the documentation: createTextNode() docs

Quiz Question
￼
What happens after running this code?

const mainHeading = document.querySelector('#main-heading');
const otherHeading = document.querySelector('#other-heading');
const excitedText = document.createElement('span');

excitedText.textContent = '!!!';
mainHeading.appendChild(excitedText);
otherHeading.appendChild(excitedText);
Don't guess it, test it! This one might surprise you!
￼
only otherHeading has three exclamation marks

Inserting HTML In Other Locations

By definition, the .appendChild() method will add an element as the last child of the parent element. It's impossible to put it as the first child or anywhere else...it has to be the last child. Wouldn't it be nice if there were a little flexibility in where we could add the child element?

Enter the .insertAdjacentHTML() method! The .insertAdjacentHTML() method has to be called with two arguments:

* the location of the HTML
* the HTML text that is going to be inserted

The first argument to this method will let us insert the new HTML in one of four different locations

* beforebegin – inserts the HTML text as a previous sibling
* afterbegin – inserts the HTML text as the first child
* beforeend – inserts the HTML text as the last child
* afterend – inserts the HTML text as a following sibling

A visual example works best, and MDN's documentation has a fantastic example that I'll modify slightly:

<!-- beforebegin -->
<p>
    <!-- afterbegin -->
    Existing text/HTML content
    <!-- beforeend -->
</p>
<!-- afterend -->

Here's how we'd call .insertAdjacentHTML():

const mainHeading = document.querySelector('#main-heading');
const htmlTextToAdd = '<h2>Skydiving is fun!</h2>';

mainHeading.insertAdjacentHTML('afterend', htmlTextToAdd);

Check out the documentation page for more information: insertAdjacentHTML docs

At 0:22 seconds, the instructor says "... this has to be text, not HTML. If you pass HTML, then that HTML will actually be displayed". There is a correction:

The second argument text of insertAdjacentHTML() method parses the specified text as HTML and inserts the resulting nodes into the DOM tree at a specified position.

Add New Page Content Recap

In this section, we learned how to create new DOM elements and add them to the page. We looked at the following methods:

* .createElement() to create new elements
* .appendChild() to add a child element to a parent element as its last child
* .createTextNode() to create a text node
* .insertAdjacentHTML() to put HTML text anywhere around an element

Some important things to note are:

* if an element already exists in the DOM and this element is passed to .appendChild(), the .appendChild() method will move it rather than duplicating it
* an element's .textContent property is used more often than creating a text node with the .createTextNode() method
* the .insertAdjacentHTML() method's second argument has to be text, you can't pass an element

Further Research
* createElement on MDN
* createTextNode on MDN
* appendChild on MDN
* insertAdjacentHTML on MDN



3.3.4 remove Page Content
---------------------------------------
What's in store!
In this quick section, you're going to learn how to remove content from the page. Specifically, we'll look at these new methods:

* .removeChild()
* .remove()

In the process, you'll also learn about these two properties:

* .firstElementChild
* .parentElement

Removing a Child Element
We can use the .removeChild() method to...wait for it...remove a child element. Basically, this is exactly the opposite of the .appendChild() method. So just like the .appendChild() method, the .removeChild() method requires:

* a parent element
* the child element that will be removed

<parent-element>.removeChild(<child-to-remove>);

Here's the .removeChild() documentation page on MDN: removeChild docs

Let's see how to use this method:

A drawback (and workaround!) with the .removeChild() Method

Just like the .appendChild() method, there's a (somewhat minor) drawback to the .removeChild() method. Both methods:

* require access to parent to function

However, we don't actually need to have the parent element because there is a workaround! Just like the .firstElementChild property can be called on a parent element to access its first element, every element also has a parentElement property that refers to its parent! So if we have access to the child element that we're about to add or remove, you can use the parentElement property to "move focus" to the element's parent. Then we can call .removeChild() (or .appendChild()) on that referenced parent element.

Let's look at an example:

const mainHeading = document.querySelector('h1');

mainHeading.parentElement.removeChild(mainHeading);

Let's walk through this code.

const mainHeading = document.querySelector('h1');

The preceding code will select the first <h1> on the page and stores it in the mainHeading variable. Now to the next line:

mainHeading.parentElement.removeChild(mainHeading);

This starts with the mainHeading variable. It calls .parentElement, so the focus of the next code is directed at the parent element. Then .removeChild() is called on the parent element. Finally, mainHeading itself is passed as the element that needs to be removed from its parent.

So an element uses itself to remove itself from its parent. Pretty cool, huh?

Removing a Child Element (Part 2!)
We went through all of those steps selecting an element, using DOM traversal techniques like .parentElement and .firstElementChild, so that we can remove a child element. I showed you this way so that you can get some exposure and practice to moving around in the DOM.

Now, you might be glad (or frustrated! haha) to find out there's an easier way to do all this! We can remove the child element directly with the .remove() method:

const mainHeading = document.querySelector('h1');

mainHeading.remove();

Here's the .remove() documentation page on MDN: .remove() docs

Remove Page Content Recap
In this short section, we learned two ways to remove an element from the page. You learned about:

* .removeChild()
* .remove()

The difference is that with .removeChild() must be called on the parent of the element being removed and must be passed the child to be removed, while .remove() can be called directly on the element to delete.

We also learned about the following helpful properties:

* .firstChild
* .firstElementChild
* .parentElement

The difference between .firstChild and .firstElementChild, is that .firstElementChild will always return the first element, while .firstChild might return whitespace (if there is any) to preserve the formatting of the underlying HTML source code.

Further Research
* removeChild on MDN
* remove on MDN
* firstChild on MDN
* firstElementChild on MDN
* parentElement on MDN



3.3.5 Style Page Content
---------------------------------------

In this section, we'll be looking at controlling page and element styling using the following properties and methods:

* .style.<prop>
* .cssText
* .setAttribute()
* .className
* .classList

Quiz Question

Before we begin, put these in the correct order of CSS specificity. Put the least-specific option at the top and the most-specific option at the bottom.

Level of Specificity       CSS Rule
Least specific             rules in a stylesheet
More specific              rules in a <style> tag
Most specific              rules in a tag's style attribute

CSS Specificity

To be successful in this section, it will help to have an understanding of how CSS Specificity works. According to the MDN, "specificity" is:

the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied.

Basically, the closer the style rule is to an element, the more specific it is. For example, a rule in a style attribute on an element will override a style rule for that element in a CSS stylesheet. There is also the specificity of the type of selector being used. An ID is more specific than a class.

If you'd like to learn more about CSS Specificity, check out the following links:

* Specificity on MDN

Modifying an Element's Style Attribute

Let's jump back to your knowledge of CSS. When trying to style an element, the most-specific rules that you can write for an element are written in that element's style attribute. Lucky for us, we can access an element's style attribute using the .style property!

const mainHeading = document.querySelector('h1');

mainHeading.style.color = 'red';

Now, I want to point out that when using the .style property, you can only modify one CSS style at a time. That's why the previous code has .style.color = 'red' and not just .style = 'red'.

Check out the documentation page for more information: style docs

Reflect

Why do you think it has to be fontSize? Why would font-size not work?
because fontSize is the property of the style in javascript whilst font-size is the property in css.


Reflect

Write the JavaScript code to set the width of element to 50%;
heading.style.width: 50%;


Adding Multiple Styles At Once

We've seen how the .style.<property> syntax will let us change just one piece of styling for an element. So if we wanted to set an element's color, background color, and font size, we'd have to use three separate lines of code:

const mainHeading = document.querySelector('h1');

mainHeading.style.color = 'blue';
mainHeading.style.backgroundColor = 'orange';
mainHeading.style.fontSize = '3.5em';

...and that's just for setting three styles. Imagine if we needed 15 or 20 different styles! So the .style.property syntax is perfect for setting one style at a time, but it's not great for controlling multiple styles.

Fortunately, we can use the .style.cssText property to set multiple CSS styles at once!

const mainHeading = document.querySelector('h1');

mainHeading.style.cssText = 'color: blue; background-color: orange; font-size: 3.5em';

Notice that when using the .style.cssText property, you write the CSS styles just as you would in a stylesheet; so you write font-size rather than fontSize. This is different than using the individual .style.<property> way.

Quiz Question
￼
<p id="quizzing-quizzes" style="color: orange;">Howdy</p>

For the element above, which of the following styles will be applied after running this code?

document.querySelector('#quizzing-quizzes').style.cssText = 'width: 30px; textDecoration: underline;';

width

Setting An Element's Attributes

Another way to set styles for an element is to bypass the .style.<property> and .style.cssText properties altogether and use the .setAttribute() method:

const mainHeading = document.querySelector('h1');

mainHeading.setAttribute('style', 'color: blue; background-color: orange; font-size: 3.5em;');

Check out the documentation page for more information: style docs

.setAttribute() Is Not Just For Styling

The setAttribute() method is not just for styling page elements. You can use this method to set any attribute for an element. If you want to give an element an ID, you can do that!:

const mainHeading = document.querySelector('h1');

// add an ID to the heading's sibling element
mainHeading.nextElementSibling.setAttribute('id', 'heading-sibling');

// use the newly added ID to access that element
document.querySelector('#heading-sibling').style.backgroundColor = 'red';

The last two lines could've been combined into one to bypass setting an ID and just styling the element directly:

mainHeading.nextElementSibling.style.backgroundColor = 'red';

...but this was just to demonstrate that it's possible to set an attribute with JavaScript that affects the DOM which then can be used immediately

Accessing an Element's Classes
The first element property we'll look at is the .className property. This property returns a string of all of the element's classes. If an element has the following HTML:

<h1 id="main-heading" class="ank-student jpk-modal">Learn Web Development at Udacity</h1>


We could use .className to access the list of classes:

const mainHeading = document.querySelector('#main-heading');

// store the list of classes in a variable
const listOfClasses = mainHeading.className;

// logs out the string "ank-student jpk-modal"
console.log(listOfClasses);

The .className property returns a space-separated string of the classes. This isn't the most ideal format, unfortunately. We can, however, convert this space-separated string into an array using the JavaScript string method, .split():

const arrayOfClasses = listOfClasses.split(' ');

// logs out the array of strings ["ank-student", "jpk-modal"]
console.log(arrayOfClasses);

Now that we have an array of classes, we can do any data-intensive calculations:

* use a for loop to loop through the list of class names
* use .push() to add an item to the list
* use .pop() to remove an item from the list

.className is a property, so we can set its value just by assigning a string to the property:

mainHeading.className = "im-the-new-class";

The above code erases any classes that were originally in the element's class attribute and replaces it with the single class im-the-new-class.

Since .className returns a string, it makes it hard to add or remove individual classes. As I mentioned earlier, we can convert the string to an array and then use different Array Methods to search for a class remove it from the list, and then update the .className with the remaining classes. However, we don't want to do all of that work! Let's use the newer .classList property.

The .classList Property

The .classList property is newer than the .className property, but is much nicer, check it out:

<h1 id="main-heading" class="ank-student jpk-modal">Learn Web Development at Udacity</h1>

const mainHeading = document.querySelector('#main-heading');

// store the list of classes in a variable
const listOfClasses = mainHeading.classList;

// logs out ["ank-student", "jpk-modal"]
console.log(listOfClasses);

Check out the documentation page on MDN: classList docs

Quiz Question
￼
Review the classList property's documentation. What data structure does the .classList property return?

a DOMTokenList

The .classList property has a number of properties of its own. Some of the most popularly used ones are:

* .add() - to add a class to the list
* .remove() - to remove a class from the list
* .toggle() - to add the class if it doesn't exists or remove it from the list if it does already exist
* .contains() - returns a boolean based on if the class exists in the list or not

Let's take a look!

Quiz Question
￼
What happens if you try to toggle a nonexistent class? For example, if you had this HTML:

<h1 id="main-heading" class="ank-student jpk-modal">Learn Web Development at Udacity</h1>

...what would happen after running the following JavaScript:

const mainHeading = document.querySelector('#main-heading');

mainHeading.classList.toggle('richard');

the richard class is added to the list of classes


Style Page Content Recap
We learned a ton of content in this section! We looked at:

* modifying individual styles with .style.<prop>
* updating multiple styles at once with .style.cssText
* getting/setting a list of classes with .className
* getting/setting/toggling CSS classes with .classList

My recommendation to you is that, out of the list of techniques you learned in this section, to use the .classList property more than any other. .classList is by far the most helpful property of the bunch, and it helps to keep your CSS styling out of your JavaScript code.

Further Research
* style on MDN
* Article: Using dynamic styling information
* DOM methods to control styling
* nextElementSibling on MDN
* className on MDN
* classList on MDN
* Specificity on MDN




