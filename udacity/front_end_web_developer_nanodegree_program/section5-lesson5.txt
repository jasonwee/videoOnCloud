

5.5.1 Introduction
---------------------------------------
Introduction

Project Motivation

The motive of this project is to have you a taste of the environment and tools you will most likely come across in a front end role. Your focus should be to understand the role every tool and technology is playing in the overall architecture. You shouldn’t feel the need to memorize the particular commands, config setups, or structure that we create here. Every project in the industry will have its own custom setup, but if you understand the moving pieces, you will be able to get the gist of even far more complicated projects than this one.

Project Introduction - What You Will Build
We will build a web tool that allows users to run Natural Language Processing (NLP) on articles or blogs found on other websites. NLP is the ability of an application to understand the human language, written or oral.

You don't have to worry about NLP, because we will make use of an external api called Aylien to interact with their NLP system. This tool will help us classify the information available in the article, like whether the content is subjective (opinion) or objective (fact-based) and whether it is positive, neutral, or negative in tone.

Following are the project prerequisites:
* Webserver - Node
* Web application framework for routing - Express
* Build tool - Webpack. Using webpack, we will set up the app to have dev and prod environments, each with their own set of tools and commands.
* External script - Service Worker
* External API - Aylien

Introduction to Natural Language Processing
NLP is a subset of AI that provides computers ability to process or interact with natural human speech. In NLP, machine learning and deep learning are used on massive amounts of data to obtain the rules and understanding of nuance in human speech.

NLP on Human Voice
For example, everyone who has used Alexa or Google Assistant or other voice command systems knows that these devices are always improving, by collecting and interpreting voice data. Verbal interactions can be incredibly hard to decipher. Sarcasm, for instance, requires understanding not just words and grammar but the tone as well, and regional accents and ways of saying things have to be taken into account, not to mention coverage for all the major languages.

NLP on Text
An example is Grammarly editing tool, which parses the text that you write, and suggests if the tone is professional or not. Another example is the Smart Compose feature for Gmail that uses NLP to suggest words and statements based on your current context.

It requires a vast amount of knowledge from machine learning, deep learning, AI, statistics, and programming to create NLP systems and algorithms. But, thankfully we will use a new API called Aylien, that has put a public-facing API in front of their NLP system. We will use it in our project to determine various attributes of an article or blog post.

Rubric
Your project will be evaluated by a Udacity code reviewer according to the project rubric. Please make sure to re-review the rubric for detailed project requirements prior to submission.

Submission
Once you've met all of the rubric requirements, you can submit your project as either a zip file or a Github repository link.



5.5.2 Instructions Part 1
---------------------------------------

Project Instructions

This Github repository is your starter code for the project. Clone the refresh-2019 branch or download the ZIP file, although feel free to start from scratch! It is the same as the starter code we began with in Lesson 2. Install and configure Webpack just as we did in the course. Feel free to refer to the course repo as you build this one, and remember to make frequent commits and to create and merge branches as necessary!

The goal of this project is to give you practice with:

* Setting up Webpack
* Sass styles
* Webpack Loaders and Plugins
* Creating layouts and page design
* Service workers
* Using APIs and creating requests to external URLs

We have divided the instructions into the following stages, as explained below:

Stage 1 - Getting Started - Setting up the Project
It would be good to first get your basic project up and functioning. Fork the project Github repo, and then clone or download the zip file locally.

Note: Don't forget to fork the repo and then clone the branch "refresh-2019".

Remember that once you clone, you will still need to install everything:

cd <project directory>
npm install

Follow the steps from the course up to Lesson 4, but do not add Service Workers just yet. We won't need the service workers during development, and having extra caches floating around just means there's more potential for confusion.

For reference, here is a brief summary of the steps that you need to follow from the course up to Lesson 4.

1. After npm install, verify if both webpack.dev.js and webpack.prod.js files have:

const path = require("path")
const webpack = require("webpack")
module.exports = { }

Your Webpack installation must be completed by now.

1. Verify, if both the Webpack config files have an entry point:

module.exports =
{
entry: './src/client/index.js'
}

Note: There should be an index.js file in the client folder, if it’s not there you need to create it and add an alert: alert("I EXIST").

1. Now, that the Webpack entry is decided, you need to have babel installed: npm i -D @babel/core@^7.5.4 @babel/preset-env@^7.5.4 babel-loader@^8.0.6

2. Verify if the .babelrc file has:
{
'presets': ['@babel/preset-env']
}

1. Both Webpack config files should have the test for babel-loader. Note: Remove quotes from /.js if they are present here.

2. In the client/index.js file make imports for checkForName and handleSubmit, if they are not present. Don't forget to export these js files.

3. Now let us move to plugins, install the HTML plugin npm i -D html-webpack-plugin@^3.2.0.

4. We need to add the require at the top of your Webpack config files

const HtmlWebPackPlugin = require(‘html-webpack-plugin’)

1. Add a plugins list to the Webpack config and instantiate the plugin

plugins: [
new HtmlWebPackPlugin({
template: "./src/client/views/index.html",
filename: "./index.html",
})
]

1. Update your server file. Change the home route to use the index file from dist:

app.get('/', function (req, res) {
res.sendFile('dist/index.html')
})

1. Update app.use(express.static('src/client')) to app.use(express.static('dist')).
2. Verify if the mode is present in both dev and prod files.
3. Let’s install the clean webpack plugin: npm i -D clean-webpack-plugin@^3.0.0 and add this new plugin to the plugin array as discussed earlier in plugins lessons.
4. Rename all the .css files in client/styles to .scss.
5. Install the sass loaders npm i -D style-loader@^0.23.1 node-sass@^4.14.1 css-loader@^3.6.0 sass-loader@^7.3.1.
6. Add the test case to the rule in webpack.dev.js and prod:

{
test: /.scss$/,
use: [ 'style-loader', 'css-loader', 'sass-loader' ]
}

1. Now, we can import the scss files like this in client/index.js:

import './styles/resets.scss'
import './styles/base.scss'
import './styles/footer.scss'
import './styles/form.scss'
import './styles/header.scss'

Just for your quick reference, we installed the following loaders and plugins so far:

## Choose the necessary installation for your development mode
npm i -D @babel/core @babel/preset-env babel-loader
npm i -D style-loader node-sass css-loader sass-loader
npm i -D clean-webpack-plugin
npm i -D html-webpack-plugin
npm i -D mini-css-extract-plugin
npm i -D optimize-css-assets-webpack-plugin terser-webpack-plugin

Note: If you are facing package compatibility issues, here is a proposed set of packages with their versions. These versions are compatible with each other.

"dependencies": { "dotenv": "^8.2.0", "express": "^4.17.1", "jest-fetch-mock": "^3.0.3", "webpack": "^4.35.3", "webpack-cli": "^3.3.5" }, "devDependencies": { "@babel/core": "^7.13.15", "@babel/plugin-transform-modules-commonjs": "^7.13.8", "@babel/preset-env": "^7.13.15", "babel-loader": "^8.2.2", "body-parser": "^1.19.0", "clean-webpack-plugin": "^3.0.0", "cors": "^2.8.5", "css-loader": "^5.2.1", "html-webpack-plugin": "^3.2.0", "jest": "^26.6.3", "mini-css-extract-plugin": "^1.4.1", "node-fetch": "^2.6.1", "node-sass": "^5.0.0", "optimize-css-assets-webpack-plugin": "^5.0.4", "sass": "^1.32.8", "sass-loader": "^10.1.1", "style-loader": "^2.0.0", "terser-webpack-plugin": "^5.1.1", "webpack-dev-server": "^3.11.2", "workbox-webpack-plugin": "^6.1.5" }

As these versions are not the latest versions, make sure to install them with: bash npm i --legacy-peer-deps



5.5.3 Instructions Part 2
---------------------------------------
Instructions Part 2

Stage 2 - Setting up the API
If you started this project on or before July 7, 2020, you will be using the Aylien API for this project. The Aylien API has you install a node module to run certain commands through. It will simplify the requests we need to make from our node/express backend.

If you started this project after July 7, 2020, you will be using the MeaningCloud Sentiment Analysis API for this project.

The project rubric item for "API" criteria says:

The app should make a successful call to the API on form submission. If this is successful, the API keys and response handling were done correctly. You can check that the API keys are found in server.js or a similar node file. It is not acceptable for an API key to be set in a client-facing file (like index.js)

Information from the API response must show up in the view. It is not enough for the response to be logged to the console or saved in js, etc.

Step 1: Sign up for an API key
For the Aylien API: You will need to go to the user signup page. Signing up will get you an API key. Don't worry, at the time of this course, the API is free to use up to 1000 requests per day or 333 intensive requests. It is free to check how many requests you have remaining for the day.

For the MeaningCloud API: You can find the API here. Once you create an account with MeaningCloud, you will be given a license key to start using the API. This API does not require an SDK, so you can skip ahead to step 4 in the instructions.

Step 2: Install the SDK (Aylien API only)
Next, you'll need to get the Software Development Kit (SDK) for Node.js. SDK is usually a program that brings together various tools to help you work with a specific technology. For instance, the Aylien SDK brings together a bunch of tools and functions that will make it possible to interface with their API from our server. Aylien SDKs are available for all the major languages and platforms, such as Node, Python, PHP, Go, Ruby, and many others.

Install the SDK in your project, as per the instructions mentioned for Node.js SDK at Text Analysis API Documentation.

Step 3: Require the SDK package (Aylien API only)
Your server/index.js file must have these things:

// Require the Aylien npm package
var aylien = require("aylien_textapi");

Step 4: Environment Variables
Next, in server/index.js, you need to declare your API credentials, which will look something like this:

// You could call it aylienapi, or anything else
var textapi = new aylien({
  application_id: "your-api-id",
  application_key: "your-key"
});

If you are using the MeaningCloud API, the process will look pretty similar to the Aylien API process, but you don’t need to use an application_id.

...But there's a problem with this. We are about to put our personal API keys into a file, but when we push, this file is going to be available PUBLICLY on Github. Private keys, visible publicly, are never a good thing. So, we have to figure out a way to make that not happen.

The way we will do that is with environment variables. Environment variables are pretty much like normal variables in that they have a name and hold value. The environment variables only belong to your local system and won't be visible when you push your code to a different environment like Github. Follow the steps below to configure environment variables:

1. Use npm to install the dotenv package - npm install dotenv This will allow us to use environment variables we set in a new file
2. Create a new .env file in the root of your project.
3. Fill the .env file with your API keys like this:

API_ID=**************************
API_KEY=**************************
    ```

    1. Add this code to the very top of your `server/index.js` file:
    ```
const dotenv = require('dotenv');
dotenv.config();

1. If you want to refer the environment variables, try putting a prefix process.env. in front of the variable name in the server/index.js file, an example might look like this:

console.log(`Your API key is ${process.env.API_KEY}`);


The step above is just to help you understand how to refer an environment variable from your code. In server/index.js, your updated API credential settings should look like this:

// You could call it aylienapi, or anything else
var textapi = new aylien({
   application_id: process.env.API_ID,
   application_key: process.env.API_KEY
});

1. Go to your .gitignore file, in the project root, and add .env. It will make sure that we don't push our environment variables to Github! If you forget this step, all of the work we did to protect our API keys would become pointless.

Step 5: Using the API
We're ready to go! The Aylien API has a lot of different endpoints you can take a look at the Aylien API endpoints. You can see how using the SDK simplifies the requests we need to make. You can also check out the documentation of the MeaningCloud API here. MeaningCloud also has several other APIs, which we won’t be using for this project, but feel free to take a look around if you’re curious!

Now it's up to you to create the various requests and make sure your server is set up appropriately. For example, ensure that the "dependencies" in package.json have a suitable entry for Aylien, such as, "aylien_textapi": "^0.7.0",, where the version may vary with time.

Stage 3 - Project Enhancement
At the current stage, make enhancement in your project code to ensure most of the requirements as mentioned in the project rubric are met. In addition, parse the response body to dynamically fill content on the page.

Only the rubric requirements related to "Offline Functionality" and "Testing" criteria should remain for the next stages.

Stage 4 - Unit Testing using Jest Framework
You must have read the rubric item for "Testing" criteria, that says:

Check that the project has Jest installed, that there is an npm script to run Jest, and that the tests all pass. Every src/client/js file should have at least one test.

Jest is a framework for testing JavaScript projects. We are interested in the unit-testing of our project. The Jest framework provides us the ability to create, and run unit tests. In general, unit testing means to test the functionality of each unit/component of a project. But, in our case, we will write tests for desired functions defined in the src/client/js directory. The tests will check if the functions are behaving expectedly when provided an input. Let's learn to add Jest to your project to handle unit-testing.

How does it work?
1. Install Jest by using npm install --save-dev jest
2. Write the custom JS in your src/client/js directory, responsible for the server, and form submission task. For example, assume that the /src/client/js/formHandler.js file has the following function to be tested:

function handleSubmit(event) {
 event.preventDefault()
 // check what text was put into the form field
 let formText = document.getElementById('name').value
 Client.checkForName(formText)
 console.log("::: Form Submitted :::")
}
export { handleSubmit }

3. You have to ensure that all your custom functions in src/client/js directory can handle error responses if the user input does not match API requirements. You will write tests in <function_name>.test.js or <function_name>.spec.js file, to be present in a __test__ folder. For each functionality, consider writing a separate test file. The __test__ folder should be present in the project directory. In each test file, the general flow of the test block should be:
* Import the js file to test
* Define the input for the function. Note that, to keep it simple, we will not validate the input being provided to the test cases.
* Define the expected output
* Check if the function produces the expected output For the example function shown above, /src/client/js/formHandler/handleSubmit(), you can write a test file testFormHandler.spec.js in the __test__ directory, having a test block as:

// Import the js file to test
import { handleSubmit } from "../src/client/js/formHandler"

// The describe() function takes two arguments - a string description, and a test suite as a callback function.
// A test suite may contain one or more related tests
describe("Testing the submit functionality", () => {
// The test() function has two arguments - a string description, and an actual test as a callback function.
test("Testing the handleSubmit() function", () => {
      // Define the input for the function, if any, in the form of variables/array
      // Define the expected output, if any, in the form of variables/array
      // The expect() function, in combination with a Jest matcher, is used to check if the function produces the expected output
      // The general syntax is `expect(myFunction(arg1, arg2, ...)).toEqual(expectedValue);`, where `toEqual()` is a matcher
      expect(handleSubmit).toBeDefined();
})});

You must be wondering about the matchers, and other syntactical information about test blocks. At this point, you must refer to the external resources:
* Jest - Getting started - Provides a basic overview, with the help of an example.
* Jest - matchers - Read carefully to identify the suitable matcher for each of your functions.
* Jest - testing asynchronous code - If you have code that runs asynchronously.
* A tutorial for beginners - A good explanatory tutorial.

4. Configure an npm script named "test" in package.json to run your tests from the command line:

"scripts": {
 "test": "jest"
}

Also, ensure that the "devDependencies" in package.json have a suitable entry for Jest and others, such as, "jest": "^25.3.0",, where the version may vary with time.

5. Run the npm run test command.
6. Important: Verify that every src/client/js file should have at least one test, and all tests have passed to pass this rubric point.

Stage 5 - Service Workers
The rubric item for "Offline Functionality" criteria says:

The project must have set up service workers in webpack.

Go to the webpack config file, and add the setup for service workers.  Test that the site should be available even when you stop your local server .

Stage 6 - Deployment
A great step to take with your finished project would be to deploy it! Unfortunately its a bit out of scope for me to explain too much about how to do that here, but check out Netlify or Heroku for some really intuitive free hosting options.



5.5.4 Submit Project
---------------------------------------
Evaluate a News Article with Natural Language Processing
This project requires you to build a web tool that allows users to run Natural Language Processing (NLP) on articles or blogs found on other websites.

Rubric
Your project will be evaluated by a Udacity code reviewer according to the project rubric. Please make sure to re-review the rubric for detailed project requirements prior to submission.

Submission
Once you've met all of the rubric requirements, you can submit your project as either a zip file or a Github repository link.



