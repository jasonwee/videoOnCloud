

4.2.1 Node.js Overview
---------------------------------------
The first step to using Node.js is to install it on your computer. You can do so by following the link below and installing the Windows or Mac version, depending on what type of operating system you are using.

Node.js Download Page https://nodejs.org/en/download

If you've installed Node previously and need to update to a newer version, check out this article. https://www.mend.io/free-developer-tools/blog/how-to-update-node-js-to-latest-version/



4.2.2 Using Node
---------------------------------------
Using Node
One of the most useful features of Node is that it comes pre-installed with a standard package manager called NPM. NPM started as an easier way to download and manage dependencies of Node.js packages, but now it is also used as a tool in front-end JavaScript as well.

A package in Node.js contains all the files you need for a module. Modules are JavaScript libraries you can include in your project. There are hundreds of thousands of Node.js packages and NPM gives you easy access to all of them! For the purposes of this course we will make heavy use of the Node package called Express, as well as packages called CORS which allows for communication across the web, and Body-Parser (which is considered in the category of Middleware) which will allow us to parse the data we eventually will be passing through routes on our server. Let’s take a look at how to install and include these last two packages from the command line using NPM:

Here is the code to install packages with NPM from the command line: npm install package-name

So to install the package called ‘body-parser’: npm install body-parser

And to install Cors: npm install cors

And then in a file named Server.js the installed package is included and made available in the code with: const bodyParser = require('body-parser')

You need to create the file Server.js in Visual Studio Code.

Node invokes that require() function with a local file path as the function’s only argument.

Quiz Question
￼
Which of the following are true about Node and NPM. Check all that apply:
￼
Node allows developers to write server-side code
NPM is a package manager for Node that allows for easy inclusion of dependencies in a project
To include a Node package already installed via the terminal, the require() function is used

Node Quiz 2
Suppose there is a Node package called amazing.js. What line of code would you write in the terminal to include that package in your project?
npm install amazing

More on Node
For more information about Node.js, you can read their website and documentation, or follow @node.js on Twitter.
You can learn more about NPM from their website.
https://nodejs.org/en
https://twitter.com/nodejs
https://www.npmjs.com/



4.2.3 Exercise: Node and Package Installation
---------------------------------------
Lesson 2 Exercises
L2- Set 1
In this set of exercises you will be demonstrating your ability to install dependencies for a Node.js project. Good luck!
1) Double check node is installed by checking the node version in the terminal.

￼HIDE SOLUTION
node --version

2) Install the cors package from the terminal.

￼HIDE SOLUTION
npm install cors

3) Install the body-parser package from the terminal

￼HIDE SOLUTION
npm install body-parser



4.2.4 Express Overview
---------------------------------------
Express Overview
To install express, we use the npm install express command in the terminal. Using Express we set up an instance of our web app like this:

// Express to run server and routes
const express = require('express');

// Start up an instance of app
const app = express();

First, we include express in our project, and then we instantiate an instance of the app we are going to build in a file called server.js. Once we have created an instance of our app using Express, we can connect the other packages we have installed on the command line to our app in our code with the .use() method. Express version 4 and above require an extra middle-ware layer to handle a POST request (You will learn about POST requests in later lessons). This middle-ware is called as bodyParser. This used to be an internal part of the Express framework, but now you have to install it separately. Below is an example of how the body-parser and cors packages discussed earlier could be connected to the app instance.

/ *Dependencies* /
const bodyParser = require('body-parser')
/ *Middleware*/
//Here we are configuring express to use body-parser as middle-ware.
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
// Cors for cross origin allowance
const cors = require('cors');
app.use(cors());

Quiz Question
￼
Which of the following is not a feature associated with Express:
Express is an API for web apps.

Express Quiz 2
Assume you have installed a package amazing.js from the terminal, and included it in your project using require() under the name amazing. Assuming you have an instance of an express app running with the name app, what line of code would you write to connect the app to the 'amazing.js' package?
app.use(amazing());

So far we have just seen how Express can be used to create an instance of a web app, and to include other Node packages in that web app, but the real fun of Express is unleashed with Routes. Before we can work with routes however, there are a couple other topics we need to cover. Next we'll learn what a server is, and how to create one locally to develop web projects on our own machines.

More on Express
You can learn more about Node and Express by reading the Express/Node introduction on the MDN web docs page.
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction

What about cors, urlencoded and json?
While we won’t cover cors, urlencoded and json in-depth here, if you want to read about more on each, see the following links:
* Cross-origin resource sharing (CORS) and related Express documentation for CORS
* URL Encoding and related Express documentation for bodyParser’s urlencoded functionality
* JavaScript Object Notation (JSON) and related Express documentation for bodyParser’s json functionality



4.2.5 Exercise Including Packages
---------------------------------------
/* Empty JS object to act as endpoint for all routes */
projectData = {};

// TODO-Express to run server and routes
const express = require('express');

// TODO-Start up an instance of app
const app = express();

/* Dependencies */
const bodyParser = require('body-parser')
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// TODO-Cors for cross origin allowance
const cors = require('cors');
app.use(cors());

/* Initializing the main project folder */
app.use(express.static('website'));

const port = 3000;



4.2.6 Creating a Local Server I
---------------------------------------
Another way you might see this same server code written is with an arrow function. Here is an example of the same code using an arrow function:

const server = app.listen(port, ()=>{console.log(`running on localhost: ${port}`)})

What's an arrow function?
Arrow functions are a shorter, more efficient way to write functions.

Here's another example of a regular function and then we'll write it as an arrow function:

Regular Function

function addition(number){ return 4 + number }

addition(4); `

Arrow Function

const addition = number => 4 + number

addition(4);

As you can see, there is less need for parenthesis and return statements, allowing the syntax to be much more compact. Both are acceptable ways of writing functions, and best practice would be for you to be consistent in how you write your code. Even if you choose not to write your code with arrow functions, you should still be aware of how they are written.

Curly brackets aren’t required if only one expression is present, and parentheses are optional if there is only one parameter. So, our previous example could also be written as:

const addition = number => 4 + number

Steps to creating a local server
Set your variables
In this example, we set our variable to port 8000.

const port = 8000;

Utilize the .listen() method
Set your variable named server, and pass the listen method with two arguments port and listening.

const server = app.listen(port, listening);

The port argument refers to the port variable we set above. The listening argument refers to a callback function we create.

The listening function
This function will run when we execute the listen method to let you know that the server is running and on which port by logging messages to the console.

function listening(){
     console.log("server running"); 
     console.log(`running on localhost: {$port}`);
}
Supporting Material:

Arrow functions
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions



4.2.7 Creating a Local Server II
---------------------------------------
Creating a Local Server - Part 2
Because we are writing server-side code, the console.log code will execute in the terminal, instead of the browser where you may be used to. Here is a video showing what this process looks like:


Server Quiz
Think about the steps to setting up a server and make sure you understand the logic:
* Install the Express package from the terminal (make sure you have pointed the terminal to the directory where you are creating your server code).
* Include the Express package in your code.
* Write the code to start the server.
* Check the terminal for confirmation that the server is working or any error messages for issues with the code.
* Open your browser and go to the port specified in your code--ready to rock!

Server Quiz 2
Assuming you have created an app instance named app, and set variable named port to 8000 and have created a callback function named listening -- what line of code would you add above the callback function to successfully initiate a server named server?
app.list(port, listening);




