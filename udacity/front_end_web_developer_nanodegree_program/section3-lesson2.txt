

3.2.1 Introduction
---------------------------------------
Course Outline
You'll be learning so many things in this course! Here are the topics for each lesson:

* Lesson 1 - The Document Object Model
* Lesson 2 - Creating Content with JavaScript
* Lesson 3 - Working with Browser Events
* Lesson 4 - Performance

In Lesson 1, we'll take a dive into what the Document Object Model (DOM) is, how it gets created, and how we can access it with JavaScript.

In Lesson 2, you'll learn to interact with page content using JavaScript. You'll use the skills gained from the first lesson to JavaScript and the DOM to update existing page content, create new page content, add new content to the page, programmatically remove page content, and finally how to style page elements.

In Lesson 3, you'll learn about browser events. There is an entire world of thousands of browser events that are happening when you interact with a website. You can't see them directly, but you'll learn about them, how to listen for them, and how to respond when they occur.

In Lesson 4, you'll learn about Performance. It's never too early to start thinking about the performance implications of code. In this course we'll be writing code that can drastically change website (both its content and its looks!), so we need to make sure that the code we write is both functional and efficient.

As you can see, this course is packed with a ton of information! I hope you're excited to begin!

Being Successful
To be successful in this program, there are a number of technologies that you need to know how to use:

* HTML
* CSS
* JavaScript

With JavaScript, though, it's imperative that you understand the basics of the language (variables, data types, loops, etc.). The course is called "JavaScript and the DOM", so JavaScript knowledge is vital for you to succeed.

The following are a few quiz questions to get you back in the mindset of writing JavaScript.


Quiz Question
ï¿¼
Which of the following is the correct way to declare a variable in JavaScript? (assume each line is run in isolation)

const name = 'Miguel';
var name = 'Orvin';


Quiz Question
ï¿¼
Using the code below, which of the following correctly access the string 'Malaysia'?

const locations = ['Florida', 'England', 'Malaysia', 'South Africa', 'Fiji', 'China'];
ï¿¼
locations[2];



Want to Brush Up?
Hopefully these JavaScript challenges were not too rough for you! These are some of the JavaScript skills that you'll need throughout this course.

If you did find some of these a bit challenging, it's probably a good idea to brush up a bit on some of your JavaScript. Check out Intro to JavaScript for a refresher on these techniques!

Throughout this course, you'll be using lot of fundamental JavaScript skills, so if you're feeling a bit rusty, make sure to brush up on them now before we start diving into this new content.

And speaking of this new content, we're going to be covering some really exciting stuff!

Throughout this course, you'll level up not only your web knowledge, but also your browser and JavaScript knowledge, so get excited!
ï¿¼



3.2.2 The DOM
---------------------------------------
The DOM
In this section, we'll look at the Document Object Model - otherwise known as the DOM.

The words "the DOM" are used all over developer documentation sites and tutorials on writing interactive JavaScript code. But what is it? Perhaps you've even used the DOM and still aren't quite sure what it is. Is it the browser? Is it a special part of JavaScript? Â¯\_(ãƒ„)_/Â¯

Reflect
Take a couple of minutes think about what you think "the DOM" is/refers to, and write out a description of the DOM.


The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.

To recap the video, the following steps happen:

* HTML is received
* HTML tags are converted to tokens
* Tokens are converted to Nodes
* Nodes are converted to the DOM

When you request a website, no matter what backend language is powering that website, it will respond with HTML. The browser receives a stream of HTML. The bytes are run through a complicated (but fully documented) parsing process that determines the different characters (e.g. the start tag character <, an attribute like href, a closing angle bracket like >). After parsing has occurred, a process called tokenization begins. Tokenization takes one character at a time and builds up tokens. The tokens are:

* DOCTYPE
* start tag
* end tag
* comment
* character
* end-of-file

Let's take a break for a second. At this state, the browser has received the bytes that've been sent by a server. The browser has converted the bytes to tags and has read through the tags to create a list of tokens.

This list of tokens then goes through the tree construction stage. The output of this stage is a tree-like structure - this is the DOM!

I want to point out two important quotes that Illya said in the video:

a tree structure that captures the content and properties of the HTML and all the relationships between the nodes

the DOM is the full, parsed representation of the HTML

So the DOM is a model (representation) of the relationships and attributes of the HTML document that was received. Remember that DOM stands for "Document Object Model". Something that I've found to be true as I've been learning is that to break something down, just read the thing backwards:

Document Object Model

...would becomeâ€¦

Object Model of the Document!

Remember that a JavaScript object is a tree-like structure that has properties and values. So the DOM can be accessed using a special object provided by the browser: document

Try this:

1. open the console on this page
* type out the word document
  * careful not to declare it (const document)
  * careful not to wrap it in quotes ("document")
* press enter

Viewing the document object in the DevTools' Console pane.

The document object is provided by the browser and is a representation of the HTML document. This object is not provided by the JavaScript language. ECMAScript is the language specification that JavaScript is based on, and it only references the document object model in one place, in its "Global Object" section:

In addition to the properties defined in this specification the global object may have additional host defined properties. This may include a property whose value is the global object itself; for example, in the HTML document object model the window property of the global object is the global object itself. (source)

Basically, this says that the document object is not part of JavaScript, but is expected to already exist and be freely accessible to JavaScript code.

The DOM is standardized by the W3C. There are a number of specifications that make up the DOM, here are few:

* Core Specification
* Events Specification
* Style Specification
* Validation Specification
* Load and Save Specification

To see the full list of DOM specs, check out the standard at: https://www.w3.org/standards/techs/dom#w3c_all

Reflect

Ok, so do not scroll back up or review what you just read. Just take a moment, think about everything you've learned about the DOM and the document object and, in your own words, write an explanation of what "the DOM" is.

data representation of the objects that consists of the structure and content of a document on web.

The DOM Recap
The DOM stands for "Document Object Model" and is a tree-like structure that is a representation of the HTML document, the relationship between elements, and contains the content and properties of the elements.

The DOM is not:

* part of the JavaScript language

The DOM is:

* constructed from the browser
* is globally accessible by JavaScript code using the document object

The DOM is used all of the time and is what we'll be using throughout this course!

Further Research
* DOM Introduction
* Section 8.2 Parsing HTML documents from the W3C's HTML Documentation
* DOM Specification on W3C
* HTML Document Object Model mentioned in the ECMAScript Specification - the language specification used by JavaScript



3.2.3 Selecting Page Elements with CSS selectors
---------------------------------------

A CSS Mindset

You're probably used to seeing (and writing!) a lot of this kinda stuff:

.header {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto
}

.header.header--clone .header__navbar {
    height: 4.5rem
}

.header.header--stick {
    top: 0;
    background-color: #ffffff;
    z-index: 8000;
    box-shadow: 0px 1px 2px rgba(0,0,0,0.1)
}

.header__navbar {
    max-width: 73.75rem;
    margin-left: auto;
    margin-right: auto;
    height: 4.5rem;
    padding: 0 1.5em
}

...you know, CSS! The skills that you've learned writing CSS will help you in this section!

With this in mind, let's make sure that you're comfortable answering the following questions.


Quiz Question
ï¿¼
Which of the following will style an element by its ID?

#footer { ... }

ï¿¼
ï¿¼
Quiz Question
ï¿¼
Which of the following will style an element by its class?

.left-nav { ... }
.id { ... }

ï¿¼
ï¿¼
Quiz Question
ï¿¼
p { ... }


So this was a quick review on how to select elements by ID, class, and tag. Believe it or not, being able to select HTML elements this way is actually going to be a vital skill in this section where we learn how to access page elements using JavaScript and the DOM!

If you struggled a little bit with this section, perhaps you should do a quick review of CSS by reviewing the HTML and CSS course.

Alrighty - let's get right to it and let the fun begin! ðŸ™Œ



3.2.4 Select Page Element by ID
---------------------------------------

Select An Element By ID
Let's take a look at how we can use JavaScript and the DOM to gain access to specific elements using their ID attribute.

Remember the document object from the previous section? Well, we're going to start using it! Remember the document object is an object, just like a JavaScript object. This means it has key/value pairs. Some of the values are just pieces of data, while others are functions (also known as methods!) that provide some type of functionality. The first DOM method that we'll be looking at is the .getElementById() method:

document.getElementById();

If we ran the code above in the console, we wouldn't get anything, because we did not tell it the ID of any element to get! We need to pass a string to .getElementById() of the ID of the element that we want it to find and subsequently return to us:

document.getElementById('footer');

One thing to notice right off the bat, is that we're passing 'footer', not '#footer'. It already knows that it's searching for an ID (its name is "getElementById", for a reason!).

If you'd like to read more about this method, check out its documentation page on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById

Let's use this MDN documentation page to try out using this method.

To recap what we just did:

* we opened the DevTools for the page we were looking at
* we switched to the Console pane
* we ran document.getElementById('content'); on the console

Running this code caused the document object to search through its entire tree-like structure for the element that has an ID of "content".

Now it's your turn!
* I loaded the HTML page
* I opened the DevTools
* I switched to the Console pane
* I used document.getElementById() to locate an element by its ID

ï¿¼
Quiz Question
ï¿¼
Now, what do you think will happen if you used document.getElementById('<some-nonexistent-ID>') to search for some ID that doesn't actually exist in the HTML page?

null will be returned
ï¿¼
ï¿¼
Quiz Question

Which of the following will select the element with the ID of logo?
ï¿¼
document.getElementById('logo');

Write the DOM code to select the element with ID strawberry-banner.

document.getElementById('strawberry-banner');

ï¿¼
Selecting By ID Recap
In this section, we learned how to select a DOM element by its ID:

.getElementById()

There are a couple of important things to keep in mind about this method:

* it is called on the document object
* it returns a single item

// select the element with the ID "callout"
document.getElementById('callout');

Further Research
.getElementById() on MDN



3.2.5 Select Page Elements by class or tag
---------------------------------------
Selecting Multiple Elements At Once

As I'm sure you remember from learning both HTML structure and CSS styling, an ID should be unique - meaning two or more elements should never have the same ID. Since IDs are unique, and since there will be only one element in the HTML with that ID, document.getElementById() will only ever return at most one element. So how would we select multiple DOM elements?

The next two DOM methods that we'll be looking at that both return multiple elements are:

* .getElementsByClassName()
* .getElementsByTagName()

Accessing Elements By Their Class

The first method we'll look at is .getElementsByClassName():

document.getElementsByClassName();

Similarly to .getElementById(), if we ran the code above in the console, we wouldn't get anything, because we did not tell it the class to search for! Also just like .getElementById(), .getElementsByClassName() is expecting that we call it with a string of the class we want it to search for/return:

document.getElementsByClassName('brand-color');

If you'd like to read more about this method, check out its documentation page on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName

Let's use this MDN documentation page to try out using this method.

Beware of the S!

I know we haven't looked at .getElementsByTagName() just yet, but there's something different about .getElementById() compared with both .getElementsByClassName() and .getElementsByTagName() that I want to point out because it can be easy to miss; both .getElementsByClassName() and .getElementsByTagName() have an extra "s" in their name.

The method's name is .getElementsByClassName(), not .getElementByClassName(). Notice the word right in the middle, it's "Elements" not "Element". If you think about it, this actually makes a lot of sense! Since both .getElementsByClassName() and .getElementsByTagName() could return multiple items, their method names tell us that directly. Now compare this with .getElementById() that will only ever return at most one element. Its name has the singular "Element" in it.

I just wanted to point this out because I've been bitten by that missing "s" many-a-time when running code like:

document.getElementByClassName('highlight-spanned');

This code above will not work, because there is no DOM method .getElementByClassName() (with singular "Element").

Accessing Elements By Their Tag

After looking at both .getElementById() and .getElementsByClassName(), the new .getElementsByTagName() method should seem quite easy on the eyes:

document.getElementsByTagName('p');

Let's use this MDN documentation page to try out using this method: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

Quiz Question
ï¿¼
Which of the following would correctly select all elements with class: 'splort'?

document.getElementsByClassName('splort');


Write the DOM code to select all <article> elements.

document.getElementsByTagName('article');


Write the DOM code to select all elements with class: fancy-footer.

document.getElementsByClassName('fancy-footer');


What's Returned?

We just saw that .getElementsByClassName() returns an array-like data structure of elements. But what exactly is an element?

In the next section, we'll take the plunge and look at Elements and Nodes.

Selecting Multiple Elements At Once Recap

In this section, we learned two ways to select multiple DOM elements:

* .getElementsByClassName()
* .getElementsByTagName()

There are a few important things to keep in mind about these two methods:

* both methods use the document object
* both return multiple items
* the list that's returned is not an array

// select all elements that have the class "accent-color"
document.getElementsByClassName('accent-color');

// select all "span" elements
document.getElementsByTagName('span');

Further Research
.getElementsByClassName() on MDN
.getElementsByTagName() on MDN




