date start : 08 may 2020


3.1 introduction
---------------------------------------



3.2 lists and membership operators
---------------------------------------



3.3 quiz: lists and membersip operators
---------------------------------------
num_days = days_in_month[month-1]

print(eclipse_dates[-3:])




3.4 solution: list and membership operators
---------------------------------------



3.5 why do we need lists?
---------------------------------------



3.6 list methods
---------------------------------------



3.7 quiz: list methods
---------------------------------------
2

4


3




3.8 check for understanding: lists
---------------------------------------
1,3,5

multable and ordered

arr[0]
arr[3]
arr[len(arr) -1]
arr[-2]

arr[2:6]
arr[:3]
arr[4:]






3.9 tuples
---------------------------------------




3.10 quiz: tuples
---------------------------------------
ordered
immutable
ordered
mutable


True,2




3.11 sets
---------------------------------------


3.12 quiz: sets
---------------------------------------
6

maybe





3.13 dictionaries and identity operators
---------------------------------------


3.14 quiz: dictionaries and identity operators
---------------------------------------
population = {'Shanghai': 17.8, 'Istanbul': 13.3, 'Karachi': 13.0, 'Mumbai': 12.5}

str, int, float


keyerror

true,true,true,false




3.15 solution: dictionaries and identity operators
---------------------------------------



3.16 quiz: more with dictionaries
---------------------------------------
string
list 
[20,10,15,8,32,15]
8
error
[0.3,0.5,0.8,0.3,1]


3.17 when to use dictionaries?
---------------------------------------


3.18 check for understanding: data structures
---------------------------------------
2,3

1,4

false

1,3,4

2




3.19 compound data structures
---------------------------------------



3.20 quiz: compound data structures
---------------------------------------
elements['hydrogen'] = {'number': 1, 'weight': 1.00794, 'symbol': 'H', 'is_noble_gas': False}
elements['helium'] = {'number': 2, 'weight': 4.002602, 'symbol': 'He', 'is_noble_gas': True}

print(elements['hydrogen']['is_noble_gas'])
print(elements['helium']['is_noble_gas'])


2,3,4


1,3,4


1,3,5





3.21 solution: compound data structures
---------------------------------------



3.22 practice questions
---------------------------------------
# split verse into list of words
verse_list = verse.split()
print(verse_list, '\n')

# convert list to a data structure that stores unique elements
verse_set = set(verse_list)
print(verse_set, '\n')

# print the number of unique words
num_unique = len(verse_set)
print(num_unique, '\n')





verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}
print(verse_dict, '\n')

# find number of unique keys in the dictionary
num_keys = len(set(verse_dict))
print(num_keys)

# find whether 'breathe' is a key in the dictionary
contains_breathe = 'breathe' in verse_dict
print(contains_breathe)

# create and sort a list of the dictionary's keys
sorted_keys = sorted(verse_dict.keys())

# get the first element in the sorted list of keys
print(sorted_keys[0])

# find the element with the highest value in the list of keys
print(max(verse_dict, key=verse_dict.get)) 






51
no
there is no first key.
about
yourself


3.23 solution: practice questions
---------------------------------------


3.24 conclusion
---------------------------------------

Data Structure	Ordered	Mutable	Constructor	Example
List	        Yes	Yes	[ ] or list()	[5.7, 4, 'yes', 5.7]
Tuple	        Yes	No	( ) or tuple()	(5.7, 4, 'yes', 5.7)
Set             No	Yes	{}* or set()	{5.7, 4, 'yes'}
Dictionary	No	No**	{ } or dict()	{'Jun': 75, 'Jul': 89}



3.25 data structures and algorithm
---------------------------------------




