date start : 15 july 2022


4.3.1 introduction to Vectors
---------------------------------------
Introduction to Vectors
To do just about anything of interest in a program, we need a group of data to work with.

For example, our program might need:

A list of Twitter‚Äôs trending tags
A set of payment options for a car
A catalog of eBooks read over the last year
The need for storing a collection of data is endless.

We are familiar with data types like int and double, but how do we store a group of ints or a group of doubles?

In this lesson, we will start with one of the simplest, and arguably the most useful, ways of storing data in C++: a vector.

A vector is a sequence of elements that you can access by index.



4.3.2 Creating a Vector
---------------------------------------
Creating a Vector
The std::vector lives in the <vector> header. So first, we need to add this line of code at the top of the program:

#include <vector>
For review, #include is a preprocessor directive that tells the compiler to include whatever library that follows. In our case that is the standard vector library.

And the syntax to create a vector looks like:

std::vector<type> name;

So to define a vector of ints called calories_today:

std::vector<int> calories_today;
Inside the angle brackets is the data type of the vector. After the angle brackets is the name of the vector.

Note: The type of the vector (i.e., what data type is stored inside) cannot be changed after the declaration.

#include <iostream>
#include <vector>

int main() {
   
  std::vector<double> subway_adult;
  
  // Declare another vector here:
  std::vector<double> subway_child;
    
  
}



4.3.3 Initializing a Vector
---------------------------------------
Initializing a Vector
Now we know how to create a vector, we can also initialize a vector, giving it values, as we are creating it in the same line.

For example, instead of just creating a double vector named location:

std::vector<double> location;

We can create and initialize location with specific values:

std::vector<double> location = {42.651443, -73.749302};

Here, we are storing a latitude and a longitude.

So it would look something like this:

Another way we can initialize our vector is by presizing, or setting the size.

Suppose we want to create and initialize a vector with two elements. However, we don‚Äôt know what values we want to add yet:

std::vector<double> location(2);
Here, we are creating a double vector and setting the initial size to two using parentheses.

It would look something like this:

Because 0.0 is the default value for double.

#include <iostream>
#include <vector>

int main() {
   
  std::vector<double> subway_adult = {800, 1200, 1500};
  
  // Give subway_child some values:
  
  std::vector<double> subway_child = {400, 600, 750};
}



4.3.5 Index
---------------------------------------
Index
Now that we have a vector, how do we access an individual element? This is where index comes into play.

An index refers to an element‚Äôs position within an ordered list. Vectors are 0-indexed, meaning the first element has index 0, the second index 1, and so on.

For example, suppose we have a char vector with all the vowels:

std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};

It should look something like this:

The character at index 0 is 'a'.
The character at index 1 is 'e'.
The character at index 2 is 'i'.
The character at index 3 is 'o'.
The character at index 4 is 'u'.
To output each of the elements, we can do:

std::cout << vowels[0] << "\n";
std::cout << vowels[1] << "\n";
std::cout << vowels[2] << "\n";
std::cout << vowels[3] << "\n";
std::cout << vowels[4] << "\n";
Using the notation vector[index] with square brackets after the vector name and the element‚Äôs index number inside.

This will output:

a
e
i
o
u


#include <iostream>
#include <vector>

int main() {
   
  std::vector<double> subway_adult = {800, 1200, 1500};
  
  std::vector<double> subway_child = {400, 600, 750};
  
  // What number at index 2 of subway_child?
  std::cout << subway_child[2];
  
  
}



4.3.6 Adding and Removing Elements
---------------------------------------
Adding and Removing Elements
Often, we start with a vector that‚Äôs either empty or a certain length. As we read or compute data we want, we can grow the vector as needed.

.push_back()
To add a new element to the ‚Äúback‚Äù, or end of the vector, we can use the .push_back() function.

For example, suppose we have a vector called dna with three letter codes of nucleotides:

std::vector<std::string> dna = {"ATG", "ACG"};

It would look like:


We can add elements using .push_back():

dna.push_back("GTG");
dna.push_back("CTG");

So now dna would look like:

.pop_back()
You can also remove elements from the ‚Äúback‚Äù of the vector using .pop_back().

dna.pop_back();

Notice how nothing goes inside the parentheses.

The vector would now look like:

because CTG is removed!

Note: If you have programmed in other languages, be aware that .pop_back() has no return value in C++.


#include <iostream>
#include <vector>

int main() {
  
  std::vector<std::string> last_jedi;
  
  // Add characters here:
  last_jedi.push_back("kylo");
  last_jedi.push_back("rey");
  last_jedi.push_back("luke");
  last_jedi.push_back("finn");
  
  std::cout << last_jedi[0] << " ";
  std::cout << last_jedi[1] << " ";
  std::cout << last_jedi[2] << " ";
  std::cout << last_jedi[3] << " ";
  
}



4.3.6 size()
---------------------------------------
.size()
<std::vector> not only stores the elements; it also stores the size of the vector:

The .size() function returns the number of elements in the vector.

For example, suppose we have a std::string vector with Sonny‚Äôs grocery list:

std::vector<std::string> grocery = {"Hot Pepper Jam", "Dragon Fruit", "Brussel Sprouts"};

It should look something like this:

The string at index 0 is "Hot Pepper Jam".
The string at index 1 is "Dragon Fruit".
The string at index 2 is "Brussel Sprouts".

std::cout << grocery.size() << "\n";

will return

3
Notice how nothing goes in the parentheses.


#include <iostream>
#include <vector>

int main() {
  
  std::vector<std::string> grocery = {"Hot Pepper Jam", "Dragon Fruit", "Brussel Sprouts"};
    
  // Add more 
  grocery.push_back("foo");
  grocery.push_back("bar");
  std::cout << grocery.size() << "\n"; 
}



4.3.7 Operations
---------------------------------------
Operations
So what happens when you want to change each of the values within a vector?

You can use a for loop!

For example, suppose we have an int vector that looks like this:

You can write a for loop that iterates from 0 to vector.size(). And here‚Äôs the cool part: you can use the counter of the for loop as the index! Woah.

for (int i = 0; i < vector.size(); i++) {
 
  vector[i] = vector[i] + 10;
 
}
This will change the vector to:

Here, we incremented i from 0 to vector.size(), which is 3. During each iteration, we are adding 10 to the element at position i:

When i = 0, we added 10 to vector[0]
When i = 1, we added 10 to vector[1]
When i = 2, we added 10 to vector[2]



#include <iostream>
#include <vector>
  
int main() {
  
  std::vector<double> delivery_order;
  
  delivery_order.push_back(8.99);
  delivery_order.push_back(3.75);
  delivery_order.push_back(0.99);
  delivery_order.push_back(5.99);
  
  // Calculate the total using a for loop:
  
  double total = 0.0;
  
  for (int i = 0 ; i < delivery_order.size(); i++) {
    total += delivery_order[i];
  }
  
  std::cout << total << "\n";
  
}



4.3.8 Review
---------------------------------------
Review
Congratulations! You have learned about how to store groups of data into vectors in C++. üôå

Here are some of the things that we learned:

Vectors are a sequence of elements that you can access by an index.

std::vector<int> even = {2, 4, 6, 8, 10};

The first index in a vector is 0.

Some of the functions that come with vectors:

.push_back()
.pop_back()
.size()
We can use a for loop to iterate through a vector.


#include <iostream>
#include <vector>

int main() {

   std::vector<int> numbers = {2, 4, 3, 6, 1, 9}; 

   int even = 0;
   int odd = 1;

   for (int i = 0; i < numbers.size(); i++) {
      if (numbers[i] % 2 == 0) {
        even += numbers[i];
      } else {
        odd *= numbers[i];
      }
   }

   std::cout << "Sum of even numbers is " << even << "\n";
   std::cout << "Product of odd numbers is " << odd << "\n";

}
