https://www.codecademy.com/catalog/language/go

date start : 


1.1 From the Get Go
---------------------------------------



1.2 Compiling
---------------------------------------
When we write Go code, we‚Äôre writing it to be readable for ourselves and other developers. We‚Äôre able to make sense of the code and its intentions. Computers, on the other hand, do NOT understand Go code and thus have no direct idea what our code means/does. What computers do understand are a series of 0‚Äôs and 1‚Äôs (or binary). To translate Go code to binary, Go has a compiler, a piece of software that converts Go code into a program that the computer understands. This translated code is called an executable or a binary file. We can then run the executable which will do what our Go program was written to do.

To tell the compiler to compile a Go program, we first navigate to our Terminal (on Mac), or Command Prompt (on Windows). Then, type in go build followed by the name of our file and press Enter. If we wanted to run a file called greet.go, the command will look like:

go build greet.go

While nothing obvious is shown after we run our command, if we type in the command ls, we‚Äôll see our original Go program and executable file.

ls
greet     greet.go


To execute the file, we call ./greet

./greet

Note: If the Go compiler finds that our Go code isn‚Äôt written correctly, then it will throw an error and our Go program won‚Äôt compile. We‚Äôll need to fix the error before the compiler can properly do its job.

Now let‚Äôs go one step further and actually do it!



package main

import "fmt"

func main() {
	fmt.Println("Hello World")
}



1.3 Running Files
---------------------------------------
Great, we were able to compile our program into an executable file that will always print out ‚ÄúHello World‚Äù. If we want our program to run again, we don‚Äôt have to compile the program again, we simply run the executable file. Therefore, if we want fast code that users interact with, we‚Äôd compile a program once and use the executable file.

But what happens if we ever wanted to change our program? We would have to compile another executable file and then run that file. Imagine having to do that every single time just to check a small change or fix an error! üò±

Thankfully, we have the go run command followed by the name of the Go program. The go run command combines both the compilation and execution of code for us. This allows us to quickly check the output of our code (and for any errors). Unlike go build, go run will NOT create executable file in our current folder.



1.4 Basic Go Structure: Packages
---------------------------------------
Basic Go Structure: Packages
Now that we understand how to compile and run Go programs, let‚Äôs take a detailed look at the structure of Go‚Äôs program, specifically its packages:

package main 
 
import "fmt" 
 
func main () {
  fmt.Println("Hello World") 
}

Go programs are read from top to down, left to right, so let‚Äôs focus on the first line package main. This line is called a package declaration and every Go program starts with one. The package declaration informs the compiler whether to create an executable or library. In contrast to an executable, a library doesn‚Äôt outright run/execute code ‚Äî it is a collection of code that can be used in other programs. Programs that have the package declaration package main (like ours) will create an executable file.

Next is a blank line. Go generally ignores these blank lines, they‚Äôre considered whitespace (new lines, spaces, and tabs). While our program doesn‚Äôt need the line break, it makes our code easier to read, or increases the program‚Äôs readability.

Then we have an import statement, import "fmt". The import keyword allows us to bring in and use code from other packages. We should also note that the package name is enclosed with double quotes ", otherwise our program will get an error and not compile/run.

Packages serve important roles in Go. They group related code together, allow code to be reusable, and make it easier to maintain. We only import the packages we need. In turn, our programs run faster because it‚Äôs not bogged down by extra code/packages!

Now that we have a general idea of how a Go program is written. Let‚Äôs start to write our own from scratch!



1.5 Basic Go Structure: main 
---------------------------------------
Continuing on with our program, we have:

func main () {
    fmt.Println("Hello World") 
}

There are a few things happening in our main function. We‚Äôre introduced to how functions (reusable blocks of code) are defined/created in Go. The basic syntax being:

The func keyword denotes the start of a function declaration.
func is followed by the name of the function.
After name is a pair of parentheses () and a set of curly braces {}.
Inside the function block {}, we indent the code inside using a tab. Then we access the fmt package and call its Println (stands for print line) function to print the message "Hello World" to the terminal.

Now let‚Äôs take a second and realize that while we defined our main function, we never explicitly told main to run its block of code. In other programming languages, functions have to be called, i.e. told to run its code. However, a main function is special, a file that has a package main declaration will automatically run the main function!

This nuance becomes more important as we build more complex programs. In the meanwhile, let‚Äôs finish up our program!



1.6 Importing Multiple Packages
---------------------------------------
Previously, we imported a single package, fmt. But, we can import so many more! Go has an extensive list of packages that we can take advantage of. Here‚Äôs a list of Go‚Äôs standard packages

To import multiple packages we can add multiple import statements, like so:

import "package1"
import "package2"

Or we can use a single import with a pair of parentheses that contain our packages:

import (
  "package1"
  "package2"
)

Notice, when using an import with parentheses, we‚Äôre not separating each package with a comma. Instead, each package is on a different line.

We can also provide an alias to a package by including the alias name before the file. Including an alias will make it easier to refer to the package without typing out the full package name:

import (
  p1 "package1"
  "package2"
)

In the example above we‚Äôve aliased package1 as p1 and now we can call functions from package1 by using p1 like:

p1.SampleFunc()

Instead of:

package1.SampleFunc() 



package main

import "fmt"
import t "time"

func main() {
	fmt.Println("Hello World")
  fmt.Println(t.Now())
}




1.7 Comments
---------------------------------------
We can‚Äôt always be there in person to explain to the next developer (or even our future self) what our code does or what our intentions were when writing it. That‚Äôs where comments come in.

Comments are ignored by the compiler and helpful for many things. We can use comments to explain our code, or thought process, and even to comment out code to debug (fix errors).

Go also encourages the use of comments for describing what functions do, it gets used by Go‚Äôs documentation tool. In fact, it started on their Github Wiki page!

There are two types of comments in Go. A line comment is created using //:

// This entire line is ignored by the compiler
// fmt.Println("Does NOT print")
fmt.Println("This gets printed!") // This part gets ignored

Notice that line comments out the content to the right of //.

There are also block comments that can span multiple lines‚Äî it starts with /*, ends with a */ and envelopes everything inside (including new lines):

/*
This is ignored.
This is also ignored. 
fmt.Println("This WON'T print!")
*/

In the example above we‚Äôve commented out all three lines using a block comment.

Let‚Äôs use some comments in our own code!



1.8 Go Resources
---------------------------------------
Learning a new language like Go involves learning the accompanying rules and syntax. But, we don‚Äôt have to commit everything to memory! It‚Äôs ok to search things up, in fact, that‚Äôs what all good programmers do!

If you‚Äôre ever stuck on something, check out:

Codecademy‚Äôs Forums
View questions and answers from learners on this site!

Stack Overflow‚Äôs Go questions
A forum of programmers answering programming questions.

Go‚Äôs official site
Go to the official site for documentation.

Google
Roll up your sleeves and search it up!
It may help to search Golang instead of Go in certain cases.

In addition to online resources, Go also has it‚Äôs own built-in documentation system. To use it, in the command line, use the command go doc followed by a package name. For instance, to find out more information on the fmt package, you can use the command:

go doc fmt 

In the terminal, you‚Äôll see at the top:

package fmt // import "fmt"
 
Package fmt implements formatted I/O with functions analogous to C's printf
and scanf. The format 'verbs' are derived from C's but are simpler.
...

The information returned actually spans quite a few lines, the example above is truncated. To get more specific information about a function in a package (like fmt‚Äòs Println function) append .Println (or .println, the capitalization of the function doesn‚Äôt matter to go doc) to the command:

go doc fmt.Println

The go doc command is also very helpful when you‚Äôre interacting with new libraries and packages. Try it out yourself!



1.9 Review
---------------------------------------
Great job! You‚Äôve just finished your first Go lesson! In this lesson you learned about:

What Go/Golang is.
What Go is used for.
Go‚Äôs compiler.
How to compile Go files into an executable.
Running an executable file.
Running a Go file without outright compiling it.
What a Go package is.
How to import a Go package.
How to import multiple Go packages.
The uniqueness of the main function in a main package.
How to find help and information.
This first step into a new and fantastical language is the start of a wonderful journey. It‚Äôs up to you to decide how far to Go.

If you‚Äôre interested in setting up your computer to create Go programs on your own computer, use our guide for developing Go locally!


